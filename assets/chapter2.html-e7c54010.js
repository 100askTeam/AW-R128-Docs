import{_ as r,r as s,o,c as d,a,b as e,d as c,e as t}from"./app-e85d5a28.js";const n={},p=t(`<h1 id="sdk-入门" tabindex="-1"><a class="header-anchor" href="#sdk-入门" aria-hidden="true">#</a> SDK 入门</h1><p>本章介绍基础的SDK编译，打包等操作，方便快速上手 SDK 开发。</p><h2 id="sdk-基础知识" tabindex="-1"><a class="header-anchor" href="#sdk-基础知识" aria-hidden="true">#</a> SDK 基础知识</h2><p>R128 平台拥有三个核心，Cortex M33 核心作为启动和安全核心，XuanTie C906 核心作为应用核运行用户 APP，HIFI5 作为算法核运行DSP算法。由于架构不同，不同的核心需要运行不同的 RTOS。</p><p>其中 Cortex M33 和 C906 运行的是 <code>FreeRTOS V10.4.3</code> 同一个内核支持两个不同架构的核心，其外设、组件、驱动是相同的。特性如下：</p><ul><li>支持 Cortex-M33（Armv8-M）、C906（Riscv-64） 架构</li><li>FreeRTOS V10.4.3 内核</li><li>支持标准 posix 接口</li><li>支持系统接口，用于内核以外的模块调用内核函数的接口</li><li>支持文件系统，包含设备管理器、分区管理器、文件系统实体管理器等，例如 littlefs、fat 等，实现对不同设备类型、分区类型、文件系统类型的集成</li><li>支持 newlibc 库</li></ul><p>而 HIFI5 运行的是 Cadence 所推荐的 <code>FreeRTOS V10.2.0</code> 内核，其部分组件与 M33/C906 核心不同。特性如下：</p><ul><li>支持 Xtensa HIFI5 架构</li><li>FreeRTOS V10.2.0 内核</li><li>支持系统接口，用于内核以外的模块调用内核函数的接口</li><li>支持 VFPU/NN 算法库</li></ul><p>所以在开发过程中，M33/C906 使用的是一套 FreeRTOS SDK，HIFI5 使用的是另外的一套 FreeRTOS SDK。这里将介绍 M33/C906 的开发入门，HIFI5的相关开发将在 DSP 章节介绍。</p><ul><li>异构计算相关在</li></ul><h3 id="sdk-目录架构" tabindex="-1"><a class="header-anchor" href="#sdk-目录架构" aria-hidden="true">#</a> SDK 目录架构</h3><p>下表是简化版本的 SDK 目录结构，具体的说明在 【<a href="/r128/sdk_tree?id=sdk-%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">SDK入门 - SDK 架构与目录结构</a>】中说明。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── board               # 板级配置目录
│   ├── common          # 公共板级配置目录
│   │   ├── configs     # 公共板级配置
│   │   └── data        # 公共数据
│   └── r128s2          # R128 S2 芯片配置目录
│       └── module      # R128 S2 Module 模块板级配置目录
├── lichee              # 系统源码目录
│   ├── brandy-2.0      # 启动相关目录
│   ├── dsp             # HIFI5 FreeRTOS 系统、组件、应用
│   ├── rtos            # M33/C906 FreeRTOS 系统、组件、应用
│   ├── rtos-components # 公共应用组件，libc、多媒体、lvgl等
│   └── rtos-hal        # RTOS HAL驱动
├── out                 # 打包输出的临时文件与最终镜像文件
└── tools               # 用于存放打包相关的脚本、工具
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化sdk环境" tabindex="-1"><a class="header-anchor" href="#初始化sdk环境" aria-hidden="true">#</a> 初始化SDK环境</h2><p>在编译之前，需要初始化 SDK 的环境，使用下列命令初始化环境。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> envsetup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image1.png" alt="image1"></p><h2 id="载入项目方案" tabindex="-1"><a class="header-anchor" href="#载入项目方案" aria-hidden="true">#</a> 载入项目方案</h2><p>使用下列命令载入方案</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lunch_rtos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image2.png" alt="image2"></p><p>这里我们需要开发的是 <code>r128s2_module_c906</code> 方案，对应的是 R128 模块的最小化系统开发板的 C906 核心的 RTOS。输入 <code>1</code> 回车即可。</p><p>第一次载入方案会解压工具链，解压完成后会提示方案载入成功：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image3.png" alt="image3"></p><p>第二次开始就会跳过解压工具链，并且会记录上一次选择的方案。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image4.png" alt="image4"></p><h2 id="更换项目方案" tabindex="-1"><a class="header-anchor" href="#更换项目方案" aria-hidden="true">#</a> 更换项目方案</h2><p>在开发过程中如果需要开发 M33 核心方案，需要重新执行 <code> lunch_rtos</code> 选择 M33 方案。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image5.png" alt="image5"></p><h2 id="配置-rtos-基本设置与软件包配置" tabindex="-1"><a class="header-anchor" href="#配置-rtos-基本设置与软件包配置" aria-hidden="true">#</a> 配置 RTOS 基本设置与软件包配置</h2>`,30),l=a("code",null,"mrtos_menuconfig",-1),h={href:"https://yuzukihd.top/R128Module/#/sdk_base/rtos_package",target:"_blank",rel:"noopener noreferrer"},u=t(`<p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image6.png" alt="image6"></p><h2 id="编译系统" tabindex="-1"><a class="header-anchor" href="#编译系统" aria-hidden="true">#</a> 编译系统</h2><p>可以使用 <code>m</code> 命令或者 <code>mrtos</code> 命令编译RTOS系统。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image7.png" alt="image7"></p><h2 id="打包系统" tabindex="-1"><a class="header-anchor" href="#打包系统" aria-hidden="true">#</a> 打包系统</h2><p>使用 <code>p</code> 或者 <code>pack</code> 命令打包系统</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image8.png" alt="image8"></p><p>注意，打包如果出现</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>err: failed to open bin file rtos_xxx.fex
Generate image file failed
ERROR: mkimage run error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则是因为系统配置勾选启用了这个核心但是实际没有编译这个核心的 RTOS 系统，导致找不到这个核心的 RTOS 的固件。这时候需要编译完成 RTOS 系统然后重新打包。例如报错 <code>err: failed to open bin file rtos_arm.fex</code></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image9.png" alt="image9"></p><p>则需要编译对应的 <code>arm</code> 核心的固件，在这里是 m33 核心。<code>lunch_rtos</code> 选择 <code>M33</code> 核心，然后 <code>m</code> 编译。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image10.png" alt="image10"></p><p>此时 <code>pack</code> 就可以通过了</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image8.png" alt="image8"></p><h2 id="扩展命令" tabindex="-1"><a class="header-anchor" href="#扩展命令" aria-hidden="true">#</a> 扩展命令</h2><p>了解上面的命令即可开始开发 RTOS ，不过 SDK 还提供了一些其他命令简化使用。</p><h3 id="一键编译-打包" tabindex="-1"><a class="header-anchor" href="#一键编译-打包" aria-hidden="true">#</a> 一键编译 + 打包</h3><p>SDK 提供了 <code>mp</code> 命令以供一键编译 + 打包方案。</p><h3 id="编译-u-boot" tabindex="-1"><a class="header-anchor" href="#编译-u-boot" aria-hidden="true">#</a> 编译 <code>U-boot</code></h3><p>可以使用 <code>muboot</code> 命令编译 <code>u-boot</code></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image11.png" alt="image11"></p><p>编译完成后会自动拷贝生成的镜像到指定位置等待打包</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image12.png" alt="image12"></p><h3 id="编译-boot0" tabindex="-1"><a class="header-anchor" href="#编译-boot0" aria-hidden="true">#</a> 编译 <code>boot0</code></h3><p>可以使用 <code>mboot0</code> 编译 <code>boot0</code>，编译完成后会自动拷贝生成的镜像到指定位置等待打包</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image13.png" alt="image13"></p><h3 id="编译-u-boot-boot0" tabindex="-1"><a class="header-anchor" href="#编译-u-boot-boot0" aria-hidden="true">#</a> 编译 <code>U-boot</code> + <code>boot0</code></h3><p>可以使用 <code>mboot</code> 命令编译 <code>U-boot</code> + <code>boot0</code></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image14.png" alt="image14"></p><p>编译完成后会自动拷贝生成的镜像到指定位置等待打包</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part3/chapter2/image15.png" alt="image15"></p><h3 id="文件夹跳转快捷命令" tabindex="-1"><a class="header-anchor" href="#文件夹跳转快捷命令" aria-hidden="true">#</a> 文件夹跳转快捷命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- croot:        Jump to the top of the tree.
- cboot:        Jump to uboot.
- cboot0:       Jump to boot0.
- cbin:         Jump to uboot/boot0 bin directory.
- cconfigs:     Jump to configs of target.
- cout:         Jump to out directory of target.
- cdsp:         Jump to dsp.
- chal:         Jump to rtos-hal.
- ccomponents:  Jump to rtos-components.
- cbuild:       Jump to rtos build dir.
- cprojects:    Jump to rtos projects dir.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function m(b,g){const i=s("ExternalLinkIcon");return o(),d("div",null,[p,a("p",null,[e("SDK 提供了 "),l,e(" 命令来配置基本SDK配置与软件包。相关文档位于 "),a("a",h,[e("RTOS软件包配置"),c(i)]),e("。下图为进入的配置界面。")]),u])}const k=r(n,[["render",m],["__file","chapter2.html.vue"]]);export{k as default};
