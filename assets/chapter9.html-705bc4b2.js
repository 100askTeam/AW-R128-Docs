import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const p={},e=t(`<h1 id="rtos-蓝牙" tabindex="-1"><a class="header-anchor" href="#rtos-蓝牙" aria-hidden="true">#</a> RTOS 蓝牙</h1><p>本文档主要介绍 FreeRTOS 平台上 Bluetooth 开发，主要包括蓝牙配置介绍、蓝牙 API 接口介绍以及 demo 的使用。</p><h2 id="蓝牙框架介绍" tabindex="-1"><a class="header-anchor" href="#蓝牙框架介绍" aria-hidden="true">#</a> 蓝牙框架介绍</h2><p>蓝牙框架如下图所示，从上往下可以划分为应用、中间件、适配层、驱动层，固件层，R128 芯片内置蓝牙模块，支持 BR/EDR、BLE 双模。在软件实现上，蓝牙 controller 运行在 ARM m33 CPU 上，蓝牙 HOST 运行在 RV C906 CPU 上。其中蓝牙 HOST 包含 bluedroid 和 zephyr 两个协议栈，bluedroid 协议栈提供 BR/EDR 功能支持，例如 A2DP Sink、A2DP Source、AVRCP、HFP HF、SPP 等 Profile，zephyr 协议栈提供 BLE 相关的功能支持，例如 GATT Client、GATT Server、Mesh 等。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter9/image1.png" alt=""></p><h3 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h3><p>用户所开发的蓝牙应用，一般推荐使用中间件 btmanager API 进行应用开发。</p><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><p>中间件指 btmanager 软件，它向上提为应用提供 API，向下对接协议栈，屏蔽了协议栈使用细节，降低蓝牙应用开发门槛。本文档将会重点介绍如何使 btmanager 进行蓝牙应用开发</p><p>代码路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos‑components/aw/wireless/btmanager/src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="协议栈" tabindex="-1"><a class="header-anchor" href="#协议栈" aria-hidden="true">#</a> 协议栈</h3><p>HOST 使用双栈方式支持 BR/EDR、BLE 蓝牙功能。BR/EDR 使用 Bluedroid 协议栈，BLE 使用 zephyr 协议栈。</p><p>bluedroid 协议栈路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos‑components/thirdparty/bluetooth/bluedroid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>zephyr 协议栈路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos‑components/thirdparty/bluetooth/zephyr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="适配层" tabindex="-1"><a class="header-anchor" href="#适配层" aria-hidden="true">#</a> 适配层</h3><p>适配层主要有两个作用：</p><ul><li>对接不同协议栈</li><li>对接驱动层</li></ul><p>代码路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos/components/aw/bluetooth/xradio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="适配层对接不同协议栈" tabindex="-1"><a class="header-anchor" href="#适配层对接不同协议栈" aria-hidden="true">#</a> 适配层对接不同协议栈</h4><p>适配层提供 bluedroid 和 zephyr 的 adapter，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── bluedroid
│   └── bt_bluedroid_adapter.c
├── Makefile
└── zephyr
    └── bt_zephyr_adapter.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供的接口如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bt_zephyr_adapter_register</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">bt_zephyr_adapter_unregister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">bt_bluedroid_adapter_register</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">bt_bluedroid_adapter_unregister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 adapter 主要填充实现 bt_hci_driver 接口，例如 hci 接口初始化、数据发送功能等。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">bt_hci_driver</span> drv <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bus <span class="token operator">=</span> BT_HCI_DRIVER_BUS_VIRTUAL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>open <span class="token operator">=</span> virtual_hci_open<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_DEINIT<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>close <span class="token operator">=</span> virtual_hci_close<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">.</span>send <span class="token operator">=</span> virtual_hci_h2c<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，在 <code>hci_open</code> 的时候，会注册数据接收回调，以 zephyr adater 为例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">bt_hc_callbacks_t</span> zephyr_hc_callbacks <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>data_ind <span class="token operator">=</span> zephyr_data_ind<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">virtual_hci_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bt_lib_if <span class="token operator">=</span> <span class="token function">bt_lib_get_interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt_lib_if <span class="token operator">&amp;&amp;</span> bt_lib_if‑<span class="token operator">&gt;</span>hci_ops <span class="token operator">&amp;&amp;</span> bt_lib_if‑<span class="token operator">&gt;</span>hci_ops‑<span class="token operator">&gt;</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bt_zephyr_id <span class="token operator">=</span> bt_lib_if‑<span class="token operator">&gt;</span>hci_ops‑<span class="token operator">&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>BT_FEATURES_BLE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>zephyr_hc_callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bt_zephyr_id <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 controller 上报数据，就会通过 callback 调用到 zephyr_data_ind，把数据传递给协议栈。</p><h4 id="适配层对接驱动层" tabindex="-1"><a class="header-anchor" href="#适配层对接驱动层" aria-hidden="true">#</a> 适配层对接驱动层</h4><p>通过适配层的接口可以直接对 controller 使能：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bt_ctrl_enable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">bt_ctrl_disable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上接口内部是通过 bt_lib_get_interface 获取到驱动层提供的接口完成 controller 初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bt_lib_interface <span class="token operator">=</span> <span class="token function">bt_lib_get_interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bt_lib_interface‑<span class="token operator">&gt;</span>init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bt_lib_interface‑<span class="token operator">&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">BT_CTRL_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;BT LIB Interface not exist!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="驱动层" tabindex="-1"><a class="header-anchor" href="#驱动层" aria-hidden="true">#</a> 驱动层</h3><p>驱动层为适配层提供接口，完成蓝牙硬件相关的初始化。</p><p>代码路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos/drivers/drv/bluetooth/xradio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── driver
│   ├── common
│   ├── controller
│   ├── interface
│   ├── Kconfig
│   └── Makefile
├── hci_distribute
│   └── hci_distribute.c
├── include
│   ├── driver
│   ├── hci_distribute
│   └── lib
├── Kconfig
├── lib
│   └── bt_lib.c
└── Makefile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 R128 内置蓝牙，所以 HCI 使用 VHCI，而不是 UART 等物理接口。</p><p>为适配层提供接口，适配层可以通过 bt_lib_get_interface 获取到控制驱动的 btLibInterface。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">bt_lib_interface_t</span> btLibInterface <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>init <span class="token operator">=</span> bt_lib_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>deinit <span class="token operator">=</span> bt_lib_deinit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>hci_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>btHCLibInterface<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>hci_ctrl_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>btHCLibCtrlInterface<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 bt_lib_init 可以完成 controller 初始化。btHCLibInterface 则是对 HCI 接口操作：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">bt_hc_interface_t</span> btHCLibInterface <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open <span class="token operator">=</span> hci_open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write <span class="token operator">=</span> hci_write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read <span class="token operator">=</span> hci_read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close <span class="token operator">=</span> hci_close<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hci_open、hci_write 等在 VHCI 中实现。</p><h3 id="firmware" tabindex="-1"><a class="header-anchor" href="#firmware" aria-hidden="true">#</a> firmware</h3><p>蓝牙固件是 libxrbtc.a 文件，路径如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos/drivers/drv/bluetooth/driver/controller/xradio/sun20iw2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>M33 系统编译时会把 libxrbtc.a 编译上。</p><h2 id="蓝牙配置说明" tabindex="-1"><a class="header-anchor" href="#蓝牙配置说明" aria-hidden="true">#</a> 蓝牙配置说明</h2><p>R128 芯片内置蓝牙，硬件无需外接蓝牙模组，蓝牙软件分别运行在两个核上：</p><ul><li>M33 核：蓝牙 Controller 的代码</li><li>C906 核：蓝牙 Host 协议栈与应用代码</li></ul><p>因此配置蓝牙功能分两部分说明，一般默认已经配置蓝牙，若功能异常，请参考说明检查配置。</p><h3 id="m33-核" tabindex="-1"><a class="header-anchor" href="#m33-核" aria-hidden="true">#</a> M33 核</h3><h4 id="driver" tabindex="-1"><a class="header-anchor" href="#driver" aria-hidden="true">#</a> Driver</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ‑‑‑&gt;
    other drivers ‑‑‑&gt;
        bluetooth drivers ‑‑‑&gt;
        [*] BLUETOOTH xradio driver
        [*] Enable Blutooth Drivers Lib
            Bluetooth Driver Controller (Xradio BT Controller) ‑‑‑&gt;
            xradio bt controller ‑‑‑&gt;
            Bluetooth Driver Interface (Virtual HCI) ‑‑‑&gt;
        [ ] Enable Blutooth Drivers HCI Log Parse
            Distribution method (Distribute Corresponding) ‑‑‑&gt;
        [ ] corresponding mode debug log
        (2) Blutooth Drivers Lib Log Level
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="amp" tabindex="-1"><a class="header-anchor" href="#amp" aria-hidden="true">#</a> AMP</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        AMP Components Support ‑‑‑&gt;
            [*] AMP BT Support
                [*] AMP Bluetooth Stub Functions
                [*] AMP Bluetooth Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c906-核" tabindex="-1"><a class="header-anchor" href="#c906-核" aria-hidden="true">#</a> C906 核</h3><h4 id="driver-1" tabindex="-1"><a class="header-anchor" href="#driver-1" aria-hidden="true">#</a> Driver</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ‑‑‑&gt;
    other drivers ‑‑‑&gt;
        bluetooth drivers ‑‑‑&gt;
            [*] BLUETOOTH xradio driver
            [*] Enable Blutooth Drivers Lib
                Bluetooth Driver Controller (Xradio BT Controller) ‑‑‑&gt;
                xradio bt controller ‑‑‑&gt;
                Bluetooth Driver Interface (Virtual HCI) ‑‑‑&gt;
            [*] Enable Blutooth Drivers HCI Log Parse
            [ ] Enable Blutooth Drivers Log hcidump
            [*] Enable Blutooth Drivers Log btsnoop
            (512) The extra thread stack size of using FileSystem
                Distribution method (Distribute Corresponding) ‑‑‑&gt;
            [ ] corresponding mode debug log
            (1) Blutooth Drivers Lib Log Level
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="amp-1" tabindex="-1"><a class="header-anchor" href="#amp-1" aria-hidden="true">#</a> AMP</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        AMP Components Support ‑‑‑&gt;
            [*] AMP BT Support
                [*] AMP Bluetooth Stub Functions
                [*] AMP Bluetooth Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="协议栈-1" tabindex="-1"><a class="header-anchor" href="#协议栈-1" aria-hidden="true">#</a> 协议栈</h4><p>BLE 使用 Zephyr 协议栈，BR/EDR 使用 Bluedroid 协议栈；</p><h5 id="zephyr" tabindex="-1"><a class="header-anchor" href="#zephyr" aria-hidden="true">#</a> ZEPHYR</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    thirdparty components ‑‑‑&gt;
        [*] bluetooth ‑‑‑&gt;
            [*] Zephyr ‑‑‑&gt;
                [*] Use iterable section instead with XRadio implement
                Max compiled‑in log level for bt (Info) ‑‑‑&gt;
                Bluetooth Stack Selection (HCI‑based) ‑‑‑&gt;
                [ ] RAW HCI access
                [*] Peripheral Role support
                [*] Central Role support
                [ ] Extended Advertising and Scanning support [EXPERIMENTAL]
                (5) Maximum number of simultaneous connections
                [ ] Controller to Host ACL flow control support
                [*] Enable fetching of remote version
                [*] PHY Update
                [*] Data Length Update
                [*] BLE Deinit
                [ ] BLE Global Variable Memory Dynamic Allocation
                [*] Custom Bluetooth assert implementation
                [*] Print out an assert string when using BT_ASSERT
                [ ] Use k_panic() instead of k_oops()
                Bluetooth debug type (No debug log) ‑‑‑&gt;
                Networking ‑‑‑&gt;
                Debugging Options ‑‑‑&gt;
                [*] Logging ‑‑‑&gt;
                [*] Enable settings subsystem with non‑volatile storage ‑‑‑&gt;
                Work Queue Options ‑‑‑&gt;
                [*] Store kernel timeouts in 64 bit precision
                *** Host Stack Configuration ***
                (2) Number of HCI command buffers
                (20) Number of HCI RX buffers
                (88) Maximum supported HCI RX buffer length
                (20) Number of discardable event buffers
                (88) Size of discardable event buffers
                (1024) HCI ECC thread stack size
                (2200) Size of the receiving thread stack
                [*] Load CCC values from settings when peer connects
                [ ] Store CCC value immediately after it has been written
                [*] Enable whitelist support
                (3) Maximum number of pending TX buffers with a callback
                [*] User control of PHY Update Procedure
                [ ] Auto‑initiate PHY Update Procedure
                [*] User control of Data Length Update Procedure
                [ ] Auto‑initiate Data Length Update procedure
                [*] Enable application access to remote information
                [*] Enable remote version information
                [*] Security Manager Protocol support
                [*] Privacy Feature
                (900) Resolvable Private Address timeout
                [*] Data signing support
                [*] Accept or reject pairing initiative
                [ ] Disable legacy pairing
                [ ] Secure Connections Only Mode
                [ ] Force Out Of Band Legacy pairing
                [*] Allow unauthenticated pairing for paired device
                [ ] Forbid usage of insecure legacy pairing methods
                [*] Allow unauthenticated pairing for paired device
                [ ] Use a fixed passkey for pairing
                [ ] Enable Security Manager Debug Mode
                [*] Bondable Mode
                [ ] Always require bonding
                [ ] Store Debug Mode bonds
                [*] Enforce MITM protection
                [*] Overwrite oldest keys with new ones if key storage is full
                [ ] Store aging counter every time a successful paring occurs
                L2CAP Options ‑‑‑&gt;
                ATT and GATT Options ‑‑‑&gt;
                (5) Maximum number of paired devices
                (3) Timeout for pending LE Create Connection command in seconds
                (5000) Peripheral connection parameter update timeout in milliseconds
                (2048) Scan interval used for background scanning in 0.625 ms units
                (18) Scan window used for background scanning in 0.625 ms units
                [*] Allow to set Bluetooth device name on runtime
                (28) Maximum size in bytes for device name
                (Xradio) Bluetooth device name
                (0) Bluetooth device appearance
                (2) Maximum number of local identities
                [ ] Enable Direction Finding support [EXPERIMENTAL]
                ‑*‑ Enable ECDH key generation support
                [*] Emulate ECDH in the Host using TinyCrypt library
                ‑*‑ Enable host side AES‑CCM module
                [ ] Bluetooth Testing
                [ ] User Vendor‑Specific event handling
                (0x05F1) Company Id
                [*] Bluetooth Mesh support ‑‑‑&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="bluedroid" tabindex="-1"><a class="header-anchor" href="#bluedroid" aria-hidden="true">#</a> BLUEDROID</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    thirdparty components ‑‑‑&gt;
        [*] bluetooth ‑‑‑&gt;
            [*] Bluedroid ‑‑‑&gt;
                [*] Bluedroid enable
                [*] Bluedroid ‑ Dual‑mode
                [*] Bluedroid Host
                Bluedroid‑BT Options ‑‑‑&gt;
                (4096) Bluetooth event (callback to application) task stack size
                The cpu core which Bluedroid run (Core 0 (PRO CPU)) ‑‑‑&gt;
                (4096) Bluetooth Bluedroid Host Stack task stack size
                [ ] Bluedroid memory debug
                [*] Classic Bluetooth
                [*] A2DP
                [*] SPP
                [*] Hands Free/Handset Profile
                    Hands‑free Profile Role configuration (Hands Free Unit) ‑‑‑&gt;
                    audio(SCO) data path (HCI) ‑‑‑&gt;
                [*] Wide Band Speech
                [ ] Classic BT HID Host
                [*] Secure Simple Pairing
                [ ] Bluetooth Low Energy
                [ ] Disable BT debug logs (minimize bin size)
                BT DEBUG LOG LEVEL ‑‑‑&gt;
                (4) BT/BLE MAX ACL CONNECTIONS(1~7)
                [ ] BT/BLE will first malloc the memory from the PSRAM
                [*] Use dynamic memory allocation in BT/BLE stack
                [*] BLE queue congestion check
                (30) Timeout of BLE connection establishment
                (248) Maximum size in bytes for bredr device name
            XRADIO_COMMON ‑‑‑&gt;
                [*] HCI LAYER RX support
                [*] hcilog enable
                [*] A2dp source process feature support
                (1) hcidmp buffer
                [*] bluedroid use settings
                (8) bluedroid max store value
                (1536) bluedroid max file size
                (2048) bluedroid file defaule length
                (bt_cfg_key) bluedroid store key name
                (2) bluedroid log defaule level
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="btmanager" tabindex="-1"><a class="header-anchor" href="#btmanager" aria-hidden="true">#</a> btmanager</h4><p>btmanager 配置如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        wireless ‑‑‑&gt;
        [*] btmanager ‑‑‑&gt;
            [*] btmg core
            [ ] Enable AudioTrack send audio data
            [*] btmg cmd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 “Enable AudioTrack send audio data” 默认不打开，如果需要使用 AudioTrack 接管 A2DP Source 蓝牙音乐播放需要选上。</p><p>选上之后，通过 btcli demo 将无法测试 A2DP Source 蓝牙，请参考 as_test demo 使用。</p><h4 id="tools" tabindex="-1"><a class="header-anchor" href="#tools" aria-hidden="true">#</a> Tools</h4><p>常用的蓝牙工具有 btetf 和 btsnoop</p><h5 id="btetf" tabindex="-1"><a class="header-anchor" href="#btetf" aria-hidden="true">#</a> BTETF</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        aw bluetooth ‑‑‑&gt;
            [*] etf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="btsnoop" tabindex="-1"><a class="header-anchor" href="#btsnoop" aria-hidden="true">#</a> BTSNOOP</h5><p>用于抓 hci log，默认打开</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ‑‑‑&gt;
    other drivers ‑‑‑&gt;
        bluetooth drivers ‑‑‑&gt;
            [*] Enable Blutooth Drivers Log btsnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="br-edr-开发介绍" tabindex="-1"><a class="header-anchor" href="#br-edr-开发介绍" aria-hidden="true">#</a> BR/EDR 开发介绍</h2><h3 id="基础-api" tabindex="-1"><a class="header-anchor" href="#基础-api" aria-hidden="true">#</a> 基础 API</h3><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_core_init</td><td style="text-align:left;">btmanager 内部资源初始化接口，进行内存资源申请</td></tr><tr><td style="text-align:left;">btmg_core_deinit</td><td style="text-align:left;">btmanager 内部资源发始化接口</td></tr><tr><td style="text-align:left;">btmg_set_profile</td><td style="text-align:left;">设置蓝牙 profile 功能，在 btmg_adapter_enable() 之前设置有效，在用户未反初始化退出的情况下该设置一直生效</td></tr><tr><td style="text-align:left;">btmg_set_loglevel</td><td style="text-align:left;">设置 btmanager 内部打印等级，默认打印等级是BTMG_LOG_LEVEL_WARNG</td></tr><tr><td style="text-align:left;">btmg_get_loglevel</td><td style="text-align:left;">获取 btmanager 内部当前使用的打印等级</td></tr><tr><td style="text-align:left;">btmg_set_ex_debug</td><td style="text-align:left;">设置拓展调试标志位，用于打开特殊打印输出</td></tr><tr><td style="text-align:left;">btmg_get_ex_debug</td><td style="text-align:left;">获取当前设置拓展调试标志位的值</td></tr><tr><td style="text-align:left;">btmg_get_error_info</td><td style="text-align:left;">获取错误信息</td></tr><tr><td style="text-align:left;">btmg_adapter_enable</td><td style="text-align:left;">开关蓝牙的作用，会进行 firmware 和蓝牙协议栈等初始化/反初始化</td></tr><tr><td style="text-align:left;">btmg_adapter_get_state</td><td style="text-align:left;">获取蓝牙开关状态</td></tr><tr><td style="text-align:left;">btmg_adapter_get_address</td><td style="text-align:left;">获取本地蓝牙设备地址</td></tr><tr><td style="text-align:left;">btmg_adapter_set_name</td><td style="text-align:left;">设置本地蓝牙设备名称</td></tr><tr><td style="text-align:left;">btmg_adapter_get_name</td><td style="text-align:left;">获取本地蓝牙设备名称</td></tr><tr><td style="text-align:left;">btmg_adapter_set_scanmode</td><td style="text-align:left;">设置本地 BT 设备扫描模式（PSCAN,ISCAN），决定设备是否可连接，可发现</td></tr><tr><td style="text-align:left;">btmg_adapter_set_io_capability</td><td style="text-align:left;">设置本地蓝牙设备的输入、输出能力</td></tr><tr><td style="text-align:left;">btmg_adapter_start_scan</td><td style="text-align:left;">开始扫描周围的蓝牙设备</td></tr><tr><td style="text-align:left;">btmg_adapter_stop_scan</td><td style="text-align:left;">停止 BT 扫描</td></tr><tr><td style="text-align:left;">btmg_adapter_is_scanning</td><td style="text-align:left;">获得当前 BT 扫描状态</td></tr><tr><td style="text-align:left;">btmg_adapter_pair_device</td><td style="text-align:left;">发起蓝牙配对</td></tr><tr><td style="text-align:left;">btmg_adapter_unpair_device</td><td style="text-align:left;">取消蓝牙配对</td></tr><tr><td style="text-align:left;">btmg_get_paired_device_num</td><td style="text-align:left;">获取已配对设备数量</td></tr><tr><td style="text-align:left;">btmg_get_paired_devices</td><td style="text-align:left;">获取所有已配对设备信息</td></tr><tr><td style="text-align:left;">btmg_set_page_timeout</td><td style="text-align:left;">N/A</td></tr><tr><td style="text-align:left;">btmg_device_is_connected</td><td style="text-align:left;">判断对端设备是否跟本地设备存在连接关系</td></tr><tr><td style="text-align:left;">btmg_device_get_name</td><td style="text-align:left;">获取指定蓝牙设备的名称</td></tr><tr><td style="text-align:left;">btmg_device_remove</td><td style="text-align:left;">N/A</td></tr><tr><td style="text-align:left;">btmg_device_pincode_reply</td><td style="text-align:left;">回复 pincode</td></tr><tr><td style="text-align:left;">btmg_device_passkey_reply</td><td style="text-align:left;">回复 passkey</td></tr><tr><td style="text-align:left;">btmg_device_passkey_confirm</td><td style="text-align:left;">确认 passkey</td></tr><tr><td style="text-align:left;">btmg_device_pairing_confirm</td><td style="text-align:left;">确认配对</td></tr></tbody></table><h3 id="a2dp-sink-开发-api" tabindex="-1"><a class="header-anchor" href="#a2dp-sink-开发-api" aria-hidden="true">#</a> A2DP Sink 开发 API</h3><p>A2DP Sink 设备一般作为音箱类产品，会被手机等 A2DP Source 设备连接并推送音频流播放音乐</p><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_a2dp_sink_connect</td><td style="text-align:left;">连接指定 A2DP Source 设备，可用于回连功能开发</td></tr><tr><td style="text-align:left;">btmg_a2dp_sink_disconnect</td><td style="text-align:left;">主动断开与指定设备的连接</td></tr></tbody></table><h4 id="a2dp-sink-api-调用流程" tabindex="-1"><a class="header-anchor" href="#a2dp-sink-api-调用流程" aria-hidden="true">#</a> A2DP Sink API 调用流程</h4><p>关于 A2DP Sink 功能的实现，已编写了使用示例，执行 <code>btcli init ‑p a2dp‑sink</code> 即可运行，供用户使用参考，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;btmg_dev_list.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;bt_manager.h&quot;</span></span>

<span class="token class-name">btmg_callback_t</span> btmg_cbs<span class="token punctuation">;</span>
<span class="token class-name">dev_list_t</span> <span class="token operator">*</span>discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_A2DP_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                                  <span class="token class-name">btmg_a2dp_source_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_a2dp_source_audio_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                                <span class="token class-name">btmg_a2dp_sink_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_a2dp_sink_audio_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_play_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_avrcp_play_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_track_changed_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_track_info_t</span> <span class="token operator">*</span>track_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_play_position_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> song_len<span class="token punctuation">,</span> <span class="token keyword">int</span> song_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_audio_volume_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_tg_play_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_avrcp_play_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_SPP_ENABLED</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_sppc_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_sppc_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_spps_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_spps_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_CLIENT_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_event_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_hf_event_t</span> event<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_hfp_hf_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_AG_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_event_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_ag_event_t</span> event<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_hfp_ag_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_audio_incoming_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token class-name">uint32_t</span> <span class="token function">btcli_hfp_ag_audio_outgoing_cb</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>p_buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_ble_scan_cb</span><span class="token punctuation">(</span><span class="token class-name">le_scan_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_ble_connection_cb</span><span class="token punctuation">(</span><span class="token class-name">le_connection_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_dis_att_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_dis_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_notify_indicate_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_notify_indicate_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_get_db_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_get_db_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_char_read_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_read_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_char_write_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_write_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_ccc_cfg_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_ccc_cfg_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_read_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_read_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_write_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_write_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_IDLE</span>            <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PIN_CODE</span>        <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_ENTER_PASSKEY</span>   <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PASSKEY_CONFIRM</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PAIRING_CONFIRM</span> <span class="token expression"><span class="token number">4</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> flag<span class="token punctuation">;</span> <span class="token comment">//0:none 1:pin code 2:enter passkey 3:passkey_confirm 4: pairing confirm</span>
<span class="token punctuation">}</span> <span class="token class-name">pair_req_t</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">btmg_gatt_db_t</span> <span class="token operator">*</span>db<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_gatt_register_service</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>db <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;gatt already registered\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_uuid_t</span> uuid<span class="token punctuation">;</span>
    <span class="token class-name">btmg_gatt_properties_t</span> prop<span class="token punctuation">;</span>
    <span class="token class-name">btmg_gatt_permission_t</span> perm <span class="token operator">=</span> BTMG_GATT_PERM_READ <span class="token operator">|</span> BTMG_GATT_PERM_WRITE<span class="token punctuation">;</span>

    <span class="token comment">/* service1 start, uuid=0xABCD */</span>
    db <span class="token operator">=</span> <span class="token function">btmg_gatt_attr_create</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//CHAR+2 other+1</span>
    uuid<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_UUID_16<span class="token punctuation">;</span>
    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xABCD</span><span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_primary_service</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xfff2</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xfff3</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE <span class="token operator">|</span> BTMG_GATT_CHRC_NOTIFY <span class="token operator">|</span> BTMG_GATT_CHRC_INDICATE<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>
    <span class="token function">btmg_gatt_attr_ccc</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// +1</span>
    <span class="token comment">/* service1 end*/</span>
    <span class="token comment">/* service2 start, uuid=0x7788 */</span>
    uuid<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_UUID_16<span class="token punctuation">;</span>
    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x7788</span><span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_primary_service</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x1122</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x3344</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE <span class="token operator">|</span> BTMG_GATT_CHRC_NOTIFY<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>
    <span class="token function">btmg_gatt_attr_ccc</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// +1</span>
    <span class="token comment">/* service2 end*/</span>

    <span class="token function">btmg_gatt_register_service</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_gatt_unregister_service</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>db <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;gatt already unregistered\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_gatt_unregister_service</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_set_adv_data</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> uuid <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ble_name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;aw-btcli-ble&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">btmg_adv_scan_rsp_data_t</span> adv_data<span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span> <span class="token comment">/* flag len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span> <span class="token comment">/* type for flag */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">;</span> <span class="token comment">//0x05</span>

    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ble_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* name len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span> <span class="token comment">/* type for local name */</span>
    <span class="token keyword">int</span> name_len<span class="token punctuation">;</span>
    name_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ble_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ble_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span> <span class="token comment">/* uuid len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span> <span class="token comment">/* type for complete list of 16-bit uuid */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uuid <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uuid <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data_len <span class="token operator">=</span> index<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">btmg_le_set_adv_scan_rsp_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adv_data<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_advertise_on</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">btmg_le_adv_param_t</span> adv_param<span class="token punctuation">;</span>

    adv_param<span class="token punctuation">.</span>interval_min <span class="token operator">=</span> <span class="token number">0x0020</span><span class="token punctuation">;</span>
    adv_param<span class="token punctuation">.</span>interval_max <span class="token operator">=</span> <span class="token number">0x01E0</span><span class="token punctuation">;</span>
    adv_param<span class="token punctuation">.</span>adv_type <span class="token operator">=</span> BTMG_LE_ADV_IND<span class="token punctuation">;</span>

    <span class="token function">btmg_le_set_adv_param</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adv_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ble_set_adv_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">pair_req_t</span> pair_req <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">btcli_scan_status_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_scan_state_t</span> status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_SCAN_STARTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;start scanning\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_SCAN_STOPPED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;stop scanning\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_scan_dev_add_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_device_t</span> <span class="token operator">*</span>device<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;name:[%s]\\t\\taddress:[%s]\\t\\tclass:[%d]\\t\\trssi:[%d]\\n&quot;</span><span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>
            device<span class="token operator">-&gt;</span>cod<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>rssi<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dev_node <span class="token operator">=</span> <span class="token function">btmg_dev_list_find_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dev_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_dev_list_add_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_adapter_name_cb</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;btcli get adapter name:%s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_name_cb</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;btcli get remote device name:%s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_bonded_device_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_bond_state_t</span> state<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_discovered_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;bonded device state:%d, addr:%s\\n&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dev_discovered_node <span class="token operator">=</span> <span class="token function">btmg_dev_list_find_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_BOND_STATE_BONDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev_discovered_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_dev_list_remove_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Pairing state for %s is BONDED \\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_BOND_STATE_BOND_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Pairing state for %s is BOND_FAILED \\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_pindcoe_request_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,pindcoe request, Please enter pincode\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PIN_CODE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_passkey_request_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,passkey_request, Please enter passkey!\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_ENTER_PASSKEY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_passkey_confirm_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;please confirm the passkey(%d) sent by the %s device!\\n&quot;</span><span class="token punctuation">,</span> passkey<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>passkey <span class="token operator">=</span> passkey<span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PASSKEY_CONFIRM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_pairing_confirm_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,pairing_confirm,please compare the passkey numeric value: %d\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>passkey <span class="token operator">=</span> passkey<span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PAIRING_CONFIRM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_adapter_status_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_adapter_state_t</span> status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> bt_addr<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> bt_name_buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> bt_name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is off\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_ON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is on\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_get_address</span><span class="token punctuation">(</span>bt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bt_addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">snprintf</span><span class="token punctuation">(</span>bt_name_buf<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;aw-btcli-%s-&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bt_addr <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>bt_name<span class="token punctuation">,</span> <span class="token string">&quot;%s-%s&quot;</span><span class="token punctuation">,</span> bt_name_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bt_addr <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span>bt_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span><span class="token string">&quot;aw-btcli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">btmg_adapter_set_io_capability</span><span class="token punctuation">(</span>BTMG_IO_CAP_NOINPUTNOOUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_set_scanmode</span><span class="token punctuation">(</span>BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_TURNING_ON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is turnning on\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_TURNING_OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is turnning off\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli pincode &lt;0000~9999&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_pincode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PIN_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter pin code now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_pincode_reply</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>BT_SSP_INCLUDED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span>
<span class="token comment">/* btcli passkey &lt;000000~999999&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_passkey</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_ENTER_PASSKEY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter passkey now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">uint32_t</span> passkey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    passkey <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>passkey <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Passkey should be between 0-999999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_passkey_reply</span><span class="token punctuation">(</span>passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli passkey_confirm */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_passkey_confirm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PASSKEY_CONFIRM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter this command now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_passkey_confirm</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli pairing_confirm */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_pairing_confirm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PAIRING_CONFIRM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to need to enter this command now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_pairing_confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* btcli scan_list */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_scan_list</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;scan list is empty\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    dev_node <span class="token operator">=</span> discovered_devices<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>dev_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;addr: %s, name: %s\\n&quot;</span><span class="token punctuation">,</span> dev_node<span class="token operator">-&gt;</span>dev_addr<span class="token punctuation">,</span> dev_node<span class="token operator">-&gt;</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dev_node <span class="token operator">=</span> dev_node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli paired_list */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_paired_list</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> device_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token function">btmg_get_paired_device_num</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>device_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;no device is bonded!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_paired_device_t</span> paired_list<span class="token punctuation">[</span>device_num<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_get_paired_devices</span><span class="token punctuation">(</span>device_num<span class="token punctuation">,</span> paired_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;get paired device_list:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> device_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;device[%s]\\n&quot;</span><span class="token punctuation">,</span> paired_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli scan_mode &lt;0~2&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_scanmode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mode<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mode <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_set_scanmode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli scan &lt;on/off&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_scan</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_dev_list_free</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">)</span><span class="token punctuation">;</span>
            discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        discovered_devices <span class="token operator">=</span> <span class="token function">btmg_dev_list_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_start_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_adapter_stop_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli io_cap &lt;0~4&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_io_cap</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> io_cap<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    io_cap <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_set_io_capability</span><span class="token punctuation">(</span>io_cap<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_dev_name */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_device_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_get_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_name */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_adapter_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">btmg_adapter_get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli set_name &lt;name&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_adapter_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_mac */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_adapter_mac</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> mac<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_get_address</span><span class="token punctuation">(</span>mac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;adapter mac is:%s&quot;</span><span class="token punctuation">,</span> mac<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool btcli_init_state <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> profile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli init or btcli init -p a2dp-source -d 4 */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_init</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">btmg_log_level_t</span> debug<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-h&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
                   <span class="token string">&quot;  [OPTION]...\\n&quot;</span>
                   <span class="token string">&quot;\\nOptions:\\n&quot;</span>
                   <span class="token string">&quot;  -h, --help\\t\\tprint this help and exit\\n&quot;</span>
                   <span class="token string">&quot;  -d, --debug\\t open debug :-d [0~5]\\n&quot;</span>
                   <span class="token string">&quot;  -p, --profile=NAME\\tenable bluetooth profile\\n&quot;</span>
                   <span class="token string">&quot;  [supported profile name]:\\n&quot;</span>
                   <span class="token string">&quot;  - a2dp-source\\tAdvanced Audio Source\\n&quot;</span>
                   <span class="token string">&quot;  - a2dp-sink\\tAdvanced Audio Sink\\n&quot;</span>
                   <span class="token string">&quot;  - hfp-hf\\tHands-Free\\n&quot;</span>
                   <span class="token string">&quot;  - spp-server\\tSerial Port Profile-Server role\\n&quot;</span>
                   <span class="token string">&quot;  - spp-client\\tSerial Port Profile-Client role\\n&quot;</span>
                   <span class="token string">&quot;  - gatt-server\\tble gatt server\\n&quot;</span>
                   <span class="token string">&quot;  - gatt-client\\tble gatt client\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-p&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> c<span class="token punctuation">;</span>
                <span class="token keyword">struct</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;a2dp-sink&quot;</span><span class="token punctuation">,</span>      BTMG_A2DP_SINK <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;a2dp-source&quot;</span><span class="token punctuation">,</span>    BTMG_A2DP_SOURCE <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;hfp-hf&quot;</span><span class="token punctuation">,</span>         BTMG_HFP_HF<span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;hfp-ag&quot;</span><span class="token punctuation">,</span>         BTMG_HFP_AG<span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;spp-server&quot;</span><span class="token punctuation">,</span>     BTMG_SPP_SERVER <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;spp-client&quot;</span><span class="token punctuation">,</span>     BTMG_SPP_CLIENT <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;gatt-server&quot;</span><span class="token punctuation">,</span>    BTMG_GATT_SERVER <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;gatt-client&quot;</span><span class="token punctuation">,</span>    BTMG_GATT_CLIENT<span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        profile <span class="token operator">|=</span> map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid BT profile name: %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid parameter, please specify a profile\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-d&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                debug <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">btmg_log_level_t</span><span class="token punctuation">)</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;debug loglevel :%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">btmg_set_loglevel</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid parameter, please specify a level\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>btcli_init_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;BT is already INIT!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;use default profile\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        profile <span class="token operator">|=</span> BTMG_A2DP_SINK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>state_cb <span class="token operator">=</span> btcli_adapter_status_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>scan_status_cb <span class="token operator">=</span> btcli_scan_status_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>device_add_cb <span class="token operator">=</span> btcli_scan_dev_add_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>bonded_device_cb <span class="token operator">=</span> btcli_bonded_device_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>get_name_cb <span class="token operator">=</span> btcli_adapter_name_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>pindcoe_request_cb <span class="token operator">=</span> btcli_device_pindcoe_request_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>passkey_request_cb <span class="token operator">=</span> btcli_device_passkey_request_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>passkey_confirm_cb <span class="token operator">=</span> btcli_device_passkey_confirm_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>pairing_confirm_cb <span class="token operator">=</span> btcli_device_pairing_confirm_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_A2DP_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_A2DP_SINK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_sink_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_a2dp_sink_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_sink_cb<span class="token punctuation">.</span>audio_state_cb <span class="token operator">=</span> btcli_a2dp_sink_audio_state_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_A2DP_SOURCE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_source_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_a2dp_source_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_source_cb<span class="token punctuation">.</span>audio_state_cb <span class="token operator">=</span> btcli_a2dp_source_audio_state_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_play_state_cb <span class="token operator">=</span> btcli_avrcp_ct_play_state_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_play_position_cb <span class="token operator">=</span> btcli_avrcp_ct_play_position_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_track_changed_cb <span class="token operator">=</span> btcli_avrcp_ct_track_changed_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_tg_play_state_cb <span class="token operator">=</span> btcli_avrcp_tg_play_state_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_audio_volume_cb <span class="token operator">=</span> btcli_avrcp_audio_volume_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_SPP_ENABLED</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_SPP_CLIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_sppc_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_sppc_conn_status_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_sppc_cb<span class="token punctuation">.</span>recvdata_cb <span class="token operator">=</span> btcli_sppc_recvdata_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_SPP_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_spps_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_spps_conn_status_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_spps_cb<span class="token punctuation">.</span>recvdata_cb <span class="token operator">=</span> btcli_spps_recvdata_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_CLIENT_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_HFP_HF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_hf_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_hfp_hf_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_hf_cb<span class="token punctuation">.</span>event_cb <span class="token operator">=</span> btcli_hfp_hf_event_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_AG_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_HFP_AG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_hfp_ag_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>event_cb <span class="token operator">=</span> btcli_hfp_ag_event_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>audio_incoming_cb <span class="token operator">=</span> btcli_hfp_ag_audio_incoming_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>audio_outgoing_cb <span class="token operator">=</span> btcli_hfp_ag_audio_outgoing_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>conn_cb <span class="token operator">=</span> btcli_ble_connection_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>get_db_cb <span class="token operator">=</span> btcli_gatts_get_db_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>char_read_req_cb <span class="token operator">=</span> btcli_gatts_char_read_req_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>char_write_req_cb <span class="token operator">=</span> btcli_gatts_char_write_req_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>ccc_cfg_cb <span class="token operator">=</span> btcli_gatts_ccc_cfg_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_CLIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>le_scan_cb <span class="token operator">=</span> btcli_ble_scan_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>conn_cb <span class="token operator">=</span> btcli_ble_connection_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>dis_att_cb <span class="token operator">=</span> btcli_gattc_dis_att_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>read_cb <span class="token operator">=</span> btcli_gattc_read_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>write_cb <span class="token operator">=</span> btcli_gattc_write_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>notify_indicate_cb <span class="token operator">=</span> btcli_gattc_notify_indicate_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_core_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_register_callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btmg_cbs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_set_profile</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    btcli_init_state <span class="token operator">=</span> true<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ble_gatt_register_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ble_advertise_on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_deinit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ble_gatt_unregister_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_gatt_attr_destory</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>
        db  <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_core_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_unregister_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btcli_init_state <span class="token operator">=</span> false<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_dev_list_free</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">)</span><span class="token punctuation">;</span>
        discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

tatic <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sink_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                         <span class="token class-name">btmg_a2dp_sink_connection_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink disconnected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_set_scanmode</span><span class="token punctuation">(</span>BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_CONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink connecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_DISCONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink disconnecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_a2dp_sink_audio_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_AUDIO_SUSPENDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink audio suspended with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_AUDIO_STOPPED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink audio stopped with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SINK_AUDIO_STARTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP sink audio started with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_snk connect &lt;device mac&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sink_connect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_a2dp_sink_connect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_snk disconnect &lt;device mac&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sink_disconnect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_a2dp_sink_disconnect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> a2dp_sink_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span>    btcli_sink_connect<span class="token punctuation">,</span>    <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> btcli_sink_disconnect<span class="token punctuation">,</span> <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>       btcli_sink_help<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli a2dp_snk help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sink_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>a2dp_sink_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>a2dp_sink_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_a2dp_sink</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> a2dp_sink_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>a2dp_sink_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设置 a2dp sink 相关回调函数；</li><li>调用 btmg_core_init 初始化 btmanager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_A2DP_SINK) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙</li><li>蓝牙使能成功后触发 state_cb，参考 btcli_adapter_status_cb；</li><li>在 state_cb 中调用 btmg_adapter_set_name，设置蓝牙名称；</li><li>在 state_cb 中调用 btmg_adapter_set_io_capability，设置 io_capability 能力；</li><li>在 state_cb 中调用 btmg_adapter_set_scanmode，设置发现模式；</li></ol><h5 id="音乐播放控制" tabindex="-1"><a class="header-anchor" href="#音乐播放控制" aria-hidden="true">#</a> 音乐播放控制</h5><ol><li>蓝牙初始化完成后，手机可以搜索和连接，连接成功的回调是 conn_state_cb，参考btcli_a2dp_sink_connection_state_cb；</li><li>播放状态，歌曲进度，歌曲信息通过 btmg_avrcp_cb 的 avrcp_play_state_cb/avrcp_play_position_cb/avrcp_track_changed_cb 回调获得；</li><li>获取/设置音量，API 调用参考 btcli_get_absolute_volume/btcli_set_absolute_volume;</li><li>主动断开连接调用 btmg_a2dp_sink_disconnect 实现；</li><li>bt_manager 默认没有集成蓝牙回连的功能，用户可以基于 btmg_a2dp_sink_connect 接口进行功能实现；</li><li>音频数据的处理默认在 bt_manager 内部处理播放，用户如果需要直接获取音频数据做音效等处理，打开 CONFIG_A2DP_SINK_AUDIO_CB 宏后，应用可以通过 stream_cb 拿到数据；</li></ol><h3 id="avrcp-开发" tabindex="-1"><a class="header-anchor" href="#avrcp-开发" aria-hidden="true">#</a> AVRCP 开发</h3><p>AVRCP 分为 AVRCP CT 和 AVRCP TG 两个角色，一个设备可以同时拥有该两种角色。</p><p>以蓝牙音箱为例:</p><ul><li>手机连接音箱播放音乐，音箱端可以通过 AVRCP 控制手机上下曲控制等，此时手机作为被控制方，是 AVRCP TG，音箱是控制方，是 AVRCP CT；</li><li>手机和音箱都支持绝对音量，手机端可以通过 AVRCP 设置音箱音量，并通过 RegisterNotification 注册音量变化的通知事件，音箱音量变化后，手机会收到音箱的 RegisterNotification response 通知。这种情况手机作为 AVRCP CT，音箱作为 AVRCP TG；</li></ul><h4 id="avrcp-ct-api" tabindex="-1"><a class="header-anchor" href="#avrcp-ct-api" aria-hidden="true">#</a> AVRCP CT API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_avrc_ct_send_passthrough_cmd</td><td style="text-align:left;">发送命令控制 AVRCP TG</td></tr><tr><td style="text-align:left;">btmg_avrc_set_absolute_volume</td><td style="text-align:left;">发送命令设置 AVRCP TG 的音量</td></tr><tr><td style="text-align:left;">btmg_avrc_get_absolute_volume</td><td style="text-align:left;">发送命令获取音量</td></tr></tbody></table><h4 id="avrcp-tg-api" tabindex="-1"><a class="header-anchor" href="#avrcp-tg-api" aria-hidden="true">#</a> AVRCP TG API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_avrc_set_absolute_volume</td><td style="text-align:left;">此接口同样适用 AVRCP TG，内部设置好本地音量变化后，也会通知 AVRCP CT</td></tr><tr><td style="text-align:left;">btmg_avrc_get_absolute_volume</td><td style="text-align:left;">发送命令获取音量</td></tr></tbody></table><p>AVRCP TG 目前只有 1 个 API，其重点是回调函数，有如下 callback 使用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    bt_avrcp_ct_play_state_cb avrcp_ct_play_state_cb<span class="token punctuation">;</span> <span class="token comment">//ct播放状态</span>
    bt_avrcp_ct_track_changed_cb avrcp_ct_track_changed_cb<span class="token punctuation">;</span> <span class="token comment">//歌曲信息&amp;歌词信息</span>
    bt_avrcp_ct_play_position_cb avrcp_ct_play_position_cb<span class="token punctuation">;</span> <span class="token comment">//播放进度条信息</span>
    bt_avrcp_tg_play_state_cb avrcp_tg_play_state_cb<span class="token punctuation">;</span> <span class="token comment">//tg播放状态</span>
    bt_avrcp_audio_volume_cb avrcp_audio_volume_cb<span class="token punctuation">;</span> <span class="token comment">//音量大小</span>
<span class="token punctuation">}</span> <span class="token class-name">btmg_avrcp_callback_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="a2dp-source-开发" tabindex="-1"><a class="header-anchor" href="#a2dp-source-开发" aria-hidden="true">#</a> A2DP Source 开发</h3><p>A2DP Source 设备一般支持音乐播放功能，例如扫读笔、学习机等产品。此类产品有连接蓝牙耳机/蓝牙音箱等 A2DP Sink 设备需求。</p><h4 id="a2dp-source-api" tabindex="-1"><a class="header-anchor" href="#a2dp-source-api" aria-hidden="true">#</a> A2DP Source API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_a2dp_source_connect</td><td style="text-align:left;">连接指定 A2DP Sink 设备</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_disconnect</td><td style="text-align:left;">断开与指定设备的连接</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_set_audio_param</td><td style="text-align:left;">设置需要播放的音频流的参数：通道数与采样率，以便 btmanager 对音频进行处理</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_send_data</td><td style="text-align:left;">应用层发送音频流数据给 btmanager</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_play_start</td><td style="text-align:left;">开始处理音频数据，建议在btmg_a2dp_source_send_data 之前运行</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_play_stop</td><td style="text-align:left;">停止处理音频数据，参数为 true 时表示立即停止，丢弃缓存中的数据，反之保留</td></tr><tr><td style="text-align:left;">btmg_a2dp_source_is_ready</td><td style="text-align:left;">判断是否已经初始化就绪</td></tr></tbody></table><h4 id="a2dp-source-api-调用流程" tabindex="-1"><a class="header-anchor" href="#a2dp-source-api-调用流程" aria-hidden="true">#</a> A2DP source API 调用流程</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;btmg_dev_list.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;bt_manager.h&quot;</span></span>

<span class="token class-name">btmg_callback_t</span> btmg_cbs<span class="token punctuation">;</span>
<span class="token class-name">dev_list_t</span> <span class="token operator">*</span>discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_A2DP_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                                  <span class="token class-name">btmg_a2dp_source_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_a2dp_source_audio_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                                <span class="token class-name">btmg_a2dp_sink_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_sink_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_a2dp_sink_audio_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_play_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_avrcp_play_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_track_changed_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_track_info_t</span> <span class="token operator">*</span>track_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_ct_play_position_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> song_len<span class="token punctuation">,</span> <span class="token keyword">int</span> song_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_audio_volume_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_avrcp_tg_play_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_avrcp_play_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_SPP_ENABLED</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_sppc_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_sppc_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_spps_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_spps_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_CLIENT_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_event_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_hf_event_t</span> event<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_hfp_hf_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_AG_ENABLE</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_event_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_ag_event_t</span> event<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                             <span class="token class-name">btmg_hfp_ag_connection_state_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_hfp_ag_audio_incoming_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token class-name">uint32_t</span> <span class="token function">btcli_hfp_ag_audio_outgoing_cb</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>p_buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_ble_scan_cb</span><span class="token punctuation">(</span><span class="token class-name">le_scan_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_ble_connection_cb</span><span class="token punctuation">(</span><span class="token class-name">le_connection_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_dis_att_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_dis_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_notify_indicate_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_notify_indicate_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_get_db_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_get_db_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_char_read_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_read_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_char_write_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_write_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gatts_ccc_cfg_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_ccc_cfg_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_read_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_read_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">btcli_gattc_write_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_write_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_IDLE</span>            <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PIN_CODE</span>        <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_ENTER_PASSKEY</span>   <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PASSKEY_CONFIRM</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUTH_PAIRING_CONFIRM</span> <span class="token expression"><span class="token number">4</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> flag<span class="token punctuation">;</span> <span class="token comment">//0:none 1:pin code 2:enter passkey 3:passkey_confirm 4: pairing confirm</span>
<span class="token punctuation">}</span> <span class="token class-name">pair_req_t</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">btmg_gatt_db_t</span> <span class="token operator">*</span>db<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_gatt_register_service</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>db <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;gatt already registered\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_uuid_t</span> uuid<span class="token punctuation">;</span>
    <span class="token class-name">btmg_gatt_properties_t</span> prop<span class="token punctuation">;</span>
    <span class="token class-name">btmg_gatt_permission_t</span> perm <span class="token operator">=</span> BTMG_GATT_PERM_READ <span class="token operator">|</span> BTMG_GATT_PERM_WRITE<span class="token punctuation">;</span>

    <span class="token comment">/* service1 start, uuid=0xABCD */</span>
    db <span class="token operator">=</span> <span class="token function">btmg_gatt_attr_create</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//CHAR+2 other+1</span>
    uuid<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_UUID_16<span class="token punctuation">;</span>
    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xABCD</span><span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_primary_service</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xfff2</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0xfff3</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE <span class="token operator">|</span> BTMG_GATT_CHRC_NOTIFY <span class="token operator">|</span> BTMG_GATT_CHRC_INDICATE<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>
    <span class="token function">btmg_gatt_attr_ccc</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// +1</span>
    <span class="token comment">/* service1 end*/</span>
    <span class="token comment">/* service2 start, uuid=0x7788 */</span>
    uuid<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_UUID_16<span class="token punctuation">;</span>
    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x7788</span><span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_primary_service</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x1122</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>

    uuid<span class="token punctuation">.</span>value<span class="token punctuation">.</span>u16 <span class="token operator">=</span> <span class="token number">0x3344</span><span class="token punctuation">;</span>
    prop <span class="token operator">=</span> BTMG_GATT_CHRC_READ <span class="token operator">|</span> BTMG_GATT_CHRC_WRITE <span class="token operator">|</span> BTMG_GATT_CHRC_NOTIFY<span class="token punctuation">;</span>
    <span class="token function">btmg_gatt_attr_characteristic</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2</span>
    <span class="token function">btmg_gatt_attr_ccc</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// +1</span>
    <span class="token comment">/* service2 end*/</span>

    <span class="token function">btmg_gatt_register_service</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_gatt_unregister_service</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>db <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;gatt already unregistered\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_gatt_unregister_service</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_set_adv_data</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> uuid <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ble_name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;aw-btcli-ble&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">btmg_adv_scan_rsp_data_t</span> adv_data<span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span> <span class="token comment">/* flag len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span> <span class="token comment">/* type for flag */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">;</span> <span class="token comment">//0x05</span>

    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ble_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* name len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span> <span class="token comment">/* type for local name */</span>
    <span class="token keyword">int</span> name_len<span class="token punctuation">;</span>
    name_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ble_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ble_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span> <span class="token comment">/* uuid len */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span> <span class="token comment">/* type for complete list of 16-bit uuid */</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>uuid <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uuid <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    index <span class="token operator">+=</span> adv_data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    adv_data<span class="token punctuation">.</span>data_len <span class="token operator">=</span> index<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">btmg_le_set_adv_scan_rsp_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adv_data<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ble_advertise_on</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">btmg_le_adv_param_t</span> adv_param<span class="token punctuation">;</span>

    adv_param<span class="token punctuation">.</span>interval_min <span class="token operator">=</span> <span class="token number">0x0020</span><span class="token punctuation">;</span>
    adv_param<span class="token punctuation">.</span>interval_max <span class="token operator">=</span> <span class="token number">0x01E0</span><span class="token punctuation">;</span>
    adv_param<span class="token punctuation">.</span>adv_type <span class="token operator">=</span> BTMG_LE_ADV_IND<span class="token punctuation">;</span>

    <span class="token function">btmg_le_set_adv_param</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adv_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ble_set_adv_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">pair_req_t</span> pair_req <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">btcli_scan_status_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_scan_state_t</span> status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_SCAN_STARTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;start scanning\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_SCAN_STOPPED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;stop scanning\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_scan_dev_add_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_device_t</span> <span class="token operator">*</span>device<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;name:[%s]\\t\\taddress:[%s]\\t\\tclass:[%d]\\t\\trssi:[%d]\\n&quot;</span><span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>
            device<span class="token operator">-&gt;</span>cod<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>rssi<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dev_node <span class="token operator">=</span> <span class="token function">btmg_dev_list_find_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dev_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_dev_list_add_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> device<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_adapter_name_cb</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;btcli get adapter name:%s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_name_cb</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;btcli get remote device name:%s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_bonded_device_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_bond_state_t</span> state<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_discovered_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;bonded device state:%d, addr:%s\\n&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dev_discovered_node <span class="token operator">=</span> <span class="token function">btmg_dev_list_find_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_BOND_STATE_BONDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev_discovered_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_dev_list_remove_device</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Pairing state for %s is BONDED \\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_BOND_STATE_BOND_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Pairing state for %s is BOND_FAILED \\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_pindcoe_request_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,pindcoe request, Please enter pincode\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PIN_CODE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_passkey_request_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,passkey_request, Please enter passkey!\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_ENTER_PASSKEY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_passkey_confirm_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;please confirm the passkey(%d) sent by the %s device!\\n&quot;</span><span class="token punctuation">,</span> passkey<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>passkey <span class="token operator">=</span> passkey<span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PASSKEY_CONFIRM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_device_pairing_confirm_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> passkey<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;dev:%s,pairing_confirm,please compare the passkey numeric value: %d\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>passkey <span class="token operator">=</span> passkey<span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_PAIRING_CONFIRM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_adapter_status_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_adapter_state_t</span> status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> bt_addr<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> bt_name_buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> bt_name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is off\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_ON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is on\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_get_address</span><span class="token punctuation">(</span>bt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bt_addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">snprintf</span><span class="token punctuation">(</span>bt_name_buf<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;aw-btcli-%s-&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bt_addr <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>bt_name<span class="token punctuation">,</span> <span class="token string">&quot;%s-%s&quot;</span><span class="token punctuation">,</span> bt_name_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bt_addr <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span>bt_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span><span class="token string">&quot;aw-btcli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">btmg_adapter_set_io_capability</span><span class="token punctuation">(</span>BTMG_IO_CAP_NOINPUTNOOUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_set_scanmode</span><span class="token punctuation">(</span>BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_TURNING_ON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is turnning on\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> BTMG_ADAPTER_TURNING_OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;BT is turnning off\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli pincode &lt;0000~9999&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_pincode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PIN_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter pin code now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_pincode_reply</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>BT_SSP_INCLUDED <span class="token operator">==</span> TRUE<span class="token punctuation">)</span></span></span>
<span class="token comment">/* btcli passkey &lt;000000~999999&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_passkey</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_ENTER_PASSKEY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter passkey now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">uint32_t</span> passkey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    passkey <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>passkey <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Passkey should be between 0-999999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_passkey_reply</span><span class="token punctuation">(</span>passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli passkey_confirm */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_passkey_confirm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PASSKEY_CONFIRM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to enter this command now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_passkey_confirm</span><span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>passkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli pairing_confirm */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_pairing_confirm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair_req<span class="token punctuation">.</span>flag <span class="token operator">!=</span> AUTH_PAIRING_CONFIRM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No need to need to enter this command now\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_pairing_confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pair_req<span class="token punctuation">.</span>flag <span class="token operator">=</span> AUTH_IDLE<span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* btcli scan_list */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_scan_list</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_node_t</span> <span class="token operator">*</span>dev_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;scan list is empty\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    dev_node <span class="token operator">=</span> discovered_devices<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>dev_node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;addr: %s, name: %s\\n&quot;</span><span class="token punctuation">,</span> dev_node<span class="token operator">-&gt;</span>dev_addr<span class="token punctuation">,</span> dev_node<span class="token operator">-&gt;</span>dev_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dev_node <span class="token operator">=</span> dev_node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli paired_list */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_paired_list</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> device_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token function">btmg_get_paired_device_num</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>device_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>device_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;no device is bonded!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_paired_device_t</span> paired_list<span class="token punctuation">[</span>device_num<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_get_paired_devices</span><span class="token punctuation">(</span>device_num<span class="token punctuation">,</span> paired_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;get paired device_list:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> device_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;device[%s]\\n&quot;</span><span class="token punctuation">,</span> paired_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli scan_mode &lt;0~2&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_scanmode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mode<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mode <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_set_scanmode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli scan &lt;on/off&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_scan</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">btmg_dev_list_free</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">)</span><span class="token punctuation">;</span>
            discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        discovered_devices <span class="token operator">=</span> <span class="token function">btmg_dev_list_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token function">btmg_adapter_start_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_adapter_stop_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli io_cap &lt;0~4&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_io_cap</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> io_cap<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    io_cap <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_set_io_capability</span><span class="token punctuation">(</span>io_cap<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_dev_name */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_device_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_device_get_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_name */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_adapter_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">btmg_adapter_get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli set_name &lt;name&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_set_adapter_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_adapter_set_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli get_mac */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_get_adapter_mac</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> mac<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">btmg_adapter_get_address</span><span class="token punctuation">(</span>mac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;adapter mac is:%s&quot;</span><span class="token punctuation">,</span> mac<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool btcli_init_state <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> profile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli init or btcli init -p a2dp-source -d 4 */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_init</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">btmg_log_level_t</span> debug<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-h&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
                   <span class="token string">&quot;  [OPTION]...\\n&quot;</span>
                   <span class="token string">&quot;\\nOptions:\\n&quot;</span>
                   <span class="token string">&quot;  -h, --help\\t\\tprint this help and exit\\n&quot;</span>
                   <span class="token string">&quot;  -d, --debug\\t open debug :-d [0~5]\\n&quot;</span>
                   <span class="token string">&quot;  -p, --profile=NAME\\tenable bluetooth profile\\n&quot;</span>
                   <span class="token string">&quot;  [supported profile name]:\\n&quot;</span>
                   <span class="token string">&quot;  - a2dp-source\\tAdvanced Audio Source\\n&quot;</span>
                   <span class="token string">&quot;  - a2dp-sink\\tAdvanced Audio Sink\\n&quot;</span>
                   <span class="token string">&quot;  - hfp-hf\\tHands-Free\\n&quot;</span>
                   <span class="token string">&quot;  - spp-server\\tSerial Port Profile-Server role\\n&quot;</span>
                   <span class="token string">&quot;  - spp-client\\tSerial Port Profile-Client role\\n&quot;</span>
                   <span class="token string">&quot;  - gatt-server\\tble gatt server\\n&quot;</span>
                   <span class="token string">&quot;  - gatt-client\\tble gatt client\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-p&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> c<span class="token punctuation">;</span>
                <span class="token keyword">struct</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;a2dp-sink&quot;</span><span class="token punctuation">,</span>      BTMG_A2DP_SINK <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;a2dp-source&quot;</span><span class="token punctuation">,</span>    BTMG_A2DP_SOURCE <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;hfp-hf&quot;</span><span class="token punctuation">,</span>         BTMG_HFP_HF<span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;hfp-ag&quot;</span><span class="token punctuation">,</span>         BTMG_HFP_AG<span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;spp-server&quot;</span><span class="token punctuation">,</span>     BTMG_SPP_SERVER <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;spp-client&quot;</span><span class="token punctuation">,</span>     BTMG_SPP_CLIENT <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;gatt-server&quot;</span><span class="token punctuation">,</span>    BTMG_GATT_SERVER <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span> <span class="token string">&quot;gatt-client&quot;</span><span class="token punctuation">,</span>    BTMG_GATT_CLIENT<span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        profile <span class="token operator">|=</span> map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid BT profile name: %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid parameter, please specify a profile\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-d&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                debug <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">btmg_log_level_t</span><span class="token punctuation">)</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;debug loglevel :%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">btmg_set_loglevel</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid parameter, please specify a level\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>btcli_init_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;BT is already INIT!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;use default profile\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        profile <span class="token operator">|=</span> BTMG_A2DP_SINK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>state_cb <span class="token operator">=</span> btcli_adapter_status_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>scan_status_cb <span class="token operator">=</span> btcli_scan_status_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>device_add_cb <span class="token operator">=</span> btcli_scan_dev_add_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>bonded_device_cb <span class="token operator">=</span> btcli_bonded_device_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_adapter_cb<span class="token punctuation">.</span>get_name_cb <span class="token operator">=</span> btcli_adapter_name_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>pindcoe_request_cb <span class="token operator">=</span> btcli_device_pindcoe_request_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>passkey_request_cb <span class="token operator">=</span> btcli_device_passkey_request_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>passkey_confirm_cb <span class="token operator">=</span> btcli_device_passkey_confirm_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_device_cb<span class="token punctuation">.</span>pairing_confirm_cb <span class="token operator">=</span> btcli_device_pairing_confirm_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_A2DP_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_A2DP_SINK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_sink_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_a2dp_sink_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_sink_cb<span class="token punctuation">.</span>audio_state_cb <span class="token operator">=</span> btcli_a2dp_sink_audio_state_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_A2DP_SOURCE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_source_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_a2dp_source_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_a2dp_source_cb<span class="token punctuation">.</span>audio_state_cb <span class="token operator">=</span> btcli_a2dp_source_audio_state_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_play_state_cb <span class="token operator">=</span> btcli_avrcp_ct_play_state_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_play_position_cb <span class="token operator">=</span> btcli_avrcp_ct_play_position_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_ct_track_changed_cb <span class="token operator">=</span> btcli_avrcp_ct_track_changed_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_tg_play_state_cb <span class="token operator">=</span> btcli_avrcp_tg_play_state_cb<span class="token punctuation">;</span>
    btmg_cbs<span class="token punctuation">.</span>btmg_avrcp_cb<span class="token punctuation">.</span>avrcp_audio_volume_cb <span class="token operator">=</span> btcli_avrcp_audio_volume_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_SPP_ENABLED</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_SPP_CLIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_sppc_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_sppc_conn_status_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_sppc_cb<span class="token punctuation">.</span>recvdata_cb <span class="token operator">=</span> btcli_sppc_recvdata_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_SPP_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_spps_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_spps_conn_status_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_spps_cb<span class="token punctuation">.</span>recvdata_cb <span class="token operator">=</span> btcli_spps_recvdata_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_CLIENT_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_HFP_HF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_hf_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_hfp_hf_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_hf_cb<span class="token punctuation">.</span>event_cb <span class="token operator">=</span> btcli_hfp_hf_event_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_BT_HFP_AG_ENABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_HFP_AG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>conn_state_cb <span class="token operator">=</span> btcli_hfp_ag_connection_state_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>event_cb <span class="token operator">=</span> btcli_hfp_ag_event_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>audio_incoming_cb <span class="token operator">=</span> btcli_hfp_ag_audio_incoming_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_hfp_ag_cb<span class="token punctuation">.</span>audio_outgoing_cb <span class="token operator">=</span> btcli_hfp_ag_audio_outgoing_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>conn_cb <span class="token operator">=</span> btcli_ble_connection_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>get_db_cb <span class="token operator">=</span> btcli_gatts_get_db_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>char_read_req_cb <span class="token operator">=</span> btcli_gatts_char_read_req_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>char_write_req_cb <span class="token operator">=</span> btcli_gatts_char_write_req_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gatts_cb<span class="token punctuation">.</span>ccc_cfg_cb <span class="token operator">=</span> btcli_gatts_ccc_cfg_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_CLIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>le_scan_cb <span class="token operator">=</span> btcli_ble_scan_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>conn_cb <span class="token operator">=</span> btcli_ble_connection_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>dis_att_cb <span class="token operator">=</span> btcli_gattc_dis_att_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>read_cb <span class="token operator">=</span> btcli_gattc_read_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>write_cb <span class="token operator">=</span> btcli_gattc_write_cb<span class="token punctuation">;</span>
        btmg_cbs<span class="token punctuation">.</span>btmg_gattc_cb<span class="token punctuation">.</span>notify_indicate_cb <span class="token operator">=</span> btcli_gattc_notify_indicate_cb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_core_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_register_callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btmg_cbs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_set_profile</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    btcli_init_state <span class="token operator">=</span> true<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ble_gatt_register_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ble_advertise_on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_deinit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">&amp;</span> BTMG_GATT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ble_gatt_unregister_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btmg_gatt_attr_destory</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>
        db  <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_core_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_unregister_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btcli_init_state <span class="token operator">=</span> false<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>discovered_devices <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_dev_list_free</span><span class="token punctuation">(</span>discovered_devices<span class="token punctuation">)</span><span class="token punctuation">;</span>
        discovered_devices <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A2DP_SRC_BUFF_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></span></span>

XR_OS_Thread_t a2dp_play_thread<span class="token punctuation">;</span>
<span class="token keyword">int</span> music_fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    STOP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    PLAY<span class="token punctuation">,</span>
    PAUSE<span class="token punctuation">,</span>
    FORWARD<span class="token punctuation">,</span>
    BACKWARD<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">play_state_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> music_path<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">wav_musiclist_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> type<span class="token punctuation">;</span>
    <span class="token keyword">char</span> parameter<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">a2dp_src_thread_args_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> riff_type<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> riff_size<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> wave_type<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> format_type<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> format_size<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> compression_code<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num_channels<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sample_rate<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bytes_per_second<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> block_align<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bits_per_sample<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_type<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">wav_header_t</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> bool a2dp_src_loop <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">static</span> bool is_folder_play <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token class-name">wav_musiclist_t</span> <span class="token operator">*</span>musiclist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> musiclist_number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">a2dp_src_thread_args_t</span> <span class="token operator">*</span>thread_args <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token class-name">play_state_t</span> play_state<span class="token punctuation">;</span>
bool dev_connnect<span class="token punctuation">,</span> music_canwrite<span class="token punctuation">,</span> is_pause <span class="token operator">=</span> true<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">play_state_t</span> <span class="token function">get_play_state</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> play_state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set_play_state</span><span class="token punctuation">(</span><span class="token class-name">play_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    play_state <span class="token operator">=</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_avrcp_tg_play_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_avrcp_play_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_AVRCP_PLAYSTATE_STOPPED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Receive event[STOP] from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_AVRCP_PLAYSTATE_PLAYING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Receive event[PLAY] from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_AVRCP_PLAYSTATE_PAUSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Receive event[PAUSE] from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PAUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_AVRCP_PLAYSTATE_FORWARD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Receive event[FORWARD] from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_folder_play<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;need specify the folder with -p to start\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>FORWARD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_AVRCP_PLAYSTATE_BACKWARD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Receive event[BACKWARD] from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_folder_play<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;need specify the folder with -p to start\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>BACKWARD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">open_file</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>file_path<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close_file</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">traverse_musiclist</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>foldpath<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> file_format<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    DIR <span class="token operator">*</span>record_dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>de <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> file_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    record_dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>foldpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>record_dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Path OPEN error \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>musiclist <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>musiclist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    musiclist_number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    musiclist <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">wav_musiclist_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wav_musiclist_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>de <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>record_dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>d_name<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>d_name<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>d_type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* file */</span>
            <span class="token keyword">int</span> filelen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>de<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>file_format<span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>file_format<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>file_format<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>d_name <span class="token operator">+</span> filelen <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 记录文件格式 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;wav&quot;</span><span class="token punctuation">,</span> file_format<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">wav_musiclist_t</span> <span class="token operator">*</span>ml <span class="token operator">=</span> <span class="token operator">&amp;</span>musiclist<span class="token punctuation">[</span>musiclist_number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>foldpath<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>foldpath<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span>
                    <span class="token function">sprintf</span><span class="token punctuation">(</span>ml<span class="token operator">-&gt;</span>music_path<span class="token punctuation">,</span> <span class="token string">&quot;%s/%s&quot;</span><span class="token punctuation">,</span> foldpath<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token function">sprintf</span><span class="token punctuation">(</span>ml<span class="token operator">-&gt;</span>music_path<span class="token punctuation">,</span> <span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> foldpath<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                ml<span class="token operator">-&gt;</span>number <span class="token operator">=</span> musiclist_number<span class="token punctuation">;</span>
                musiclist_number<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;find path:%s\\n&quot;</span><span class="token punctuation">,</span> ml<span class="token operator">-&gt;</span>music_path<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">wav_musiclist_t</span> <span class="token operator">*</span>new_musiclist<span class="token punctuation">;</span>
                new_musiclist <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">wav_musiclist_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>
                        musiclist<span class="token punctuation">,</span> musiclist_number <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wav_musiclist_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>new_musiclist <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;realloc fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">free</span><span class="token punctuation">(</span>musiclist<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    musiclist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    musiclist <span class="token operator">=</span> new_musiclist<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">closedir</span><span class="token punctuation">(</span>record_dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">btcli_a2dp_src_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> send_len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> path_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">wav_header_t</span> wav_header<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> wav_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>A2DP_SRC_BUFF_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> muisc_path<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">a2dp_src_thread_args_t</span> <span class="token operator">*</span>thread_arg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">a2dp_src_thread_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
    <span class="token keyword">char</span> type <span class="token operator">=</span> thread_arg<span class="token operator">-&gt;</span>type<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> thread_arg<span class="token operator">-&gt;</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token char">&#39;p&#39;</span> <span class="token operator">|</span> type <span class="token operator">==</span> <span class="token char">&#39;P&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">traverse_musiclist</span><span class="token punctuation">(</span>thread_arg<span class="token operator">-&gt;</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;traverse musiclist fail \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>musiclist<span class="token punctuation">[</span>wav_number<span class="token punctuation">]</span><span class="token punctuation">.</span>music_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

start<span class="token operator">:</span>
    c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    path_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path_length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//File path meets at least length 5</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter the correct file path \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;.wav&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>muisc_path<span class="token punctuation">[</span>path_length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter the correct audio format - &#39;wav&#39;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>music_fd <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;close music fd\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close_file</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    music_fd <span class="token operator">=</span> <span class="token function">open_file</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>music_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot open input file\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wav_header<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wav_header_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wav_header_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;read wav file header failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close_file</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;btcli_a2dp_src_thread start !\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btmg_a2dp_source_set_audio_param</span><span class="token punctuation">(</span>wav_header<span class="token punctuation">.</span>num_channels<span class="token punctuation">,</span> wav_header<span class="token punctuation">.</span>sample_rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">=</span> wav_header<span class="token punctuation">.</span>data_size<span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;start a2dp src loop, data size:%d, ch:%d, sample:%d ,path: %s \\n&quot;</span><span class="token punctuation">,</span>
            wav_header<span class="token punctuation">.</span>data_size<span class="token punctuation">,</span> wav_header<span class="token punctuation">.</span>num_channels<span class="token punctuation">,</span> wav_header<span class="token punctuation">.</span>sample_rate<span class="token punctuation">,</span> muisc_path<span class="token punctuation">)</span><span class="token punctuation">;</span>

    a2dp_src_loop <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">set_play_state</span><span class="token punctuation">(</span>PLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>a2dp_src_loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">get_play_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> PLAY<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_pause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">btmg_a2dp_source_play_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                is_pause <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>music_canwrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/* Wait for the callback to complete before the
                other party&#39;s audio channel is actually opened */</span>
                <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>send_len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c <span class="token operator">=</span> count <span class="token operator">-</span> written<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> A2DP_SRC_BUFF_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    c <span class="token operator">=</span> A2DP_SRC_BUFF_SIZE<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">lseek</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;audio file read complete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;read file error,ret:%d,c=%d\\n&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_play_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> PLAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                send_len <span class="token operator">=</span> <span class="token function">btmg_a2dp_source_send_data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                written <span class="token operator">+=</span> send_len<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> PAUSE<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_pause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">btmg_a2dp_source_play_stop</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
                music_canwrite <span class="token operator">=</span> false<span class="token punctuation">,</span> is_pause <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> FORWARD<span class="token operator">:</span>
            wav_number<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>wav_number <span class="token operator">&gt;=</span> musiclist_number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                wav_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>musiclist<span class="token punctuation">[</span>wav_number<span class="token punctuation">]</span><span class="token punctuation">.</span>music_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close_file</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            music_fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            a2dp_src_loop <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> start<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> BACKWARD<span class="token operator">:</span>
            wav_number<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>wav_number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                wav_number <span class="token operator">=</span> musiclist_number <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>muisc_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>musiclist<span class="token punctuation">[</span>wav_number<span class="token punctuation">]</span><span class="token punctuation">.</span>music_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close_file</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            music_fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            a2dp_src_loop <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> start<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> STOP<span class="token operator">:</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP SRC Thread STOP\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            a2dp_src_loop <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">close_file</span><span class="token punctuation">(</span>music_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    music_fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
failed<span class="token operator">:</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Delete a2dp_play_thread\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    music_canwrite <span class="token operator">=</span> false<span class="token punctuation">,</span> is_pause <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">btmg_a2dp_source_play_stop</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>musiclist <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>musiclist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        musiclist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread_args <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>thread_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread_args <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">XR_OS_ThreadDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a2dp_play_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_audio_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_a2dp_source_audio_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_AUDIO_STARTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        music_canwrite <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;start btcli_a2dp_src_thread from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_AUDIO_STOPPED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        music_canwrite <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PAUSE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//need PAUSE not STOP</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;stop btcli_a2dp_src_thread from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_AUDIO_SUSPENDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*SUSPENDED protocol stack not used???*/</span>
        music_canwrite <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PAUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;a2dp source audio suspend from devices device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_a2dp_source_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span>
                                           <span class="token class-name">btmg_a2dp_source_connection_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* It should be noted that there will be no disconnecting callback
        when the other party disconnects abnormally, so it is necessary to
        ensure that the thread can be released */</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dev_connnect <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP source disconnected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_CONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP source connecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dev_connnect <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP source connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_A2DP_SOURCE_DISCONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//The disconnecting stage should exit the playback thread</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;A2DP source disconnecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_src connect &lt;device mac&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_connect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_a2dp_source_connect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_src disconnect &lt;device mac&gt; */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_disconnect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_a2dp_source_disconnect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_src start -f xxx.wav or btcli a2dp_src start -p /data */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_start</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> argc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev_connnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Please complete the device connection first\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_play_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> STOP <span class="token operator">|</span> a2dp_src_loop <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_WRN</span><span class="token punctuation">(</span><span class="token string">&quot;a2dp_src_play_t thread already started\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    is_folder_play <span class="token operator">=</span> false<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>a2dp_src_loop <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread_args<span class="token punctuation">)</span>
            <span class="token function">free</span><span class="token punctuation">(</span>thread_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread_args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">a2dp_src_thread_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">a2dp_src_thread_args_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;-F&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            thread_args<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;-p&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;-P&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            thread_args<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">;</span>
            is_folder_play <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>thread_args<span class="token operator">-&gt;</span>parameter<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;please enter the parameters correctly \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>thread_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            thread_args <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">XR_OS_ThreadCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a2dp_play_thread<span class="token punctuation">,</span> <span class="token string">&quot;a2dp_src_play_t&quot;</span><span class="token punctuation">,</span> btcli_a2dp_src_thread<span class="token punctuation">,</span>
                        thread_args<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_src stop */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_stop</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">set_play_state</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_control</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev_connnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Please complete the device connection first\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_play_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Please run first a2dp_src:  btcli a2dp_src start xxxx\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>PAUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;forward&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_folder_play<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;need specify the folder with -p to start\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>FORWARD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;backward&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_folder_play<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;need specify the folder with -p to start\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">set_play_state</span><span class="token punctuation">(</span>BACKWARD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;This operation is not supported\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli a2dp_src vol */</span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_vol</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;val is %d&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> val <span class="token operator">&gt;</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
    $btcli a2dp_src connect &lt;mac&gt;
    $btcli a2dp_src disconnect &lt;mac&gt;
    $btcli a2dp_src start
    $btcli a2dp_src stop
    $btcli a2dp_src control
    $btcli a2dp_src vol &lt;val&gt;
*/</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> a2dp_source_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span>    btcli_source_connect<span class="token punctuation">,</span>    <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> btcli_source_disconnect<span class="token punctuation">,</span> <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>      btcli_source_start<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;-p [folder path] or -f [file path]&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;control&quot;</span><span class="token punctuation">,</span>    btcli_source_control<span class="token punctuation">,</span>    <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;cmd&gt;(pause play forward backward)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">,</span>       btcli_source_stop<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;vol&quot;</span><span class="token punctuation">,</span>        btcli_source_vol<span class="token punctuation">,</span>        <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;val&gt;(val:0~100)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>       btcli_source_help<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli a2dp_src help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_source_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>a2dp_source_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>a2dp_source_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_a2dp_source</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> a2dp_source_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>a2dp_source_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设置 a2dp source 相关回调函数；</li><li>调用 btmg_core_init 初始化 btmanager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_A2DP_SOURCE) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，参考 btcli_adapter_status_cb；</li><li>在 state_cb 中调用 btmg_adapter_set_name，设置蓝牙名称；</li><li>在 state_cb 中调用 btmg_adapter_set_io_capability，设置 io_capability 能力；</li><li>在 state_cb 中调用 btmg_adapter_set_scanmode，设置发现模式；</li></ol><h5 id="扫描连接" tabindex="-1"><a class="header-anchor" href="#扫描连接" aria-hidden="true">#</a> 扫描连接</h5><p>蓝牙初始化完成后，可以扫描和连接周围设备。</p><ol><li>调用 btmg_adapter_start_scan 扫描周围设备，可参考 btcli_scan。发起扫描后，扫到的设备会通过 btmg_device_cb.device_add_cb 回调，此时应用可以把设备管理起来，建立应用的扫描列表，可参考 btcli_scan_dev_add_cb，扫描列表可以参考 btcli_scan_list，请根据自身需求管理设备列表；</li><li>调 用 btmg_a2dp_source_connect 指 定 设 备 （mac 地 址） 发 起 连 接， 连 接 状 态 通 过btmg_a2dp_source_cb.conn_state_cb 上报，根据连接或断开做应用逻辑开发，可参考btcli_a2dp_source_connection_state_cb；</li></ol><h5 id="音频播放" tabindex="-1"><a class="header-anchor" href="#音频播放" aria-hidden="true">#</a> 音频播放</h5><p>设备连接后，可以往 A2DP Sink 设备推流。音频播放根据数据处理的方式不同分为两种：</p><ol><li>btmanager 通路</li></ol><p>btmanager 包含抖动 fifo、音频重采样的功能，直接使用 A2DP Source API 开发即可。</p><ol><li>Audio System 通路</li></ol><p>Audio System 对接 btmanager，把 A2DP Source 蓝牙设备抽象为一个声卡，细节可以参考 Audio 的开发指南文档。btmanager 也需要做相应的配置，btmanager 通路和 Audio System 通路只能二选一；</p><h6 id="bt-manager-通路" tabindex="-1"><a class="header-anchor" href="#bt-manager-通路" aria-hidden="true">#</a> bt_manager 通路</h6><p>请参考 btcli_a2dp_source.c 的实现，目前只支持接收 PCM 数据，因此应用推送的音频流务必是PCM 数据，发送流程如下：</p><ol><li>通过 btmg_a2dp_source_play_start 函数通知协议栈准备开始处理数据；</li><li>通过 btmg_a2dp_source_set_audio_param 把将要播放音频流的通道数和采样率传递给btmanager。除第一次外，以后在音频参数变化时调用即可。例如当前播放的是 44100HZ，单声道的音频 A，播放完音频 A 之后，需要如果要播放44100HZ，单声道的音频 B，可以不用进行重新设置。但如果要播放的是 48000HZ，单声道的音频 C，务必调用，否则播放不正常；</li><li>通过 btmg_a2dp_source_send_data 把 pcm 传递给 bt_manager，建议每次发送 512 字节，bt_manager 内部对数据处理（缓存与重采样），再把数据传给协议栈，协议栈把数据编码成 SBC 格式给到蓝牙控制器，蓝牙控制器最终通过无线射频传给对端蓝牙设备。反复调用send_data 接口直到数据发完完毕；</li><li>设置/获取蓝牙音乐播放音量可以通过 btmg_avrc_set_absolute_volume/btmg_avrc_get_absolute_volume 接口;</li><li>如果不再发送数据，务必调用 btmg_a2dp_source_play_stop 告知协议栈停止数据处理;</li></ol><h6 id="audio-system-通路" tabindex="-1"><a class="header-anchor" href="#audio-system-通路" aria-hidden="true">#</a> Audio System 通路</h6><ol><li>默认不走此通路，RV 核需要做以下配置</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        wireless ‑‑‑&gt;
            [*] btmanager ‑‑‑&gt;
               [*] Enable AudioTrack send audio data

        AudioSystem Support‑‑‑&gt;
            AW Audio System Support ‑‑‑&gt;
                Audio HW Support ‑‑‑&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="反初始化" tabindex="-1"><a class="header-anchor" href="#反初始化" aria-hidden="true">#</a> 反初始化</h5><p>反初始化是指关闭蓝牙，可以参考 btcli_deinit，主要是以下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_core_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_unregister_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要关注释放应用额外申请的内存资源等。</p><h3 id="hfp-hf-开发" tabindex="-1"><a class="header-anchor" href="#hfp-hf-开发" aria-hidden="true">#</a> HFP HF 开发</h3><h4 id="hfp-hf-api" tabindex="-1"><a class="header-anchor" href="#hfp-hf-api" aria-hidden="true">#</a> HFP HF API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_hfp_hf_connect</td><td style="text-align:left;">连接指定设备</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_disconnect</td><td style="text-align:left;">断开与指定设备的连接</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_start_voice_recognition</td><td style="text-align:left;">开启语音识别</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_stop_voice_recognition</td><td style="text-align:left;">关闭语音识别</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_spk_vol_update</td><td style="text-align:left;">更新扩音器音量</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_mic_vol_update</td><td style="text-align:left;">更新麦克风音量</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_dial</td><td style="text-align:left;">指定号码拨打电话</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_dial_memory</td><td style="text-align:left;">快速拨号，手机必须有设置快速拨号的号码</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_send_chld_cmd</td><td style="text-align:left;">多方通话控制</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_send_btrh_cmd</td><td style="text-align:left;">发送响应和保持动作的命令</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_answer_call</td><td style="text-align:left;">接听来电</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_reject_call</td><td style="text-align:left;">拒绝来电</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_query_calls</td><td style="text-align:left;">查询当前通话列表</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_query_operator</td><td style="text-align:left;">查询当前选择的网络运营商名称</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_query_number</td><td style="text-align:left;">查阅本机号码</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_send_dtmf</td><td style="text-align:left;">在通话过程中传输 DTMF 码，即在通话过程中使用键盘输入内容</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_request_last_voice_tag_number</td><td style="text-align:left;">向 AG 请求与最后录制的语音标签相对应的电话号码</td></tr><tr><td style="text-align:left;">btmg_hfp_hf_send_nrec</td><td style="text-align:left;">关闭回声消除和降噪</td></tr></tbody></table><h4 id="hfp-hf-api-调用流程" tabindex="-1"><a class="header-anchor" href="#hfp-hf-api-调用流程" aria-hidden="true">#</a> HFP HF API 调用流程</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;AudioSystem.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s_hfp_event_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;BTMG_HFP_HF_BVRA_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_CALL_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_CALL_SETUP_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_CALL_HELD_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_SERVICE_AVAILABILITY_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_SIGNAL_STRENGTH_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_ROAMING_STATUS_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CIND_BATTERY_LEVEL_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_COPS_CURRENT_OPERATOR_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_BTRH_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CLIP_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CCWA_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CLCC_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_VOLUME_CONTROL_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_CNUM_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_BSIR_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_BINP_EVT&quot;</span><span class="token punctuation">,</span>
                                         <span class="token string">&quot;BTMG_HFP_HF_RING_IND_EVT&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">_hfp_event_to_string</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_hf_event_t</span> event<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> s_hfp_event_str<span class="token punctuation">[</span>event <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">XRADIO_HFP_ADJUST_VOLUME</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XRADIO_AMIXER_HFP_MAX</span> <span class="token expression"><span class="token number">63</span></span></span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">bluedroid_amixer</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> volume<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> type <span class="token operator">=</span> AUDIO_STREAM_SYSTEM<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> volume_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> max_volume <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">softvol_control_with_streamtype</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>volume_value<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;get softvol range failed:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    max_volume <span class="token operator">=</span> <span class="token punctuation">(</span>volume_value <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
    volume_value <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> max_volume <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">softvol_control_with_streamtype</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>volume_value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;set softvol failed:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_connection_state_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_hfp_hf_connection_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_HFP_HF_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;hfp hf disconnected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_HFP_HF_CONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;hfp hf connecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_HFP_HF_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;hfp hf connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_HFP_HF_SLC_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;hfp hf slc_connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_HFP_HF_DISCONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;hfp hf disconnecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_hfp_hf_event_cb</span><span class="token punctuation">(</span><span class="token class-name">btmg_hfp_hf_event_t</span> event<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;event:%s \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">_hfp_event_to_string</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp voice_rec &lt;0/1&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_voice_recognition</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_start_voice_recognition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_stop_voice_recognition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %d\\n&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp vol_update &lt;spk/mic&gt; &lt;vol&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_vol_update</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> devc<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vol<span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%s %d&quot;</span><span class="token punctuation">,</span> devc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>devc<span class="token punctuation">,</span> <span class="token string">&quot;spk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_spk_vol_update</span><span class="token punctuation">(</span>vol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">XRADIO_HFP_ADJUST_VOLUME</span></span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;adjusting the volume by ourselves\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vol <span class="token operator">=</span> XRADIO_AMIXER_HFP_MAX <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>vol <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;volume is %d\\n&quot;</span><span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">bluedroid_amixer</span><span class="token punctuation">(</span>vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> XR_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Set vol by ourself failed \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>devc<span class="token punctuation">,</span> <span class="token string">&quot;mic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_mic_vol_update</span><span class="token punctuation">(</span>vol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> devc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp dial 10086 */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_dial</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> number<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_dial</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp dial_mem 2 */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_dial_mem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> loc<span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_dial_memory</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp chld 0 0 */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_chld</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> chld<span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>chld<span class="token punctuation">,</span> <span class="token operator">&amp;</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>chld <span class="token operator">==</span> BTMG_HF_CHLD_TYPE_REL_X <span class="token operator">||</span> chld <span class="token operator">==</span> BTMG_HF_CHLD_TYPE_PRIV_X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_send_chld_cmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">btmg_hf_chld_type_t</span><span class="token punctuation">)</span>chld<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp btrh &lt;hold/accept/reject&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_btrh</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> btrhcmd<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">btmg_hf_btrh_cmd_t</span> btrh<span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> btrhcmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>btrhcmd<span class="token punctuation">,</span> <span class="token string">&quot;hold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        btrh <span class="token operator">=</span> BTMG_HF_BTRH_CMD_HOLD<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>btrhcmd<span class="token punctuation">,</span> <span class="token string">&quot;accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        btrh <span class="token operator">=</span> BTMG_HF_BTRH_CMD_ACCEPT<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>btrhcmd<span class="token punctuation">,</span> <span class="token string">&quot;reject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        btrh <span class="token operator">=</span> BTMG_HF_BTRH_CMD_REJECT<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> btrhcmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_send_btrh_cmd</span><span class="token punctuation">(</span>btrh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp answer */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_answer</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_answer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp reject */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_reject</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_reject_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp query &lt;call/name&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_query</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">&quot;call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_query_calls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_query_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp number */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_phone_number</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_query_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp dtmf &lt;0-9/#/ * &gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_dtmf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">/* get param */</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_send_dtmf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp last_vnum */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_last_vnum</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_request_last_voice_tag_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli hfp nrec_close */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_nrec_close</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    btmg_err ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">btmg_hfp_hf_send_nrec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;return failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> hfp_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;voice_rec&quot;</span><span class="token punctuation">,</span>  btcli_hfp_voice_recognition<span class="token punctuation">,</span>  <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;state：1/0&gt;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;vol_update&quot;</span><span class="token punctuation">,</span> btcli_hfp_vol_update<span class="token punctuation">,</span>         <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;spk/mic&gt; &lt;vol&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;dial&quot;</span><span class="token punctuation">,</span>       btcli_hfp_dial<span class="token punctuation">,</span>               <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;phone_num&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;dial_mem&quot;</span><span class="token punctuation">,</span>   btcli_hfp_dial_mem<span class="token punctuation">,</span>           <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;local&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;chld&quot;</span><span class="token punctuation">,</span>       btcli_hfp_chld<span class="token punctuation">,</span>               <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;type：0~6&gt; &lt;index&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;btrh&quot;</span><span class="token punctuation">,</span>       btcli_hfp_btrh<span class="token punctuation">,</span>               <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hold/accept/reject&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;answer&quot;</span><span class="token punctuation">,</span>     btcli_hfp_answer<span class="token punctuation">,</span>             <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;reject&quot;</span><span class="token punctuation">,</span>     btcli_hfp_reject<span class="token punctuation">,</span>             <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span>      btcli_hfp_query<span class="token punctuation">,</span>              <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;call/name&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>     btcli_hfp_phone_number<span class="token punctuation">,</span>        <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;dtmf&quot;</span><span class="token punctuation">,</span>       btcli_hfp_dtmf<span class="token punctuation">,</span>               <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;code：0-9，#，*，A-D&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;last_vnum&quot;</span><span class="token punctuation">,</span>  btcli_hfp_last_vnum<span class="token punctuation">,</span>          <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;nrec_close&quot;</span><span class="token punctuation">,</span> btcli_hfp_nrec_close<span class="token punctuation">,</span>         <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>       btcli_hfp_help<span class="token punctuation">,</span>               <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>hfp_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>hfp_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_hfp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> hfp_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>hfp_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化-2" tabindex="-1"><a class="header-anchor" href="#初始化-2" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设置 hfp hf 的回调函数；</li><li>调用 btmg_core_init 初始化 bt_manager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_HFP_HF) 使能蓝牙 Profile；如果与 A2DP Sink 一起使用，调用 btmg_set_profile(BTMG_HFP_HF | BTMG_A2DP_SINK )；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，参考 btcli_adapter_status_cb；</li><li>在 state_cb 中调用 btmg_adapter_set_name，设置蓝牙名称；</li><li>在 state_cb 中调用 btmg_adapter_set_io_capability，设置 io_capability 能力；</li><li>在 state_cb 中调用 btmg_adapter_set_scanmode，设置发现模式；</li></ol><h5 id="设备连接" tabindex="-1"><a class="header-anchor" href="#设备连接" aria-hidden="true">#</a> 设备连接</h5><ol><li>初始化完成后，手机可以搜索与连接，连接的回调函数 btmg_hfp_hf_cb.conn_state_cb。在连接过程中，会存在 AT 命令的交互，因此会收到相关 AT 的事件，在btmg_hfp_hf_cb.event_cb 回调上来，在示例中只是把相关事件打印出来。</li><li>如果需要主动连接与断开，使用 btmg_hfp_hf_connect 或 btmg_hfp_hf_disconnect 接口。</li></ol><h5 id="通话与控制" tabindex="-1"><a class="header-anchor" href="#通话与控制" aria-hidden="true">#</a> 通话与控制</h5><ol><li>手机收到来电，并且手机端主动接听电话后，设备会接管手机的通话功能，通话的声音会在设备扬声器播放，通话的录音也会使用设备的麦克风。当前播放和录音的处理放在 bt_manager内部处理，后续计划透出相关的数据 cb；</li><li>如果需要在设备上接听电话，挂断电话等控制，一般需要通过发送 AT 命令，相关的命令已经通过 API 的方式集成，用户可以参考 btcli_hfp.c 相关命令的实现。</li></ol><h5 id="反初始化-1" tabindex="-1"><a class="header-anchor" href="#反初始化-1" aria-hidden="true">#</a> 反初始化</h5><p>反初始化参考 btcli_deinit，主要是以下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_core_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_unregister_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spp-client-开发" tabindex="-1"><a class="header-anchor" href="#spp-client-开发" aria-hidden="true">#</a> SPP Client 开发</h3><p>SPP Profile 一般用于数据透传，常见应用是连接蓝牙打印机发送打印数据。</p><h4 id="spp-client-api" tabindex="-1"><a class="header-anchor" href="#spp-client-api" aria-hidden="true">#</a> SPP Client API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_sppc_connect</td><td style="text-align:left;">连接 SPP Server 设备</td></tr><tr><td style="text-align:left;">btmg_sppc_disconnect</td><td style="text-align:left;">断开与对端设备连接</td></tr><tr><td style="text-align:left;">btmg_sppc_write</td><td style="text-align:left;">发送数据给对端设备</td></tr></tbody></table><h4 id="spp-client-api-调用流程" tabindex="-1"><a class="header-anchor" href="#spp-client-api-调用流程" aria-hidden="true">#</a> SPP Client API 调用流程</h4><p>HFP HF 功能的使用示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;bt_manager.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">btcli_sppc_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client disconnected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client connecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client disconnecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECT_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client connect with device: %s failed!\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNEC_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp client disconnect with device: %s failed!\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_sppc_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> recv_data<span class="token punctuation">[</span>data_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    recv_data<span class="token punctuation">[</span>data_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;sppc recv from dev:[%s],[len=%d][data:%s]\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span>
            recv_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli sppc connect &lt;device mac&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc_connect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_sppc_connect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli sppc disconnect &lt;device mac&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc_disconnect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_sppc_disconnect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli sppc write &lt;data&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_sppc_write</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> sppc_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span>    btcli_sppc_connect<span class="token punctuation">,</span>     <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> btcli_sppc_disconnect<span class="token punctuation">,</span>  <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span>      btcli_sppc_write<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;data&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>       btcli_sppc_help<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli sppc help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>sppc_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>sppc_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_sppc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> sppc_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>sppc_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化-3" tabindex="-1"><a class="header-anchor" href="#初始化-3" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设置 spp client 的回调函数；</li><li>调用 btmg_core_init 初始化 bt_manager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_SPP_CLIENT) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，参考 btcli_adapter_status_cb；</li><li>在 state_cb 中调用 btmg_adapter_set_name，设置蓝牙名称；</li><li>在 state_cb 中调用 btmg_adapter_set_io_capability，设置 io_capability 能力；</li><li>在 state_cb 中调用 btmg_adapter_set_scanmode，设置发现模式；</li></ol><h5 id="扫描连接-1" tabindex="-1"><a class="header-anchor" href="#扫描连接-1" aria-hidden="true">#</a> 扫描连接</h5><p>初始化完成后可以发起扫描连接</p><ol><li>扫描接口使用 btmg_adapter_start_scan；</li><li>扫描到目标设备后，先使用btmg_adapter_stop_scan停止扫描，再使用btmg_sppc_connect发起连接；连接状态通过回调函数 btmg_sppc_cb.conn_state_cb 上报。</li><li>如果需要主动断开连接使用 btmg_sppc_disconnect；</li></ol><h5 id="数据收发" tabindex="-1"><a class="header-anchor" href="#数据收发" aria-hidden="true">#</a> 数据收发</h5><ol><li>通过 btmg_sppc_write 发送数据；</li><li>如果对端回复数据，会通过 btmg_sppc_cb.recvdata_cb 回调。</li></ol><h3 id="spp-server-开发" tabindex="-1"><a class="header-anchor" href="#spp-server-开发" aria-hidden="true">#</a> SPP Server 开发</h3><h4 id="spp-server-api" tabindex="-1"><a class="header-anchor" href="#spp-server-api" aria-hidden="true">#</a> SPP Server API</h4><table><thead><tr><th style="text-align:left;">API 接口</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_spps_start</td><td>指定 Server Channel 启动 SPP server</td></tr><tr><td style="text-align:left;">btmg_spps_stop</td><td>停止 SPP server</td></tr><tr><td style="text-align:left;">btmg_spps_write</td><td>发送数据给对端设备</td></tr><tr><td style="text-align:left;">btmg_spps_disconnect</td><td>断开设备连接</td></tr></tbody></table><h4 id="spp-server-api-调用流程" tabindex="-1"><a class="header-anchor" href="#spp-server-api-调用流程" aria-hidden="true">#</a> SPP Server API 调用流程</h4><p>HFP HF 功能的使用示例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;bt_manager.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">btcli_spps_conn_status_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token class-name">btmg_spp_connection_state_t</span> state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server disconnected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server connecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server connected with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNECTING<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server disconnecting with device: %s\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_CONNECT_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server connect with device: %s failed!\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BTMG_SPP_DISCONNEC_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spp server disconnect with device: %s failed!\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_spps_recvdata_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bd_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> recv_data<span class="token punctuation">[</span>data_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    recv_data<span class="token punctuation">[</span>data_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;spps recv from dev:[%s][len=%d][data:%s]\\n&quot;</span><span class="token punctuation">,</span> bd_addr<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span>
            recv_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli spps start &lt;scn&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_start</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">int</span> scn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    scn <span class="token operator">=</span> <span class="token function">cmd_atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">btmg_spps_start</span><span class="token punctuation">(</span>scn<span class="token punctuation">)</span> <span class="token operator">!=</span> BT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;spps start fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli spps stop */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_stop</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_spps_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli spps disconnect &lt;device mac&gt; */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_disconnect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_spps_disconnect</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* btcli spps write &lt;data&gt;*/</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_spps_write</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> spps_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>      btcli_spps_start<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;scn&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">,</span>       btcli_spps_stop<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;No parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> btcli_spps_disconnect<span class="token punctuation">,</span> <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;device mac&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span>      btcli_spps_write<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;data&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>       btcli_spps_help<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli spps help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>spps_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>spps_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_spps</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> spps_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>spps_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化-4" tabindex="-1"><a class="header-anchor" href="#初始化-4" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，设置 spp server 的回调函数；</li><li>调用 btmg_core_init 初始化 bt_manager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_SPP_SERVER) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，参考 btcli_adapter_status_cb；</li><li>在 state_cb 中调用 btmg_adapter_set_name，设置蓝牙名称；</li><li>在 state_cb 中调用 btmg_adapter_set_io_capability，设置 io_capability 能力；</li><li>在 state_cb 中调用 btmg_adapter_set_scanmode，设置发现模式；</li><li>在 state_cb 中调用 btmg_spps_start 指定 Channel 把 SPP Server 真正启动起来。</li></ol><h5 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h5><p>完成以上初始化后，手机等 SPP Client 设备可以搜索并发起连接。连接状态可以通过btmg_spps_cb.conn_state_cb 获取。</p><p>如需主动断开，请使用 btmg_spps_disconnect 接口。</p><h5 id="数据收发-1" tabindex="-1"><a class="header-anchor" href="#数据收发-1" aria-hidden="true">#</a> 数据收发</h5><p>设备连接成功后，可进行数据发送和接收：</p><ol><li>通过 btmg_spps_write 发送数据；</li><li>通过 btmg_spps_cb.recvdata_cb 回调接收对方数据；</li></ol><h5 id="反初始化-2" tabindex="-1"><a class="header-anchor" href="#反初始化-2" aria-hidden="true">#</a> 反初始化</h5><p>反初始化参考 btcli_deinit，主要是以下函数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>btmg_adapter_enable(false);
btmg_core_deinit();
btmg_unregister_callback(void);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意对于 SPP Server，需要先调用 btmg_spps_stop 再进行反初始化，否则下一次启动 SPP Server 会有异常和内存泄漏。</p><h2 id="ble-开发介绍" tabindex="-1"><a class="header-anchor" href="#ble-开发介绍" aria-hidden="true">#</a> BLE 开发介绍</h2><p>BLE 根据交互行为划分为 Central 与 Peripheral 两个角色，可以理解为客户端‑服务端结构。</p><ul><li>Central （中心设备）：作为客户端，一般需要配合 BLE 扫描，主动连上 Perpheral 设备，进行数据交互。从蓝牙 Profile 的角度称为 GATT Client。例如：手机一般会作为 Central 设备使用。</li><li>Peripheral（外围设备）：作为服务端，一般需要向外广播数据包，让 Central 可以扫描到。它包含一个或者多个 Service，从蓝牙 Profile 的角度称为 GATT Server。例如: 设备使用 BLE 配网作为 Peripheral 设备。</li></ul><h3 id="ble-基础功能" tabindex="-1"><a class="header-anchor" href="#ble-基础功能" aria-hidden="true">#</a> BLE 基础功能</h3><p>GATT Server 和 GATT Client 的开发基于 BLE 的基础 API，比如扫描、连接、广播等功能。设备建立起连接后才能通过 GATT 数据交互。本文档为了方便开发者了解在开发 GATT Server 或者 GATTClient 过程中可能会使用到哪些 BLE 基础 API，会将 BLE 基础 API 的说明附加在具体的功能 API 说明中。</p><h3 id="gatt-server" tabindex="-1"><a class="header-anchor" href="#gatt-server" aria-hidden="true">#</a> GATT Server</h3><h4 id="gatt-server-api" tabindex="-1"><a class="header-anchor" href="#gatt-server-api" aria-hidden="true">#</a> GATT Server API</h4><p>列出开发 GATT Server 功能所需的 API，包含 BLE 基础接口</p><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_gatt_attr_create</td><td style="text-align:left;">创建 GATT Database</td></tr><tr><td style="text-align:left;">btmg_gatt_attr_destory</td><td style="text-align:left;">销毁 GATT Database</td></tr><tr><td style="text-align:left;">btmg_gatt_attr_primary_service</td><td style="text-align:left;">往 Database 中添加 service</td></tr><tr><td style="text-align:left;">btmg_gatt_attr_characteristic</td><td style="text-align:left;">往 Database 中添加 characteristic</td></tr><tr><td style="text-align:left;">btmg_gatt_attr_ccc</td><td style="text-align:left;">往 Database 中添加 ccc</td></tr><tr><td style="text-align:left;">btmg_gatt_register_service</td><td style="text-align:left;">把构建好的 service 注册到协议栈</td></tr><tr><td style="text-align:left;">btmg_gatt_unregister_service</td><td style="text-align:left;">注销已注册的 service</td></tr><tr><td style="text-align:left;">btmg_gatt_get_db</td><td style="text-align:left;">遍历本地的 Database</td></tr><tr><td style="text-align:left;">btmg_gatts_notify</td><td style="text-align:left;">发送 notify</td></tr><tr><td style="text-align:left;">btmg_gatts_indicate</td><td style="text-align:left;">发送 indicate</td></tr><tr><td style="text-align:left;">btmg_le_set_name</td><td style="text-align:left;">设置本地 ble 名字</td></tr><tr><td style="text-align:left;">btmg_le_get_name</td><td style="text-align:left;">获取本地 ble 名字</td></tr><tr><td style="text-align:left;">btmg_le_enable_adv</td><td style="text-align:left;">打开或者关闭广播；打开广播之前先设置广播的参数和内容</td></tr><tr><td style="text-align:left;">btmg_le_set_adv_param</td><td style="text-align:left;">设置广播参数，如广播的间隔，广播的类型等</td></tr><tr><td style="text-align:left;">btmg_le_set_adv_scan_rsp_data</td><td style="text-align:left;">设置广播数据内容：例如 UUID、BLE 设备名称等；设置扫描响应数据</td></tr><tr><td style="text-align:left;">btmg_le_whitelist_add</td><td style="text-align:left;">添加白名单，注意白名单保存在 controller 中；通过白名单，可以只允许特定的蓝牙设备（白名单中列出的）扫描（Scan）、连接（connect）</td></tr><tr><td style="text-align:left;">btmg_le_white_list_remove</td><td style="text-align:left;">将指定设备从 controller 中的白名单中清除</td></tr><tr><td style="text-align:left;">btmg_le_whitelist_clear</td><td style="text-align:left;">将 controller 中的白名单清空</td></tr><tr><td style="text-align:left;">btmg_le_get_connected_num</td><td style="text-align:left;">获取已连接设备数量</td></tr><tr><td style="text-align:left;">btmg_le_get_connected_list</td><td style="text-align:left;">获取已连接设备列表</td></tr></tbody></table><h4 id="gatt-server-api-调用流程" tabindex="-1"><a class="header-anchor" href="#gatt-server-api-调用流程" aria-hidden="true">#</a> GATT Server API 调用流程</h4><p>GATT Server 功能的使用示例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ctype.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bt_manager.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REASON_TO_STR</span><span class="token expression"><span class="token punctuation">(</span>def<span class="token punctuation">)</span>                                                                         </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">case</span> BTMG_BLE_</span><span class="token punctuation">##</span><span class="token expression">def<span class="token operator">:</span>                                                                           </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">return</span> #def</span></span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">btcli_le_disconect_reason_to_str</span><span class="token punctuation">(</span><span class="token class-name">gattc_disconnect_reason_t</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>STATUS_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>AUTHENTICATION_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>CONNECTION_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>REMOTE_USER_TERMINATED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>LOCAL_HOST_TERMINATED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>LMP_RESPONSE_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>FAILED_TO_BE_ESTABLISHED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REASON_TO_STR</span><span class="token punctuation">(</span>UNKNOWN_OTHER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;UNKNOWN_OTHER_ERROR&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">btcli_addr_from_str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">btmg_addr_t</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> tmp<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">17U</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        addr<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> addr<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">char2hex</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        addr<span class="token operator">-&gt;</span>val<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">|=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">btcli_le_addr_from_str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token class-name">btmg_le_addr_t</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>

    err <span class="token operator">=</span> <span class="token function">btcli_addr_from_str</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;(public)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addr<span class="token operator">-&gt;</span>type <span class="token operator">=</span> BTMG_LE_PUBLIC_ADDRESS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;(random)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addr<span class="token operator">-&gt;</span>type <span class="token operator">=</span> BTMG_LE_RANDOM_ADDRESS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;public-id&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;(public-id)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addr<span class="token operator">-&gt;</span>type <span class="token operator">=</span> BTMG_LE_PUBLIC_ADDRESS_ID<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;random-id&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;(random-id)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addr<span class="token operator">-&gt;</span>type <span class="token operator">=</span> BTMG_LE_RANDOM_ADDRESS_ID<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">btcli_le_addr_to_str</span><span class="token punctuation">(</span><span class="token class-name">btmg_le_addr_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> type<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> BTMG_LE_RANDOM_ADDRESS<span class="token operator">:</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_LE_PUBLIC_ADDRESS<span class="token operator">:</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_LE_RANDOM_ADDRESS_ID<span class="token operator">:</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;random-id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_LE_PUBLIC_ADDRESS_ID<span class="token operator">:</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;public-id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">snprintk</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;0x%02x&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">snprintk</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">&quot;%02X:%02X:%02X:%02X:%02X:%02X (%s)&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    addr<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_ble_scan_cb</span><span class="token punctuation">(</span><span class="token class-name">le_scan_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">btcli_le_addr_to_str</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;[DEVICE]: %s, AD evt type %u, RSSI %i %s\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>adv_type<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>rssi<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_ble_connection_cb</span><span class="token punctuation">(</span><span class="token class-name">le_connection_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">btcli_le_addr_to_str</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>role <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc connect success,id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_CONNECT_FAIL<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc connect failed,id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc disconnected, reason= %s, id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span>
                    <span class="token function">btcli_le_disconect_reason_to_str</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>reason<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gatts connected,id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_CONNECT_FAIL<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gatts connect failed,id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>status <span class="token operator">==</span> LE_DISCONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gatts disconnected, reason[0x%02x]= %s, id=[%d] %s\\n&quot;</span><span class="token punctuation">,</span>
                    data<span class="token operator">-&gt;</span>reason <span class="token punctuation">,</span><span class="token function">btcli_le_disconect_reason_to_str</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>reason<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_scan</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_le_scan_param_t</span> scan_param <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        scan_param<span class="token punctuation">.</span>scan_type <span class="token operator">=</span> LE_SCAN_TYPE_ACTIVE<span class="token punctuation">;</span>
        scan_param<span class="token punctuation">.</span>scan_interval <span class="token operator">=</span> <span class="token number">0x0320</span><span class="token punctuation">;</span>
        scan_param<span class="token punctuation">.</span>scan_window <span class="token operator">=</span> <span class="token number">0x0190</span><span class="token punctuation">;</span>
        scan_param<span class="token punctuation">.</span>filter_duplicate <span class="token operator">=</span> LE_SCAN_DUPLICATE_DISABLE<span class="token punctuation">;</span>
        scan_param<span class="token punctuation">.</span>filter_policy <span class="token operator">=</span> LE_SCAN_FILTER_POLICY_ALLOW_ALL<span class="token punctuation">;</span>
        scan_param<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Use default scan parameters\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> <span class="token function">btmg_le_scan_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;LE scan stop failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> err<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;LE scan stopped successfully\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;passive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>scan_type <span class="token operator">=</span> LE_SCAN_TYPE_PASSIVE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;dups&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>filter_duplicate <span class="token operator">=</span> LE_SCAN_DUPLICATE_DISABLE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;nodups&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>filter_duplicate <span class="token operator">=</span> LE_SCAN_DUPLICATE_ENABLE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;wl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>filter_policy <span class="token operator">=</span> LE_SCAN_FILTER_POLICY_ONLY_WLIST<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;active&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>scan_type <span class="token operator">=</span> LE_SCAN_TYPE_ACTIVE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scan_param<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;int=0x&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            scan_param<span class="token punctuation">.</span>scan_interval <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;scan interval 0x%x\\n&quot;</span><span class="token punctuation">,</span> scan_param<span class="token punctuation">.</span>scan_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;win=0x&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            scan_param<span class="token punctuation">.</span>scan_window <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;scan window 0x%x\\n&quot;</span><span class="token punctuation">,</span> scan_param<span class="token punctuation">.</span>scan_window<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> <span class="token function">btmg_le_scan_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scan_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;LE scan start failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;LE scan started!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_adv</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token keyword">int</span> start_adv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">btmg_adv_scan_rsp_data_t</span> btmg_adv_data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">btmg_adv_scan_rsp_data_t</span> btmg_scan_data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            start_adv <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Disable Advertising failed,(err %d)\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> err<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Advertising stopped\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;adv=&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            btmg_adv_data<span class="token punctuation">.</span>data_len <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> btmg_adv_data<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
                                             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>btmg_adv_data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>btmg_adv_data<span class="token punctuation">.</span>data_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No data set\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;scan=&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            btmg_scan_data<span class="token punctuation">.</span>data_len <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span> btmg_scan_data<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
                                              <span class="token keyword">sizeof</span><span class="token punctuation">(</span>btmg_scan_data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>btmg_scan_data<span class="token punctuation">.</span>data_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No data set\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">btmg_le_set_adv_scan_rsp_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btmg_adv_data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>btmg_scan_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>start_adv <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_le_set_adv_param</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        err <span class="token operator">=</span> <span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Advertising started\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Bluetooth Local ble Name: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">btmg_le_get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_le_set_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to set ble name %s (err %d)\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_connect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">bt_addr_le_t</span> addr<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">bt_addr_le_from_str</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid peer address (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">btmg_le_addr_t</span> peer<span class="token punctuation">;</span>
    peer<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_LE_RANDOM_ADDRESS<span class="token punctuation">;</span>

    <span class="token class-name">btmg_le_conn_param_t</span> conn_param<span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>min_conn_interval <span class="token operator">=</span> <span class="token number">0x0010</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>max_conn_interval <span class="token operator">=</span> <span class="token number">0x0020</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>slave_latency <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>conn_sup_timeout <span class="token operator">=</span> <span class="token number">0x0050</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>peer<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>val<span class="token punctuation">,</span> addr<span class="token punctuation">.</span>a<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span>type <span class="token operator">==</span> BT_ADDR_LE_PUBLIC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        peer<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_LE_PUBLIC_ADDRESS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span>type <span class="token operator">==</span> BT_ADDR_LE_RANDOM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        peer<span class="token punctuation">.</span>type <span class="token operator">=</span> BTMG_LE_RANDOM_ADDRESS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;lat=&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            conn_param<span class="token punctuation">.</span>slave_latency <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;conn latency 0x%x\\n&quot;</span><span class="token punctuation">,</span> conn_param<span class="token punctuation">.</span>slave_latency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;to=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            conn_param<span class="token punctuation">.</span>conn_sup_timeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;conn timeout 0x%x\\n&quot;</span><span class="token punctuation">,</span> conn_param<span class="token punctuation">.</span>conn_sup_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;min=&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            conn_param<span class="token punctuation">.</span>min_conn_interval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;conn interval_min 0x%x\\n&quot;</span><span class="token punctuation">,</span> conn_param<span class="token punctuation">.</span>min_conn_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strncmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;max=&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span> num<span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">cmd_sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            conn_param<span class="token punctuation">.</span>max_conn_interval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;conn interval_max 0x%x\\n&quot;</span><span class="token punctuation">,</span> conn_param<span class="token punctuation">.</span>max_conn_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> <span class="token function">btmg_le_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>peer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>conn_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;ble connect failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_disconnect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> default_conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>default_conn_id <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">btmg_le_disconnect</span><span class="token punctuation">(</span>default_conn_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// bt_addr_le_t addr;</span>
        <span class="token comment">// if (argc &lt; 3) {</span>
        <span class="token comment">//     shell_help(shell);</span>
        <span class="token comment">//     return SHELL_CMD_HELP_PRINTED;</span>
        <span class="token comment">// }</span>
        <span class="token comment">// err = bt_addr_le_from_str(argv[1], argv[2], &amp;addr);</span>
        <span class="token comment">// if (err) {</span>
        <span class="token comment">//     shell_error(shell, &quot;Invalid peer address (err %d)&quot;, err);</span>
        <span class="token comment">//     return err;</span>
        <span class="token comment">// }</span>
        <span class="token comment">// err = btmg_le_disconnect(0, 0);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_connections</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dev_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">btmg_le_get_connected_num</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">gattc_connected_list_para_t</span> param<span class="token punctuation">[</span>dev_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">btmg_le_get_connected_list</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dev_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btcli_le_addr_to_str</span><span class="token punctuation">(</span>param<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;DEVICE[%s],conn_id[%d]\\n&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> param<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_WHITELIST<span class="token punctuation">)</span></span></span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_wl_add</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">btmg_le_addr_t</span> addr<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btcli_le_addr_from_str</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid peer address (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_le_whitelist_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Add to whitelist failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_wl_rem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">btmg_le_addr_t</span> addr<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btcli_le_addr_from_str</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid peer address (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_le_white_list_remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Remove from whitelist failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_wl_clear</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>

    err <span class="token operator">=</span> <span class="token function">btmg_le_whitelist_clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Clearing whitelist failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_FAIL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">blecli_ble_wl_connect</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">btmg_le_conn_param_t</span> conn_param<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    conn_param<span class="token punctuation">.</span>min_conn_interval <span class="token operator">=</span> <span class="token number">0x0018</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>max_conn_interval <span class="token operator">=</span> <span class="token number">0x0028</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>slave_latency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>conn_sup_timeout <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">btmg_le_connect_auto_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Auto connect failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">btmg_le_connect_auto_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Auto connect stop failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">//!defined(CONFIG_BT_WHITELIST)</span></span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_auto_conn</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">btmg_le_addr_t</span> addr<span class="token punctuation">;</span>
    <span class="token class-name">btmg_le_conn_param_t</span> conn_param<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    conn_param<span class="token punctuation">.</span>min_conn_interval <span class="token operator">=</span> <span class="token number">0x0018</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>max_conn_interval <span class="token operator">=</span> <span class="token number">0x0028</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>slave_latency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    conn_param<span class="token punctuation">.</span>conn_sup_timeout <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    err <span class="token operator">=</span> <span class="token function">btmg_addr_le_from_str</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid peer address (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">btmg_le_set_auto_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>conn_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">btmg_le_set_auto_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>conn_param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">btmg_le_set_auto_connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_SMP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_BREDR<span class="token punctuation">)</span></span></span>
<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_get_sec</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> sec <span class="token operator">=</span> <span class="token function">btmg_le_get_security</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;conn_id=%d, security=%d\\n&quot;</span><span class="token punctuation">,</span> conn_id<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_set_sec</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sec<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    sec <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ret <span class="token operator">=</span> <span class="token function">btmg_le_set_security</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;conn_id=%d, security=%d failed\\n&quot;</span><span class="token punctuation">,</span> conn_id<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;conn_id=%d, security=%d success\\n&quot;</span><span class="token punctuation">,</span> conn_id<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> ble_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;scan&quot;</span><span class="token punctuation">,</span>           btcli_ble_scan<span class="token punctuation">,</span>          <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;on/off/passive&gt; [int=0x0100] [win=0x0100] [silent]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;adv&quot;</span><span class="token punctuation">,</span>            btcli_ble_adv<span class="token punctuation">,</span>           <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;on/off&gt; [adv=020106] [scan=]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>           btcli_ble_name<span class="token punctuation">,</span>          <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[name]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span>        btcli_ble_connect<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;address: XX:XX:XX:XX:XX:XX&gt; &lt;type: (public|random)&gt; [min=] [max=] [to=]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span>     btcli_ble_disconnect<span class="token punctuation">,</span>    <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[none]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;connections&quot;</span><span class="token punctuation">,</span>    btcli_ble_connections<span class="token punctuation">,</span>   <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[none]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_WHITELIST<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">{</span> <span class="token string">&quot;wl_add&quot;</span><span class="token punctuation">,</span>         btcli_ble_wl_add<span class="token punctuation">,</span>        <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;address: XX:XX:XX:XX:XX:XX&gt; &lt;type: (public|random)&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;wl_rem&quot;</span><span class="token punctuation">,</span>         btcli_ble_wl_rem<span class="token punctuation">,</span>        <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;address: XX:XX:XX:XX:XX:XX&gt; &lt;type: (public|random)&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;wl_clear&quot;</span><span class="token punctuation">,</span>       btcli_ble_wl_clear<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[none]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;wl_connect&quot;</span><span class="token punctuation">,</span>     btcli_ble_connect<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;on, off&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">{</span> <span class="token string">&quot;auto_conn&quot;</span><span class="token punctuation">,</span>      btcli_ble_auto_conn<span class="token punctuation">,</span>     <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;address: XX:XX:XX:XX:XX:XX&gt; &lt;type: (public|random)&gt; [value:on,off]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_SMP<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_BT_BREDR<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">{</span> <span class="token string">&quot;get_sec&quot;</span><span class="token punctuation">,</span>        btcli_ble_get_sec<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;set_sec&quot;</span><span class="token punctuation">,</span>        btcli_ble_set_sec<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;security level: &gt;=1 &gt; [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>           btcli_ble_help<span class="token punctuation">,</span>          <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli ble help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>ble_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>ble_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_ble</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> ble_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>ble_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cmd_util.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ctype.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bt_manager.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatt_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">btcli_print_chrc_props</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> properties<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Properties: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_BROADCAST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[bcast] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_READ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[read] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[write] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_WRITE_WITHOUT_RESP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[write without rsp] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_NOTIFY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[notify] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_INDICATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[indicate] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_AUTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[auth] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_EXT_PROP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[ext prop] &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token class-name">btmg_uuid_t</span> <span class="token operator">*</span>uuid<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> tmp1<span class="token punctuation">,</span> tmp5<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> tmp0<span class="token punctuation">,</span> tmp2<span class="token punctuation">,</span> tmp3<span class="token punctuation">,</span> tmp4<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>uuid<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> BTMG_UUID_16<span class="token operator">:</span>
        <span class="token function">snprintk</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">&quot;%04x&quot;</span><span class="token punctuation">,</span> uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u16<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_UUID_32<span class="token operator">:</span>
        <span class="token function">snprintk</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">&quot;%08x&quot;</span><span class="token punctuation">,</span> uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u32<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_UUID_128<span class="token operator">:</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uuid<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>u128<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">snprintk</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">&quot;%08x-%04x-%04x-%04x-%08x%04x&quot;</span><span class="token punctuation">,</span> tmp5<span class="token punctuation">,</span> tmp4<span class="token punctuation">,</span> tmp3<span class="token punctuation">,</span> tmp2<span class="token punctuation">,</span> tmp1<span class="token punctuation">,</span> tmp0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gattc_dis_att_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_dis_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> uuid_str1<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> uuid_str2<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> BTMG_DIS_PRIMARY_SERVER<span class="token operator">:</span>
    <span class="token keyword">case</span> BTMG_DIS_SECONDARY_SERVER<span class="token operator">:</span>
    <span class="token keyword">case</span> BTMG_DIS_INCLUDE_SERVER<span class="token operator">:</span>
        <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid_str1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uuid_str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>server_uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid_str2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uuid_str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;start_handle [0x%04x]------------end_handle [0x%04x]\\n&quot;</span><span class="token punctuation">,</span>
                                    data<span class="token operator">-&gt;</span>start_handle<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>end_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-------|--------------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | Service declaration[%s] | %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>start_handle<span class="token punctuation">,</span> uuid_str1<span class="token punctuation">,</span>
            data<span class="token operator">-&gt;</span>type <span class="token operator">==</span> BTMG_DIS_PRIMARY_SERVER <span class="token operator">?</span> <span class="token string">&quot;PRIMARY_SERVER&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;SECONDARY_SERVER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | Service uuid[%s]        | %s\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>start_handle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> uuid_str2<span class="token punctuation">,</span>
                <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>uuid_str2<span class="token punctuation">,</span> <span class="token string">&quot;1800&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token string">&quot;Generic Access&quot;</span> <span class="token operator">:</span>
                <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>uuid_str2<span class="token punctuation">,</span> <span class="token string">&quot;1801&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">&quot;Generic Attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unknow Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_DIS_CHARACTERISTIC<span class="token operator">:</span>
        <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid_str1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uuid_str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>char_uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid_str2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uuid_str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-------|--------------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | Characteristic declaration[%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>char_handle<span class="token punctuation">,</span> uuid_str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | Characteristic [%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value_handle<span class="token punctuation">,</span> uuid_str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_NOTIFY <span class="token operator">|</span> data<span class="token operator">-&gt;</span>properties <span class="token operator">&amp;</span> BT_GATT_CHRC_INDICATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | CCCD[2902]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value_handle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">btcli_print_chrc_props</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> BTMG_DIS_ATTRIBUTE<span class="token operator">:</span>
        <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid_str1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>uuid_str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-------|--------------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%04x | Attribute uuid [%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">,</span> uuid_str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gattc_notify_indicate_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_notify_indicate_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> recv_data<span class="token punctuation">[</span>data<span class="token operator">-&gt;</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    recv_data<span class="token punctuation">[</span>data<span class="token operator">-&gt;</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;subscribe recv [handle=0x%04X][len=%d][data:%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value_handle<span class="token punctuation">,</span>
              data<span class="token operator">-&gt;</span>length<span class="token punctuation">,</span> recv_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gattc_read_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_read_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token operator">-&gt;</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc read failed:(0x%02x),handle[0x%04x]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>att_ecode<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\ngattc read handle[0x%04x],&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;: 0 bytes\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; [len=%d],value: &quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gattc_write_cb</span><span class="token punctuation">(</span><span class="token class-name">gattc_write_cb_para_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc write OK,handle[0x%04x]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;gattc write failed:(0x%02x), handle[0x%04x]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>att_ecode<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gatts_get_db_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_get_db_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>uuid<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">btcli_uuid_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>uuid_value<span class="token punctuation">)</span><span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[handle=0x%04X],[uuid=%s][uuid2=%s][perm=%d]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">,</span> str<span class="token punctuation">,</span> str2<span class="token punctuation">,</span>
              data<span class="token operator">-&gt;</span>perm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gatts_char_read_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_read_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> readdata<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;read request received&quot;</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>out_data<span class="token punctuation">,</span> readdata<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>readdata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token operator">-&gt;</span>out_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>readdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;receive char read: [conn_id=%d][handle=0x%04X],[data:%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">,</span> readdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gatts_char_write_req_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_char_write_req_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> recv_data<span class="token punctuation">[</span>data<span class="token operator">-&gt;</span>value_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    recv_data<span class="token punctuation">[</span>data<span class="token operator">-&gt;</span>value_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;receive char write: [conn_id=%d][handle=0x%04X][len=%d][value=%s]\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>conn_id<span class="token punctuation">,</span>
              data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>value_len<span class="token punctuation">,</span>  recv_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">btcli_gatts_ccc_cfg_cb</span><span class="token punctuation">(</span><span class="token class-name">gatts_ccc_cfg_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Notifications and indications disabled, characteristics handle:%#x\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Notifications enabled, characteristics handle:%#x\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Indications enabled, characteristics handle:%#x\\n&quot;</span><span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>attr_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gattc_discover</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">btmg_uuid_t</span> <span class="token operator">*</span>uuid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dis_tpye <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> start_handle <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> end_handle <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dis_tpye <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;char&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dis_tpye <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dis_tpye <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis_tpye <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_gattc_discover_all_services</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> start_handle<span class="token punctuation">,</span> end_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis_tpye <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_gattc_discover_primary_services</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> start_handle<span class="token punctuation">,</span> end_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis_tpye <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_gattc_discover_characteristic</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis_tpye <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">btmg_gattc_discover_descriptor</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gattc_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> gatt_write_buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>gatt_write_buf<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No data set \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_gattc_write</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Write failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gattc_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_gattc_read</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;Read failed (err %d)\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gattc_subscribe</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bool is_indicate <span class="token operator">=</span> false<span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_gattc_subscribe</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gattc_unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> <span class="token function">btmg_gattc_unsubscribe</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatts_show_db</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">btmg_gatt_get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatts_notify</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> gatt_write_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>gatt_write_buf<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No data set\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">btmg_gatts_notify</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatts_indicate</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> handle<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> gatt_write_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param number %d\\n&quot;</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    handle <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmd_strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>gatt_write_buf<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        len <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gatt_write_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">CMD_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;No data set\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> CMD_STATUS_INVALID_ARG<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn_id <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_gatts_notify</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> gatt_write_buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatt_exchange_mtu</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">btmg_le_gatt_mtu_exchange</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;conn %d mtu_exchange \\n&quot;</span><span class="token punctuation">,</span> conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatt_get_mtu</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mtu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> conn_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    argc <span class="token operator">=</span> <span class="token function">cmd_parse_argv</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        conn_id <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    mtu <span class="token operator">=</span> <span class="token function">btmg_le_conn_get_mtu</span><span class="token punctuation">(</span>conn_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CMD_DBG</span><span class="token punctuation">(</span><span class="token string">&quot;Get conn:%d,MTU=%d\\n&quot;</span><span class="token punctuation">,</span> conn_id<span class="token punctuation">,</span> mtu<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> CMD_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cmd_data</span> gatt_cmds<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;discover&quot;</span><span class="token punctuation">,</span>       btcli_gattc_discover<span class="token punctuation">,</span>     <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[type: service, char, desc] [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span>          btcli_gattc_write<span class="token punctuation">,</span>        <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;handle&gt; &lt;data&gt; [string] [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span>           btcli_gattc_read<span class="token punctuation">,</span>         <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;handle&gt; [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;subscribe&quot;</span><span class="token punctuation">,</span>      btcli_gattc_subscribe<span class="token punctuation">,</span>    <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;char_handle&gt; [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;unsubscribe&quot;</span><span class="token punctuation">,</span>    btcli_gattc_unsubscribe<span class="token punctuation">,</span>  <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;char_handle&gt; [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">,</span>           btcli_gatts_show_db<span class="token punctuation">,</span>      <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[none]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;notify&quot;</span><span class="token punctuation">,</span>         btcli_gatts_notify<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;handle&gt; &lt;data&gt; [string] [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;indicate&quot;</span><span class="token punctuation">,</span>       btcli_gatts_indicate<span class="token punctuation">,</span>     <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;handle&gt; &lt;data&gt; [string] [conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;exchange_mtu&quot;</span><span class="token punctuation">,</span>   btcli_gatt_exchange_mtu<span class="token punctuation">,</span>  <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;get_mtu&quot;</span><span class="token punctuation">,</span>        btcli_gatt_get_mtu<span class="token punctuation">,</span>       <span class="token function">CMD_DESC</span><span class="token punctuation">(</span><span class="token string">&quot;[conn_id]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span>           btcli_gatt_help<span class="token punctuation">,</span>          <span class="token function">CMD_DESC</span><span class="token punctuation">(</span>CMD_HELP_DESC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* btcli gatt help */</span>
<span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatt_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_help_exec</span><span class="token punctuation">(</span>gatt_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>gatt_cmds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">cmd_status</span> <span class="token function">btcli_gatt</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cmd_exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> gatt_cmds<span class="token punctuation">,</span> <span class="token function">cmd_nitems</span><span class="token punctuation">(</span>gatt_cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="初始化-5" tabindex="-1"><a class="header-anchor" href="#初始化-5" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设 gatt server 的回调函数；</li><li>调用 btmg_core_init 初始化 btmanager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_GATT_SERVER) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，可以获取蓝牙的开关状态；</li></ol><h5 id="注册-service" tabindex="-1"><a class="header-anchor" href="#注册-service" aria-hidden="true">#</a> 注册 SERVICE</h5><p>正常打开蓝牙后，紧接着注册 service，可以参考 ble_gatt_register_service 的写法，大致步骤如下：</p><ol><li>通过 btmg_gatt_attr_create(int num_attr) 创建本地数据库，参数指支持的 attribute 最大数量；</li><li>调用 btmg_gatt_attr_primary_service 创建一个 service；</li><li>接着调用 btmg_gatt_attr_characteristic 添加 characteristic 到步骤 2 的 service 中；</li><li>如 果 characteristic 需 要 添 加 Client Characteristic Configuration Descriptor， 就 在btmg_gatt_attr_characteristic 后面调用 btmg_gatt_attr_ccc；</li><li>如果需要增加新的 service，调用需要再次 btmg_gatt_attr_primary_service，即btmg_gatt_attr_primary_service 函数是不同 service 的交界；</li><li>在设置完所有需要添加的服务后，最后通过 btmg_gatt_register_service 注册到协议栈中；例如以下的写法，包含两个 service：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>db <span class="token operator">=</span> btmg_gatt_attr_primary_service <span class="token comment">//service1 start</span>
btmg_gatt_attr_characteristic
btmg_gatt_attr_ccc
btmg_gatt_attr_characteristic <span class="token comment">//service1 end</span>
btmg_gatt_attr_primary_service <span class="token comment">//service2 start</span>
btmg_gatt_attr_characteristic <span class="token comment">//service2 end</span>
<span class="token function">btmg_gatt_register_service</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="广播" tabindex="-1"><a class="header-anchor" href="#广播" aria-hidden="true">#</a> 广播</h5><p>打开广播可以参考 btcli.c 的 ble_advertise_on：</p><ol><li>调用 btmg_le_set_adv_param 配置广播参数，扫描参数请根据实际情况设置；</li><li>调用 btmg_le_set_adv_scan_rsp_data 设置广播数据或扫描相应数据；</li><li>调用 btmg_le_enable_adv(true) 开启广播；</li><li>如需关闭广播调用 btmg_le_enable_adv(false);</li></ol><h5 id="连接-1" tabindex="-1"><a class="header-anchor" href="#连接-1" aria-hidden="true">#</a> 连接</h5><p>GATT Server 设备在开启 BLE 广播后，可以被 GATT Client 设备扫描连接。连接状态通过 btmg_gatts_cb.conn_cb 上报。</p><p>可以参考 btcli_ble_connection_cb。</p><h5 id="数据交互" tabindex="-1"><a class="header-anchor" href="#数据交互" aria-hidden="true">#</a> 数据交互</h5><ol><li>收到对端设备的读请求，会触发 btmg_gatts_cb.char_read_req_cb 回调；</li><li>收到对端设备的写请求，会触发 btmg_gatts_cb.char_write_req_cb 回调；</li><li>收到对端设备对 ccc 的配置，会触发 btmg_gatts_cb.ccc_cfg_cb 回调；（1）对方配置使能 Indication 后，可以调用 btmg_gatts_indicate 发送指示；（2）对方配置使能 Notification 后，可以调用 btmg_gatts_notify 发送通知；</li></ol><h5 id="反初始化-3" tabindex="-1"><a class="header-anchor" href="#反初始化-3" aria-hidden="true">#</a> 反初始化</h5><p>反初始化时，需要把已经注册的 service 注销、关闭广播、销毁前面创建的 Database：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>btmg_gatt_unregister_service
<span class="token function">btmg_le_enable_adv</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
btmg_gatt_attr_destory<span class="token punctuation">;</span>
<span class="token function">btmg_adapter_enable</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_core_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">btmg_unregister_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gatt-client" tabindex="-1"><a class="header-anchor" href="#gatt-client" aria-hidden="true">#</a> GATT Client</h3><h4 id="gatt-client-api" tabindex="-1"><a class="header-anchor" href="#gatt-client-api" aria-hidden="true">#</a> GATT Client API</h4><p>列出开发 GATT Client 功能所需的 API，包含 BLE 基础接口</p><table><thead><tr><th style="text-align:left;">API 接口</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">btmg_gattc_discover_all_services</td><td style="text-align:left;">从指定 handle 范围中发现所有 service 或指定UUID 服务；发现的结果通过btmg_gattc_cb.dis_att_cb 返回</td></tr><tr><td style="text-align:left;">btmg_gattc_discover_primary_services</td><td style="text-align:left;">从指定 handle 范围中发现所有 primary service或指定 UUID 服务；发现的结果通过btmg_gattc_cb.dis_att_cb 返回</td></tr><tr><td style="text-align:left;">btmg_gattc_discover_characteristic</td><td style="text-align:left;">发现所有 characteristic；发现的结果通过btmg_gattc_cb.dis_att_cb 返回</td></tr><tr><td style="text-align:left;">btmg_gattc_discover_descriptor</td><td style="text-align:left;">发现所有 descriptor；发现的结果通过btmg_gattc_cb.dis_att_cb 返回</td></tr><tr><td style="text-align:left;">btmg_gattc_read</td><td style="text-align:left;">读取 GATT Server 的 Characteristic Value；读取结果通过 btmg_gattc_cb.read_cb 获取</td></tr><tr><td style="text-align:left;">btmg_gattc_read_long</td><td style="text-align:left;">如果 GATT Server 的 Characteristic Value 长度太长，可以通过此方法读取；读取结果通过btmg_gattc_cb.read_cb 获取</td></tr><tr><td style="text-align:left;">btmg_gattc_write</td><td style="text-align:left;">写数据到 GATT Server 的 Characteristic Value，Server 需要 response，response 通过btmg_gattc_cb.write_cb 上报</td></tr><tr><td style="text-align:left;">btmg_gattc_write_long</td><td style="text-align:left;">如果写入的数据太长，可以通过此函数，Server 也需要 response，response 通过 btmg_gattc_cb.write_cb 上报</td></tr><tr><td style="text-align:left;">btmg_gattc_write_without_response</td><td style="text-align:left;">写数据到 GATT Server 的 Characteristic Value，Server 不需要 response</td></tr><tr><td style="text-align:left;">btmg_gattc_write_long_without_response</td><td style="text-align:left;">如果写入的数据太长，可以通过此函数，Server 不需要 response</td></tr><tr><td style="text-align:left;">btmg_gattc_subscribe</td><td style="text-align:left;">注册 notify 或 indicate，协议栈底层已经包含写 CCC 的操作，注册完成后，Server 端才可以对 Client 通知或者指示</td></tr><tr><td style="text-align:left;">btmg_gattc_unsubscribe</td><td style="text-align:left;">注销 notify 或 indicate</td></tr><tr><td style="text-align:left;">btmg_le_scan_start</td><td style="text-align:left;">开始 BLE 扫描，扫描结果通过btmg_gattc_cb.le_scan_cb 上报</td></tr><tr><td style="text-align:left;">btmg_le_scan_stop</td><td style="text-align:left;">停止 BLE 扫描</td></tr><tr><td style="text-align:left;">btmg_le_set_chan_map</td><td style="text-align:left;">设置 channel map</td></tr><tr><td style="text-align:left;">btmg_le_get_connected_num</td><td style="text-align:left;">获取已连接设备数量</td></tr><tr><td style="text-align:left;">btmg_le_get_connected_list</td><td style="text-align:left;">获取已连接设备列表</td></tr><tr><td style="text-align:left;">btmg_le_conn_param_update</td><td style="text-align:left;">更新 BLE 连接参数</td></tr><tr><td style="text-align:left;">btmg_le_connect</td><td style="text-align:left;">指定设备发起 BLE 连接</td></tr><tr><td style="text-align:left;">btmg_le_disconnect</td><td style="text-align:left;">断开 BLE 设备连接</td></tr><tr><td style="text-align:left;">btmg_le_unpair</td><td style="text-align:left;">取消 BLE 配对</td></tr><tr><td style="text-align:left;">btmg_le_connect_auto_start</td><td style="text-align:left;">自动连接白名单中的对端 BLE 设备</td></tr><tr><td style="text-align:left;">btmg_le_connect_auto_stop</td><td style="text-align:left;">停止自动连接</td></tr><tr><td style="text-align:left;">btmg_le_set_auto_connect</td><td style="text-align:left;">自动连接到指定的对端 BLE 设备，启用此功能后，每次 BLE 设备断开与对端设备的连接时，若收到对端 BLE 设备的广播包，则将重新建立连接。在主动扫描期间需要禁止此功能</td></tr><tr><td style="text-align:left;">btmg_le_get_security</td><td style="text-align:left;">获取当前连接链路的安全等级</td></tr><tr><td style="text-align:left;">btmg_le_set_security</td><td style="text-align:left;">设置连接链路的安全等级</td></tr><tr><td style="text-align:left;">btmg_le_smp_passkey_entry</td><td style="text-align:left;">输入 passkey 对配对绑定进行回复</td></tr><tr><td style="text-align:left;">btmg_le_smp_cancel</td><td style="text-align:left;">取消正在进行的配对绑定流程</td></tr><tr><td style="text-align:left;">btmg_le_smp_passkey_confirm</td><td style="text-align:left;">如果确认了 passkey 与用户匹配，则使用此函数进行回复</td></tr><tr><td style="text-align:left;">btmg_le_smp_pairing_confirm</td><td style="text-align:left;">如果用户对配对绑定进行确认，则用此函数进行回复</td></tr><tr><td style="text-align:left;">btmg_le_gatt_mtu_exchange</td><td style="text-align:left;">交换 MTU</td></tr><tr><td style="text-align:left;">btmg_le_conn_get_mtu</td><td style="text-align:left;">获取当前连接协商后使用的 MTU 大小</td></tr></tbody></table><h4 id="gatt-client-api-调用流程" tabindex="-1"><a class="header-anchor" href="#gatt-client-api-调用流程" aria-hidden="true">#</a> GATT Client API 调用流程</h4><p>GATT Client 功能的使用示例</p><h5 id="初始化-6" tabindex="-1"><a class="header-anchor" href="#初始化-6" aria-hidden="true">#</a> 初始化</h5><ol><li>总回调结构体是 btmg_callback_t，先设 gatt client 的回调函数；</li><li>调用 btmg_core_init 初始化 bt_manager;</li><li>调用 btmg_register_callback 注册步骤 1 设置好的回调函数；</li><li>调用 btmg_set_profile(BTMG_GATT_CLIENT) 使能蓝牙 Profile；</li><li>调用 btmg_adapter_enable(true) 使能蓝牙；</li><li>蓝牙使能成功后触发 state_cb，可以获取蓝牙的开关状态；</li><li>可以根据需求使用 btmg_le_conn_param_update 更新连接参数；</li></ol><h5 id="扫描连接-2" tabindex="-1"><a class="header-anchor" href="#扫描连接-2" aria-hidden="true">#</a> 扫描连接</h5><p>正常打开蓝牙后，可以扫描连接</p><ol><li>调用 btmg_le_scan_start 开始扫描；</li><li>扫描到设备后，调用 btmg_le_scan_stop 停止扫描；</li><li>获取到对方 mac 地址后，调用 btmg_le_connect 发起连接；</li><li>支持连接多个设备，可以通过 btmg_le_get_connected_num和 btmg_le_get_connected_list 获取设备列表；</li></ol><h5 id="数据通信" tabindex="-1"><a class="header-anchor" href="#数据通信" aria-hidden="true">#</a> 数据通信</h5><ol><li>可以使用 btmg_gattc_discover_primary_services 或者 btmg_gattc_discover_characteristic等接口获取 Server 端有哪些可以读写的 Characteristic Value；</li><li>通过 btmg_gattc_read 或者 btmg_gattc_read_long 接口指定 Characteristic Value handle 读取 Characteristic Value；</li><li>通过 btmg_gattc_write 或者 btmg_gattc_write_long 接口指定 Characteristic Value handle 写入 Characteristic Value；</li><li>通过 btmg_gattc_subscribe 注册 notify 或 indicate，当收到 Server 的 notify 或 indicate，会通过 btmg_gattc_cb.notify_indicate_cb 上报；</li></ol><h2 id="btcli-使用指南" tabindex="-1"><a class="header-anchor" href="#btcli-使用指南" aria-hidden="true">#</a> btcli 使用指南</h2><h3 id="命令简介" tabindex="-1"><a class="header-anchor" href="#命令简介" aria-hidden="true">#</a> 命令简介</h3><p>目前 RTOS 平台上 btmanager 的测试 demo 称为 btcli，支持 a2dp 、hfp、spp、gatt 等功能的测试验证。通过 btcli 或 btcli help 可以查看命令列表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>c906<span class="token operator">&gt;</span>btcli
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> init <span class="token operator">:</span> Initialize bt adater
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> deinit <span class="token operator">:</span> DeInitialize bt adater
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> scan_mode <span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">~</span><span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">0</span>‑NONE<span class="token punctuation">,</span><span class="token number">1</span>‑page scan<span class="token punctuation">,</span><span class="token number">2</span>‑inquiry scan<span class="token operator">&amp;</span>page scan
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> scan <span class="token operator">:</span> <span class="token operator">&lt;</span>on<span class="token operator">/</span>off<span class="token operator">&gt;</span><span class="token operator">:</span> device discovery
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> scan_list <span class="token operator">:</span> list available devices
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> io_cap <span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">~</span><span class="token number">3</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">0</span>‑displayonly<span class="token punctuation">,</span><span class="token number">1</span>‑displayyesno<span class="token punctuation">,</span><span class="token number">2</span>‑keyboardonly<span class="token punctuation">,</span><span class="token number">3</span>‑noinputnooutput
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> get_dev_name <span class="token operator">:</span> get remote device name
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> get_name <span class="token operator">:</span> get bt adapter name
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> set_name <span class="token operator">:</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token operator">:</span>set bt adapter name
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> get_mac <span class="token operator">:</span> get bt adapter address
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> pincode <span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">0000</span><span class="token operator">~</span><span class="token number">9999</span><span class="token operator">&gt;</span><span class="token operator">:</span>enter pincode
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> passkey <span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">000000</span><span class="token operator">~</span><span class="token number">999999</span><span class="token operator">&gt;</span><span class="token operator">:</span>enter passkey
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> passkey_confirm <span class="token operator">:</span> confirm passkey
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> pairing_confirm <span class="token operator">:</span> confirm pairing
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> paired_list <span class="token operator">:</span> list paired devices
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> unpair_dev <span class="token operator">:</span> unpair bond devices
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> a2dp_src <span class="token operator">:</span> support paly songs and other functions<span class="token punctuation">,</span>use a2dp_src help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> a2dp_snk <span class="token operator">:</span> support receive audio<span class="token punctuation">,</span> use a2dp_snk help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> avrc <span class="token operator">:</span> support audio playback control and other functions<span class="token punctuation">,</span> use avrc help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> hfp <span class="token operator">:</span> support answering<span class="token punctuation">,</span> hanging up<span class="token punctuation">,</span> rejecting<span class="token punctuation">,</span> voice dialing and other functions<span class="token punctuation">,</span> use hfp help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> spps <span class="token operator">:</span> support data transmission<span class="token punctuation">,</span> use spps help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> sppc <span class="token operator">:</span> support data transmission<span class="token punctuation">,</span> use sppc help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> ble <span class="token operator">:</span> support ble<span class="token punctuation">,</span> use ble help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> gatt <span class="token operator">:</span> support gatt<span class="token punctuation">,</span> use gatt help view
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> help <span class="token operator">:</span> print this message and quit
For detail please use xxx help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a2dp_src、a2dp_snk、avrc、hfp、spps、sppc、ble、gatt还有二级命令，可以通过以下命令查看：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>btcli a2dp_src help
btcli a2dp_snk help
btcli avrc help
btcli hfp help
btcli spps help
btcli sppc help
btcli ble help
btcli gatt help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：btcli a2dp_src help</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>c906&gt;btcli a2dp_src help
$ a2dp_src help
[*] connect : &lt;device mac&gt;
[*] disconnect : &lt;device mac&gt;
[*] start : &lt;‑p [folder path] or ‑f [file path]&gt;
[*] control : &lt;cmd&gt;(pause play forward backward)
[*] stop : No parameters
[*] vol : &lt;val&gt;(val:0~100)
[*] help : print this message and quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,231),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","chapter9.html.vue"]]);export{k as default};
