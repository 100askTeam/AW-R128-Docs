import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const e={},p=t(`<h1 id="flash-controller" tabindex="-1"><a class="header-anchor" href="#flash-controller" aria-hidden="true">#</a> Flash Controller</h1><p>Flash Controller 为 R128 内置的一个 Nor Flash 读写控制器，用于控制命令的收发、数据读写和执行 XIP，兼容 Standard SPI/Dual SPI/Quad SPI。R128 既可以通过 SPI 控制器与Nor Flash 芯片通讯，也可以通过 Flash 控制器与之通讯。在 Flash Controller 前一级加入了 Flash Encryption 模块。Flash Encryption 模块在向Flash 写数据时进行 AES 加密，从 Flash 中读数据时进行解密。Flash Controller 与 Flash Encryption 组合称为 FlashC_Enc。</p><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>FlashC_Enc 的主要特性如下：</p><ul><li>支持不同时钟频率，最大支持 96MHz</li><li>支持 SPI 1/2/4 线收发，支持 SPI Model 0/1/2/3</li><li>可灵活配置 4 段虚拟地址区间，支持 DMA 读写、Nor Flash XIP 操作</li><li>最大 2ˆ32Bytes 容量的 Nor Flash，常见有 64Mb，128Mb，256Mb</li><li>可对 Flash 进行加密，最大可配置 6 段独立的加密区间</li><li>支持在读写数据时进行实时 AES 加解密</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ---&gt;
    soc related device drivers ---&gt;
        FlashControler Devices ---&gt;
            [*] enable flashc driver           # FlashC 驱动，选中表示使用 FlashC 与 Flash 通讯
            [*] enable flashc test command     # FlashC 测试用例，测试 FlashC 相关功能
            [*] enable flashc xip              # 支持 XIP
            [*] enable flashc enc              # FlashEnc 驱动，需要加密功能时选中
            [*] enable flash enc hal APIs test command # FlashEnc 测试用例，测试 FlashEnc 相关功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>FlashC_Enc 模块源码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/
|--hal/source/flash_mcu/hal_flashctrl_rom.c   // FlashC相关驱动
|--hal/source/flash_mcu/hal_flashctrl.h       // FlashC相关驱动头文件
|--hal/source/flash_mcu/hal_flash_rom.c       // Flash 初始化、读写相关API
|--hal/source/flash_mcu/hal_flash.h           // Flash 初始化、读写相关API头文件
|--hal/source/flash_mcu/flashchip/            // Flash 芯片相关驱动
|--hal/source/flashc/hal_flashc_enc.c         // FlashEnc相关API
|--include/hal/hal_flashc_enc.h               // 头文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><h3 id="flash-init-接口" tabindex="-1"><a class="header-anchor" href="#flash-init-接口" aria-hidden="true">#</a> Flash_Init 接口</h3><p>先初始化 FlashC 控制器模块，然后初始化 NOR Flash</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> FlashBoardCfg <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>cfg：Flash 设备的板级配置信息，即 g_flash_cfg 结构体数组</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li><li>HAL_ERROR：错误</li><li>HAL_BUSY：设备忙</li><li>HAL_TIMEOUT：超时</li><li>HAL_INVALID：无效参数</li></ul><h3 id="flash-deinit-接口" tabindex="-1"><a class="header-anchor" href="#flash-deinit-接口" aria-hidden="true">#</a> Flash_Deinit 接口</h3><p>反初始化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Deinit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> FlashBoardCfg <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>cfg：Flash 设备的板级配置信息，即 g_flash_cfg 结构体数组</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-open-接口" tabindex="-1"><a class="header-anchor" href="#flash-open-接口" aria-hidden="true">#</a> Flash_Open 接口</h3><p>打开一个 Flash 设备，拿互斥锁，如果已经打开则无法再打开。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Open</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> timeout_ms<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>timeout_ms：等待打开 Flash 的时间，单位 ms</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-close-接口" tabindex="-1"><a class="header-anchor" href="#flash-close-接口" aria-hidden="true">#</a> Flash_Close 接口</h3><p>关闭一个 Flash 设备，释放互斥锁</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Close</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-read-接口" tabindex="-1"><a class="header-anchor" href="#flash-read-接口" aria-hidden="true">#</a> Flash_Read 接口</h3><p>从 Flash 中读取指定长度的数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Read</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>addr：读取的起始地址</li><li>data：读到的数据存放地址</li><li>size：读数据长度</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-write-接口" tabindex="-1"><a class="header-anchor" href="#flash-write-接口" aria-hidden="true">#</a> Flash_Write 接口</h3><p>写一段数据到 Flash 中指定的地址，写之前需要确保该区间已经被擦除过</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Write</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>addr：要写入的起始地址</li><li>data：要写的数据存放地址</li><li>size：写数据长度</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-overwrite-接口" tabindex="-1"><a class="header-anchor" href="#flash-overwrite-接口" aria-hidden="true">#</a> Flash_Overwrite 接口</h3><p>写一段数据到 Flash 中指定的地址，写之前不需要关心该区间是否已经被擦除过（只在4K 擦除模式有效）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Overwrite</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>addr：要写入的起始地址</li><li>data：要写的数据存放地址</li><li>size：写数据长度</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-erase-接口" tabindex="-1"><a class="header-anchor" href="#flash-erase-接口" aria-hidden="true">#</a> Flash_erase 接口</h3><p>擦除 Flash 中指定地址和大小的区间，擦除地址需要与擦除大小对齐。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Erase</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> FlashEraseMode blk_size<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> blk_cnt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>blk_size：擦除大小，如 4k/32k/64k/chip</li><li>addr：擦除的起始地址</li><li>blk_cnt：需要擦除的扇区块数</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-ioctl-接口" tabindex="-1"><a class="header-anchor" href="#flash-ioctl-接口" aria-hidden="true">#</a> Flash_Ioctl 接口</h3><p>擦除 Flash 中指定地址和大小的区间，擦除地址需要与擦除大小对齐。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_Ioctl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> FlashControlCmd attr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>attr：功能操作行为类型</li><li>arg：实际功能的参数</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-memoryof-接口" tabindex="-1"><a class="header-anchor" href="#flash-memoryof-接口" aria-hidden="true">#</a> Flash_MemoryOf 接口</h3><p>计算输入地址所处的可擦除 Block 首地址</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">HAL_Flash_MemoryOf</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> FlashEraseMode size<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>start<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>addr：要擦除的起始地址</li><li>start：返回的 Block 首地址</li></ul><p>返回值：</p><ul><li>HAL_OK：代表成功</li></ul><h3 id="flash-check-接口" tabindex="-1"><a class="header-anchor" href="#flash-check-接口" aria-hidden="true">#</a> Flash_Check 接口</h3><p>检查被写区域是否需要先擦除</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">HAL_Flash_Check</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> flash<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>flash：Flash 设备号，即 g_flash_cfg 结构体数组索引</li><li>addr：要写入的起始地址</li><li>data：要写的数据存放地址</li><li>size：写数据长度</li></ul><p>返回值：</p><ul><li>-1：检查失败</li><li>0：数据相同，不需要擦写</li><li>1：可直接写，不需要擦除</li><li>2：需要先擦除再写</li></ul><h3 id="flash-enc-初始化接口" tabindex="-1"><a class="header-anchor" href="#flash-enc-初始化接口" aria-hidden="true">#</a> Flash_Enc 初始化接口</h3><p>初始化 Flash_Enc 模块</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_flashc_enc_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> max_addr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>max_addr：对应 Flash 的最大容量</li><li>addr：要擦除的起始地址</li><li>start：返回的 Block 首地址</li></ul><p>返回值：</p><ul><li>0：代表成功</li><li>-1：失败</li></ul><h3 id="flash-enc-申请加密通道接口" tabindex="-1"><a class="header-anchor" href="#flash-enc-申请加密通道接口" aria-hidden="true">#</a> Flash_Enc 申请加密通道接口</h3><p>申请一个加密通道，Flash_Enc 支持最多 6 段加密区间的设置，一个通道代表一个区间，对某个 Flash 区间设置加密前需先申请一个通道。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_flashc_enc_alloc_ch</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0~5：申请到的加密通道号</li><li>-1：失败</li></ul><h3 id="flash-enc-设置加密接口" tabindex="-1"><a class="header-anchor" href="#flash-enc-设置加密接口" aria-hidden="true">#</a> Flash_Enc 设置加密接口</h3><p>对一个 Flash 区间进行加密设置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_set_flashc_enc</span><span class="token punctuation">(</span><span class="token keyword">const</span> Flashc_Enc_Set <span class="token operator">*</span>enc_set<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>enc_set：加密配置，如起始地址、密钥等</li></ul><p>返回值：</p><ul><li>0：代表成功</li><li>-1：失败</li></ul><h3 id="flash-enc-使能加密接口" tabindex="-1"><a class="header-anchor" href="#flash-enc-使能加密接口" aria-hidden="true">#</a> Flash_Enc 使能加密接口</h3><p>使能一个加密区间。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_flashc_enc_enable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Flashc_Enc_Set <span class="token operator">*</span>enc_set<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>enc_set：加密配置，如起始地址、密钥等</li></ul><p>返回值：</p><ul><li>0：代表成功</li><li>-1：失败</li></ul><h3 id="flash-enc-失能加密接口" tabindex="-1"><a class="header-anchor" href="#flash-enc-失能加密接口" aria-hidden="true">#</a> Flash_Enc 失能加密接口</h3><p>失能一个加密区间。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_flashc_enc_disable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Flashc_Enc_Set <span class="token operator">*</span>enc_set<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>enc_set：加密配置，如起始地址、密钥等</li></ul><p>返回值：</p><ul><li>0：代表成功</li><li>-1：失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><h3 id="spi-flash-擦写读示例" tabindex="-1"><a class="header-anchor" href="#spi-flash-擦写读示例" aria-hidden="true">#</a> SPI Flash 擦写读示例</h3><p>FlashC 模块的初始化、Flash 参数配置等在 <code>flashc_nor_init()</code> 中通过调用 <code>HAL_Flash_Init()</code> 完成，这里简单展示对 SPI Nor Flash 的擦写读操作：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">flash_api_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u8 read_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span> write_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    HAL_Status status <span class="token operator">=</span> HAL_ERROR<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment">// 准备测试数据</span>
        write_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

    status <span class="token operator">=</span> <span class="token function">HAL_Flash_Open</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 开启设备</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;open %u fail\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    status <span class="token operator">=</span> <span class="token function">HAL_Flash_Erase</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> FLASH_ERASE_4KB<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 擦除，对齐4K</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erase %u fail\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    status <span class="token operator">=</span> <span class="token function">HAL_Flash_Write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> addr<span class="token punctuation">,</span> write_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 写入数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erase %u fail\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">HAL_Flash_Read</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> addr<span class="token punctuation">,</span> read_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 读取数据</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erase %u fail\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">HAL_Flash_Close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 关闭设备</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;close %u fail\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>write_buf<span class="token punctuation">,</span> read_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对比数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tresult: err\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tresult: ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对-flash-进行加密" tabindex="-1"><a class="header-anchor" href="#对-flash-进行加密" aria-hidden="true">#</a> 对 Flash 进行加密</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">user_enc_api_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Flashc_Enc_Set enc_set<span class="token punctuation">;</span>
    Flashc_Enc_Config <span class="token operator">*</span>enc_cfg <span class="token operator">=</span> <span class="token function">get_flashc_enc_cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    enc_set<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token function">hal_flashc_enc_alloc_ch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>enc_set<span class="token punctuation">.</span>ch <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ENC_ERR</span><span class="token punctuation">(</span><span class="token string">&quot;err: alloc channel failed.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    enc_set<span class="token punctuation">.</span>start_addr <span class="token operator">=</span> <span class="token number">0x800000</span><span class="token punctuation">;</span>    <span class="token comment">// Flash加密区间物理起始地址</span>
    enc_set<span class="token punctuation">.</span>end_addr <span class="token operator">=</span> <span class="token number">0x900000</span><span class="token punctuation">;</span>      <span class="token comment">// Flash加密区间物理结束地址</span>
    enc_set<span class="token punctuation">.</span>key_0 <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>       <span class="token comment">// 密钥</span>
    enc_set<span class="token punctuation">.</span>key_1 <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>       <span class="token comment">// 密钥</span>
    enc_set<span class="token punctuation">.</span>key_2 <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>       <span class="token comment">// 密钥</span>
    enc_set<span class="token punctuation">.</span>key_3 <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>       <span class="token comment">// 密钥</span>
    enc_set<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_set_flashc_enc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>enc_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意：</p><ul><li>在开启XIP功能时，若对Flash的物理区间0x800000-0x900000开启加密时，需要对 XIP 访问的对应虚拟地址区间也进行相应的加密设置。虚拟地址区间的加密，是调用 <code>hal_flashc_enc_alloc_ch</code>v时自动分配和设置的，不需要用户另外申请和设置。</li></ul><h2 id="xip-配置和使用" tabindex="-1"><a class="header-anchor" href="#xip-配置和使用" aria-hidden="true">#</a> XIP 配置和使用</h2><p>为了执行存放在 Nor Flash 中的代码，我们需要配置开启 XIP 功能支持。</p><ol><li>执行 <code>menuconfig</code> 选中 XIP</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        FlashControler Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable flashc xip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>编辑 <code>sys_partition_xip.fex</code> 增加 xip 分区：</li></ol><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">partition</span><span class="token punctuation">]</span></span>
    <span class="token key attr-name">name</span> <span class="token punctuation">=</span> <span class="token value attr-value">rtos-xip</span>
    <span class="token key attr-name">size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1600</span>
    <span class="token key attr-name">downloadfile</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;<span class="token inner-value">rtos_xip_arm.fex</span>&quot;</span>
    <span class="token key attr-name">user_type</span> <span class="token punctuation">=</span> <span class="token value attr-value">0x8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>编辑 <code>image_header_xip.cfg</code> 增加</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0xa5e05a01&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rtos_xip_arm.fex&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;attr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0x02&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>编辑 <code>freerrtos.lds.S</code>，将代码放在 xip 段：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_XIP<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>xip <span class="token operator">:</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span> <span class="token operator">=</span> <span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        __xip_start__ <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span>xip_text<span class="token operator">*</span> <span class="token punctuation">.</span>xip_rodata<span class="token operator">*</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span> <span class="token operator">=</span> <span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        __xip_end__ <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token operator">&gt;</span> FLASH
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* CONFIG_XIP */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不可将中断中访问的资源放在 XIP 中，包括中断处理函数中调用到的函数、字符串常量等，否则在 Flash 擦写期间，XIP 不能访问，此时若发生中断，将造成系统卡死。此外，在 XIP 未初始化时，也不能访问 Flash 中的代码。</p></blockquote><ol><li>XIP 代码检查确认。当执行以上步骤时，可查看 map 文件来确认是否达到预期效果：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.xip    0x0000000010000000      0x69840
        0x0000000010000000      <span class="token builtin class-name">.</span> <span class="token operator">=</span> ALIGN <span class="token punctuation">(</span>0x10<span class="token punctuation">)</span>
        0x0000000010000000      __xip_start__ <span class="token operator">=</span> <span class="token builtin class-name">.</span>
*build/r128_evb1_m33/components/aw/iobox/rm.o<span class="token punctuation">(</span>.text .text.* .rodata .rodata.*<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加新的-flash-芯片支持" tabindex="-1"><a class="header-anchor" href="#添加新的-flash-芯片支持" aria-hidden="true">#</a> 添加新的 Flash 芯片支持</h2><p>新的 Flash 芯片分为两类：一类是该芯片的命令与 <code>flash_default.c</code> 实现的接口一致，为 Default Flash Chip 类型，只需要简单配置即可支持该 Flash 芯片，参见 “Default Flash Chip“ 支持。另一类是该芯片的命令与 <code>flash_default.c</code> 实现的接口不一致或不完全一致，该芯片为非 Default Flash Chip 类型，则需要进行对应接口的重写，参见 “非 Default Flash Chip“ 支持。已支持的 Flash 芯片可以通过 <code>rtos-hal/hal/source/flash_mcu/flashchip/flash_chip_cfg.c</code>进行确认。</p><h3 id="default-flash-chip-支持" tabindex="-1"><a class="header-anchor" href="#default-flash-chip-支持" aria-hidden="true">#</a> Default Flash Chip 支持</h3><p>通过扩展 <code>simpleFlashChipCfg</code> 数组实现，在数组里增加 <code>FlashChipCfg</code> 结构体类型的元素，并根据 Flash 芯片的 Data Sheet 获取相关参数，配置好该结构体。（<code>simpleFlashChipCfg</code> 数组在 <code>rtos-hal/hal/source/flash_mcu/flashchip/flash_chip_cfg.c</code> 定义）</p><p>FlashChip 部分成员如下：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;">mJedec</td><td style="text-align:left;">Flash 的 jedec ID，24bit</td></tr><tr><td style="text-align:left;">mSize</td><td style="text-align:left;">芯片的存储容量，如32Mbit</td></tr><tr><td style="text-align:left;">mEraseSizeSupport</td><td style="text-align:left;">芯片支持哪些擦除命令，如 4K、32K、64K、全片擦除</td></tr><tr><td style="text-align:left;">mPageProgramSupport</td><td style="text-align:left;">芯片支持哪些烧写命令，如 FLASH_PAGEPROGRAM、FLASH_QUAD_PAGEPROGRAM</td></tr><tr><td style="text-align:left;">mReadStausSupport</td><td style="text-align:left;">芯片支持读哪些状态寄存器，如 FLASH_STATUS1 、FLASH_STATUS2、FLASH_STATUS3</td></tr><tr><td style="text-align:left;">mWriteStatusSupport</td><td style="text-align:left;">芯片支持写哪些状态寄存器，如 FLASH_STATUS1 、FLASH_STATUS2、FLASH_STATUS3</td></tr><tr><td style="text-align:left;">mReadSupport</td><td style="text-align:left;">芯片支持哪些读命令，如 FLASH_READ_NORMAL_MODE 、FLASH_READ_FAST_MODE、FLASH_READ_DUAL_O_MODE、FLASH_READ_DUAL_IO_MODE、FLASH_READ_QUAD_O_MODE 、FLASH_READ_QUAD_IO_MODE</td></tr><tr><td style="text-align:left;">mMaxFreq</td><td style="text-align:left;">除了 READ 命令以外，其他命令允许的最高频率</td></tr><tr><td style="text-align:left;">mMaxReadFreq</td><td style="text-align:left;">READ 命令的最高频率</td></tr><tr><td style="text-align:left;">mSuspendSupport</td><td style="text-align:left;">表示是否支持擦/写暂停，1 表示支持，0 表示不支持</td></tr><tr><td style="text-align:left;">mSuspend_Latency</td><td style="text-align:left;">发送暂停命令后需要等待的最小延时</td></tr><tr><td style="text-align:left;">mResume_Latency</td><td style="text-align:left;">发送恢复命令后需要等待的最小延时</td></tr></tbody></table><p>下面以 winbond 的 W25Q128BV 为例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
    <span class="token punctuation">.</span>mJedec <span class="token operator">=</span> <span class="token number">0x1840ef</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mSize <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mEraseSizeSupport <span class="token operator">=</span> FLASH_ERASE_64KB <span class="token operator">|</span> FLASH_ERASE_32KB <span class="token operator">|</span>
                         FLASH_ERASE_4KB <span class="token operator">|</span> FLASH_ERASE_CHIP<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mPageProgramSupport <span class="token operator">=</span> FLASH_PAGEPROGRAM<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mReadStausSupport <span class="token operator">=</span> FLASH_STATUS1 <span class="token operator">|</span> FLASH_STATUS2 <span class="token operator">|</span> FLASH_STATUS3<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mWriteStatusSupport <span class="token operator">=</span> FLASH_STATUS1 <span class="token operator">|</span> FLASH_STATUS2 <span class="token operator">|</span>FLASH_STATUS3<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mReadSupport <span class="token operator">=</span> FLASH_READ_NORMAL_MODE <span class="token operator">|</span> FLASH_READ_FAST_MODE <span class="token operator">|</span>
                    FLASH_READ_DUAL_O_MODE<span class="token operator">|</span> FLASH_READ_DUAL_IO_MODE <span class="token operator">|</span>
                    FLASH_READ_QUAD_O_MODE <span class="token operator">|</span> FLASH_READ_QUAD_IO_MODE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mContinuousReadSupport <span class="token operator">=</span> FLASH_CONTINUOUS_READ_SUPPORT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mBurstWrapReadSupport <span class="token operator">=</span> FLASH_BURST_WRAP_16B<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mMaxFreq <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mMaxReadFreq <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mSuspendSupport <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mSuspend_Latency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mResume_Latency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非-default-flash-chip-支持" tabindex="-1"><a class="header-anchor" href="#非-default-flash-chip-支持" aria-hidden="true">#</a> 非 Default Flash Chip 支持</h3><p>这里以 P25Q16H 为例，通过 data sheet 我们了解到这款芯片的绝大部命令实现与我们的 <code>flash_default.c</code> 接口实现一致，但是 <code>status</code> 寄存器的写命令与 <code>flash_default.c</code> 接口有差别，需要重新实现 <code>writeStatus</code> 接口。首先创建一个<code>flash_P25QXXH.c</code> 文件，通过 <code>Flash chip jedec</code> 值确定使用的芯片型号，然后具体配置特定的参数（如 Flash 的大小、支持的读写操作等），就可以实现代码复用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FlashChipCtor P25Q16H_FlashChip <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>mJedecId <span class="token operator">=</span> P25Q16H_JEDEC<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>enumerate <span class="token operator">=</span> P25QXXH_FlashCtor<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>init <span class="token operator">=</span> P25QXXH_FlashInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>destory <span class="token operator">=</span> P25QXXH_FlashDeinit<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>P25QXXH 芯片 <code>FlashChipCfg</code> 配置：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> FlashChipCfg _P25QXXH_FlashChipCfg <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>mJedec <span class="token operator">=</span> P25Q40H_JEDEC<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mSize <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">4096</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mEraseSizeSupport <span class="token operator">=</span> FLASH_ERASE_64KB <span class="token operator">|</span> FLASH_ERASE_32KB <span class="token operator">|</span> FLASH_ERASE_4KB <span class="token operator">|</span>
                         FLASH_ERASE_CHIP<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mPageProgramSupport <span class="token operator">=</span> FLASH_PAGEPROGRAM <span class="token operator">|</span> FLASH_QUAD_PAGEPROGRAM<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 P25QXXH 系列芯片实例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">FlashChip</span> <span class="token operator">*</span><span class="token function">P25QXXH_FlashCtor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">FlashChip</span> <span class="token operator">*</span>chip<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> jedec <span class="token operator">=</span> arg<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> size<span class="token punctuation">;</span>
    <span class="token function">PCHECK</span><span class="token punctuation">(</span>chip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jedec <span class="token operator">==</span> P25Q64H_JEDEC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jedec <span class="token operator">==</span> P25Q32H_JEDEC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jedec <span class="token operator">==</span> P25Q16H_JEDEC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jedec <span class="token operator">==</span> P25Q80H_JEDEC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>jedec <span class="token operator">==</span> P25Q40H_JEDEC<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chip<span class="token operator">-&gt;</span>cfg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_P25QXXH_FlashChipCfg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>FlashChipCfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>mJedec <span class="token operator">=</span> jedec<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>mSize <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> chip<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写状态寄存器函数重写：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">P25QXXH_WriteStatus</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">FlashChip</span> <span class="token operator">*</span>chip<span class="token punctuation">,</span> FlashStatus reg<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> status_buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    InstructionField instruction<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">PCHECK</span><span class="token punctuation">(</span>chip<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>reg <span class="token operator">&amp;</span> chip<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>mWriteStatusSupport<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">FLASH_NOTSUPPORT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> HAL_INVALID<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instruction<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>instruction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">==</span> FLASH_STATUS1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chip<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>mJedec <span class="token operator">&amp;</span> <span class="token number">0xFF0000</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0x160000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">FCI_CMD</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token operator">=</span> FLASH_INSTRUCTION_RDSR2<span class="token punctuation">;</span>
            <span class="token function">FCI_CMD</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>line <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">FCI_DATA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pdata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>status_buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">FCI_DATA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">FCI_DATA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>line <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            chip<span class="token operator">-&gt;</span><span class="token function">driverRead</span><span class="token punctuation">(</span>chip<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">FCI_CMD</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">FCI_DATA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    chip<span class="token operator">-&gt;</span><span class="token function">writeDisable</span><span class="token punctuation">(</span>chip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加 <code>writestatus</code> 函数的挂载以及其他函数复用 <code>flash_default.c</code> 的接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">P25QXXH_FlashInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">FlashChip</span> <span class="token operator">*</span>chip<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PCHECK</span><span class="token punctuation">(</span>chip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>writeEnable <span class="token operator">=</span> defaultWriteEnable<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>writeDisable <span class="token operator">=</span> defaultWriteDisable<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>readStatus <span class="token operator">=</span> defaultReadStatus<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>erase <span class="token operator">=</span> defaultErase<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>jedecID <span class="token operator">=</span> defaultGetJedecID<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>pageProgram <span class="token operator">=</span> defaultPageProgram<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>read <span class="token operator">=</span> defaultRead<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>driverWrite <span class="token operator">=</span> defaultDriverWrite<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>driverRead <span class="token operator">=</span> defaultDriverRead<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>xipDriverCfg <span class="token operator">=</span> defaultXipDriverCfg<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>setFreq <span class="token operator">=</span> defaultSetFreq<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>switchReadMode <span class="token operator">=</span> defaultSwitchReadMode<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>enableXIP <span class="token operator">=</span> defaultEnableXIP<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>disableXIP <span class="token operator">=</span> defaultDisableXIP<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>isBusy <span class="token operator">=</span> defaultIsBusy<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>control <span class="token operator">=</span> defaultControl<span class="token punctuation">;</span>
    chip<span class="token operator">-&gt;</span>minEraseSize <span class="token operator">=</span> defaultGetMinEraseSize<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在 <code>flash_chip.c</code> 的 <code>flashChipList</code> 里补充 <code>P25Q16H_FlashChip</code> 就完成了扩展。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FlashChipCtor <span class="token operator">*</span>flashChipList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLASH_DEFAULTCHIP</span></span>
        <span class="token operator">&amp;</span>DefaultFlashChip<span class="token punctuation">,</span> <span class="token comment">/*default chip must be at the first*/</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLASH_P25Q16H</span></span>
        <span class="token operator">&amp;</span>P25Q16H_FlashChip<span class="token punctuation">,</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,165),l=[p];function c(o,i){return s(),a("div",null,l)}const r=n(e,[["render",c],["__file","chapter5.html.vue"]]);export{r as default};
