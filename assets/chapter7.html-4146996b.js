import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="gpio" tabindex="-1"><a class="header-anchor" href="#gpio" aria-hidden="true">#</a> GPIO</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>整个 GPIO 控制器由数字部分（GPIO 和外设接口）以及 IO 模拟部分（输出缓冲，双下拉，引脚Pad）组成。其中数字部分的输出可以通过 MUX 开关选择，模拟部分可以用来配置上下拉，驱动能力以及引脚输出电压等等。具体的规格如下：</p><ul><li>可以在软件上配置各个引脚的状态</li><li>每个引脚都可以触发中断</li><li>可以配置 上拉/下拉/无上下拉 三种状态</li><li>每个引脚都可以配置 4 种驱动能力</li><li>可以配置边缘中断触发</li><li>最高 99 个中断</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>其 menuconfig 的配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            GPIO devices ---&gt;
                [*] enable GPIO driver
                [*] enbale GPIO hal APIs Test command
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>GPIO 模块源码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/source/gpio/
│-- gpio.h                 # 模块内部公共头文件
│-- hal_gpio.c             # 公共操作接口
├─  sun20iw2               # sun20iw2 平台的实现
    │---- gpio-sun20iw2.c  # GPIO具体实现
    │---- platform-gpio.h  # 实现头文件

include/hal/               # 驱动APIs声明头文件
└── hal_gpio.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>platform-gpio.h</code> 主要包含 GPIO 控制器基地址、GPIO 中断号、pin 的声明等信息</li><li><code>gpio-sun20iw2.c</code> 主要包含每个平台的 GPIO 描述符配置</li></ul><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><p>由于 GPIO 需要配置每个引脚的引脚复用功能，中断类型，驱动能力，上下拉，输出/输入数据，输入/输出方向等等，所以对 GPIO 的这些配置都封装在一个 enum 枚举结构里面，方便使用。下面是一些配置的定义。想要了解更多的可以到 hal_gpio.h 查看</p><h4 id="引脚定义-gpio-pin-t" tabindex="-1"><a class="header-anchor" href="#引脚定义-gpio-pin-t" aria-hidden="true">#</a> 引脚定义 gpio_pin_t</h4><p>该枚举定义了可用的每个引脚定义，在配置引脚的时候将相关参数传入则可，具体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    GPIO_PC0 <span class="token operator">=</span> <span class="token function">GPIOC</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PC1 <span class="token operator">=</span> <span class="token function">GPIOC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PC2 <span class="token operator">=</span> <span class="token function">GPIOC</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PC3 <span class="token operator">=</span> <span class="token function">GPIOC</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    GPIO_PL0 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PL1 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PL2 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PL3 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PL4 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GPIO_PL5 <span class="token operator">=</span> <span class="token function">GPIOL</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_pin_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引脚驱动能力-gpio-driving-level-t" tabindex="-1"><a class="header-anchor" href="#引脚驱动能力-gpio-driving-level-t" aria-hidden="true">#</a> 引脚驱动能力 gpio_driving_level_t</h4><p>该枚举定义了引脚的驱动能力的值，具体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    GPIO_DRIVING_LEVEL0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/**&lt; Defines GPIO driving current as level0. */</span>
    GPIO_DRIVING_LEVEL1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/**&lt; Defines GPIO driving current as level1. */</span>
    GPIO_DRIVING_LEVEL2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/**&lt; Defines GPIO driving current as level2. */</span>
    GPIO_DRIVING_LEVEL3 <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">/**&lt; Defines GPIO driving current as level3. */</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_driving_level_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引脚上下拉-gpio-pull-status-t" tabindex="-1"><a class="header-anchor" href="#引脚上下拉-gpio-pull-status-t" aria-hidden="true">#</a> 引脚上下拉 gpio_pull_status_t</h4><p>该枚举定义了引脚的上下拉的值，具体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    GPIO_PULL_DOWN_DISABLED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/**&lt; Defines GPIO pull up and pull down disable.*/</span>
    GPIO_PULL_UP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token comment">/**&lt; Defines GPIO is pull up state. */</span>
    GPIO_PULL_DOWN <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token comment">/**&lt; Defines GPIO is pull down state. */</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_pull_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引脚数据-gpio-data-t" tabindex="-1"><a class="header-anchor" href="#引脚数据-gpio-data-t" aria-hidden="true">#</a> 引脚数据 gpio_data_t</h4><p>该枚举定义引脚的输入输出数据，具体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    GPIO_DATA_LOW <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">/**&lt; GPIO data low. */</span>
    GPIO_DATA_HIGH <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">/**&lt; GPIO data high. */</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_data_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引脚电压能力-gpio-power-mode-t" tabindex="-1"><a class="header-anchor" href="#引脚电压能力-gpio-power-mode-t" aria-hidden="true">#</a> 引脚电压能力 gpio_power_mode_t</h4><p>该枚举定义了引脚的电压模式，可以配置成 1.8V 和 3.3V，具体定义如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    POWER_MODE_330 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    POWER_MODE_180 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_power_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="中断模式-gpio-interrupt-mode-t" tabindex="-1"><a class="header-anchor" href="#中断模式-gpio-interrupt-mode-t" aria-hidden="true">#</a> 中断模式 gpio_interrupt_mode_t</h4><p>该枚举定义了引脚的中断模式，具体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    IRQ_TYPE_NONE <span class="token operator">=</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>
    IRQ_TYPE_EDGE_RISING <span class="token operator">=</span> <span class="token number">0x00000001</span><span class="token punctuation">,</span>
    IRQ_TYPE_EDGE_FALLING <span class="token operator">=</span> <span class="token number">0x00000002</span><span class="token punctuation">,</span>
    IRQ_TYPE_EDGE_BOTH <span class="token operator">=</span> <span class="token punctuation">(</span>IRQ_TYPE_EDGE_FALLING <span class="token operator">|</span> IRQ_TYPE_EDGE_RISING<span class="token punctuation">)</span><span class="token punctuation">,</span>
    IRQ_TYPE_LEVEL_HIGH <span class="token operator">=</span> <span class="token number">0x00000004</span><span class="token punctuation">,</span>
    IRQ_TYPE_LEVEL_LOW <span class="token operator">=</span> <span class="token number">0x00000008</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">gpio_interrupt_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gpio-驱动初始化" tabindex="-1"><a class="header-anchor" href="#gpio-驱动初始化" aria-hidden="true">#</a> GPIO 驱动初始化</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值</p><ul><li>true：合法</li><li>false：非法</li></ul><h3 id="判断-gpio-的合法性" tabindex="-1"><a class="header-anchor" href="#判断-gpio-的合法性" aria-hidden="true">#</a> 判断 GPIO 的合法性</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">hal_gpio_check_valid</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：id</li></ul><p>返回值</p><ul><li>true：合法</li><li>false：非法</li></ul><h3 id="获取指定-gpio-的电平状态" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的电平状态" aria-hidden="true">#</a> 获取指定 GPIO 的电平状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_get_data</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_data_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>data：存放数据的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-的电平状态" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-的电平状态" aria-hidden="true">#</a> 设置指定 GPIO 的电平状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_set_data</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_data_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>需设置的电平高低</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-的-io-模式" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-的-io-模式" aria-hidden="true">#</a> 设置指定 GPIO 的 IO 模式</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_set_direction</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_direction_t</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>direction：需设置的 IO 模式</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="获取指定-gpio-的-io-模式" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的-io-模式" aria-hidden="true">#</a> 获取指定 GPIO 的 IO 模式</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_get_direction</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_direction_t</span> <span class="token operator">*</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>direction：存放IO的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-的上下拉状态" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-的上下拉状态" aria-hidden="true">#</a> 设置指定 GPIO 的上下拉状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_set_pull</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_pull_status_t</span> pull<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>pull：需设置的上下拉状态</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="获取指定-gpio-的上下拉状态" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的上下拉状态" aria-hidden="true">#</a> 获取指定 GPIO 的上下拉状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_get_pull</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_pull_status_t</span> <span class="token operator">*</span>pull<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>pull：存放上下拉状态的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-的驱动能力" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-的驱动能力" aria-hidden="true">#</a> 设置指定 GPIO 的驱动能力</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_set_driving_level</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_driving_level_t</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>level：需设置的驱动能力</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="获取指定-gpio-的驱动能力" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的驱动能力" aria-hidden="true">#</a> 获取指定 GPIO 的驱动能力</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_get_driving_level</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_driving_level_t</span> <span class="token operator">*</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>level：存放驱动能力的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-的复用功能" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-的复用功能" aria-hidden="true">#</a> 设置指定 GPIO 的复用功能</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_pinmux_set_function</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_muxsel_t</span> function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>function_index：需设置的复用功能</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="获取指定-gpio-的复用功能" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的复用功能" aria-hidden="true">#</a> 获取指定 GPIO 的复用功能</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_pinmux_get_function</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">gpio_muxsel_t</span> <span class="token operator">*</span>function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>function_index：需设置的复用功能的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-组的电压模式" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-组的电压模式" aria-hidden="true">#</a> 设置指定 GPIO 组的电压模式</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_sel_vol_mode</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pins<span class="token punctuation">,</span> <span class="token class-name">gpio_power_mode_t</span> pm_sel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>pm_sel：需设置的电压模式</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="设置指定-gpio-组的中断采样频率" tabindex="-1"><a class="header-anchor" href="#设置指定-gpio-组的中断采样频率" aria-hidden="true">#</a> 设置指定 GPIO 组的中断采样频率</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_set_debounce</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>value：需设置的值（bit0-clock select; bit6:4-clock pre-scale）</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="获取指定-gpio-的-irq-中断号" tabindex="-1"><a class="header-anchor" href="#获取指定-gpio-的-irq-中断号" aria-hidden="true">#</a> 获取指定 GPIO 的 IRQ 中断号</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_to_irq</span><span class="token punctuation">(</span><span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pin：pin id</li><li>irq：存放中断号的指针变量</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="gpio-中断申请" tabindex="-1"><a class="header-anchor" href="#gpio-中断申请" aria-hidden="true">#</a> GPIO 中断申请</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_irq_request</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> irq<span class="token punctuation">,</span> <span class="token class-name">hal_irq_handler_t</span> hdle<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>irq：中断号</li><li>hdle：中断处理函数</li><li>flag：中断触发模式</li><li>data：数据指针</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="gpio-中断释放" tabindex="-1"><a class="header-anchor" href="#gpio-中断释放" aria-hidden="true">#</a> GPIO 中断释放</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_irq_free</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>irq：中断号</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="使能-gpio-中断" tabindex="-1"><a class="header-anchor" href="#使能-gpio-中断" aria-hidden="true">#</a> 使能 GPIO 中断</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_irq_enable</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>irq：中断号</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h3 id="关闭-gpio-中断" tabindex="-1"><a class="header-anchor" href="#关闭-gpio-中断" aria-hidden="true">#</a> 关闭 GPIO 中断</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpio_irq_disable</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>irq：中断号</li></ul><p>返回值</p><ul><li>-1：失败</li><li>0：成功</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_interrupt.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_gpio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_gpio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO_TEST</span>       <span class="token expression">GPIO_PA1          </span><span class="token comment">// 待测试的 GPIO</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO_PORT_MAX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> pins_number<span class="token punctuation">[</span>GPIO_PORT_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">22</span><span class="token punctuation">,</span> <span class="token comment">/* PA pins num */</span>
    <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment">/* PC pins num */</span>
    <span class="token number">23</span><span class="token punctuation">,</span> <span class="token comment">/* PD pins num */</span>
    <span class="token number">18</span><span class="token punctuation">,</span> <span class="token comment">/* PE pins num */</span>
    <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">/* PF pins num */</span>
    <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token comment">/* PG pins num */</span>
    <span class="token number">16</span><span class="token punctuation">,</span> <span class="token comment">/* PH pins num */</span>
    <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">/* PI pins num */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
        <span class="token string">&quot;\\t hal_gpio_cmd &lt;cmd&gt; &lt;gpio&gt; &lt;arg&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token punctuation">{</span>
    GPIO_CMD_SET_VOL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">hal_irqreturn_t</span> <span class="token function">gpio_irq_test</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;fake gpio interrupt handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_gpio</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> irq<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">gpio_pull_status_t</span> pull_state<span class="token punctuation">;</span>
    <span class="token class-name">gpio_direction_t</span> gpio_direction<span class="token punctuation">;</span>
    <span class="token class-name">gpio_data_t</span> gpio_data<span class="token punctuation">;</span>
    <span class="token class-name">gpio_muxsel_t</span> function_index<span class="token punctuation">;</span>

    <span class="token function">hal_gpio_get_pull</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pull_state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_get_direction</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_get_data</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_pinmux_get_function</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span><span class="token operator">&amp;</span>function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Original: pin: %d pull state: %d, dir: %d, data: 0x%0x, function_index: %d&quot;</span><span class="token punctuation">,</span>
                 GPIO_TEST<span class="token punctuation">,</span> pull_state<span class="token punctuation">,</span> gpio_direction<span class="token punctuation">,</span> gpio_data<span class="token punctuation">,</span> function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Setting: pin: %d pull state: %d, dir: %d, data: 0x%x, function_index: %d&quot;</span><span class="token punctuation">,</span>
                 GPIO_TEST<span class="token punctuation">,</span> GPIO_PULL_UP<span class="token punctuation">,</span> GPIO_DIRECTION_OUTPUT<span class="token punctuation">,</span> GPIO_DATA_HIGH<span class="token punctuation">,</span> GPIO_MUXSEL_OUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_gpio_set_pull</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> GPIO_PULL_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_set_direction</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> GPIO_DIRECTION_OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_set_data</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> GPIO_DATA_HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_pinmux_set_function</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span>GPIO_MUXSEL_OUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_gpio_get_pull</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pull_state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_get_direction</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_get_data</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpio_pinmux_get_function</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span><span class="token operator">&amp;</span>function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Results: pin: %d pull state: %d, dir: %d, data: 0x%0x, function_index: %d&quot;</span><span class="token punctuation">,</span>
                 GPIO_TEST<span class="token punctuation">,</span> pull_state<span class="token punctuation">,</span> gpio_direction<span class="token punctuation">,</span> gpio_data<span class="token punctuation">,</span> function_index<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pull_state <span class="token operator">==</span> GPIO_PULL_UP
            <span class="token operator">&amp;&amp;</span> gpio_direction <span class="token operator">==</span> GPIO_DIRECTION_OUTPUT
            <span class="token operator">&amp;&amp;</span> gpio_data <span class="token operator">==</span> GPIO_DATA_HIGH
        <span class="token operator">&amp;&amp;</span> function_index <span class="token operator">==</span> GPIO_MUXSEL_OUT<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_set_pull API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_set_direction API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_set_data API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_pinmux_set_function API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_get_pull API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_get_direction API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_get_data API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_pinmux_get_function API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Test API fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpio_to_irq</span><span class="token punctuation">(</span>GPIO_TEST<span class="token punctuation">,</span> <span class="token operator">&amp;</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;gpio to irq error, irq num:%d error num: %d&quot;</span><span class="token punctuation">,</span> irq<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_to_irq API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_request</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> gpio_irq_test<span class="token punctuation">,</span> IRQ_TYPE_EDGE_RISING<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;request irq error, irq num:%d error num: %d&quot;</span><span class="token punctuation">,</span> irq<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_irq_request API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_enable</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;request irq error, error num: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_irq_enable API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_disable</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;disable irq error, irq num:%d, error num: %d&quot;</span><span class="token punctuation">,</span> irq<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_irq_disable API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_free</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;free irq error, error num: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_gpio_irq_free API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test gpio hal APIs success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

failed<span class="token operator">:</span>
    <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Test gpio hal APIs failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_gpio_all</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> irq<span class="token punctuation">;</span>
    <span class="token class-name">gpio_pin_t</span> pin<span class="token punctuation">;</span>
    <span class="token class-name">gpio_pull_status_t</span> pull_state<span class="token punctuation">;</span>
    <span class="token class-name">gpio_direction_t</span> gpio_direction<span class="token punctuation">;</span>
    <span class="token class-name">gpio_data_t</span> gpio_data<span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;The program will test all gpio hal APIs ...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GPIO_PORT_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pins_number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOA</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOC</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOD</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOE</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOF</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOG</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOH</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> pin <span class="token operator">=</span> <span class="token function">GPIOI</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Setting: pull state: %d, dir: %d, data: 0x%x, pin: %d&quot;</span><span class="token punctuation">,</span>
                            GPIO_PULL_DOWN<span class="token punctuation">,</span> GPIO_DIRECTION_INPUT<span class="token punctuation">,</span> GPIO_DATA_LOW<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">hal_gpio_set_pull</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> GPIO_PULL_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_gpio_set_direction</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> GPIO_DIRECTION_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_gpio_set_data</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> GPIO_DATA_LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">hal_gpio_get_pull</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pull_state<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_gpio_get_direction</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_gpio_get_data</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gpio_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Results: pull state: %d, dir: %d, data: 0x%0x&quot;</span><span class="token punctuation">,</span>
                            pull_state<span class="token punctuation">,</span> gpio_direction<span class="token punctuation">,</span> gpio_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>pull_state <span class="token operator">!=</span> GPIO_PULL_DOWN
                   <span class="token operator">||</span> gpio_direction <span class="token operator">!=</span> GPIO_DIRECTION_INPUT
                   <span class="token operator">||</span> gpio_data <span class="token operator">!=</span> GPIO_DATA_LOW<span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            ret <span class="token operator">=</span> <span class="token function">hal_gpio_to_irq</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_request</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> gpio_irq_test<span class="token punctuation">,</span> IRQ_TYPE_EDGE_FALLING<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_enable</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_disable</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            ret <span class="token operator">=</span> <span class="token function">hal_gpio_irq_free</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test-%d: gpio pin %d hal success!\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test all gpio hal APIs success, cnt: %d!&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

failed<span class="token operator">:</span>
    <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Test all gpio hal APIs failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_gpio_cmd</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> gpio<span class="token punctuation">,</span> arg<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cmd <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gpio <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arg <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> GPIO_CMD_SET_VOL<span class="token operator">:</span>
            <span class="token function">hal_gpio_sel_vol_mode</span><span class="token punctuation">(</span>gpio<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_ALIAS</span><span class="token punctuation">(</span>cmd_test_gpio<span class="token punctuation">,</span> hal_gpio<span class="token punctuation">,</span> gpio hal APIs tests<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">FINSH_FUNCTION_EXPORT_ALIAS</span><span class="token punctuation">(</span>cmd_test_gpio_cmd<span class="token punctuation">,</span> hal_gpio_cmd<span class="token punctuation">,</span> gpio hal APIs tests with cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">FINSH_FUNCTION_EXPORT_ALIAS</span><span class="token punctuation">(</span>cmd_test_gpio_all<span class="token punctuation">,</span> hal_gpio_all<span class="token punctuation">,</span> gpio hal all APIs tests<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,167),i=[e];function o(c,l){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","chapter7.html.vue"]]);export{r as default};
