import{_ as n,o as s,c as a,e}from"./app-e85d5a28.js";const t={},p=e(`<h1 id="rtc" tabindex="-1"><a class="header-anchor" href="#rtc" aria-hidden="true">#</a> RTC</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>实时时钟 RTC 用于实现时钟计数和定时唤醒功能，能够实时显示日，时，分，秒功能。该模块电源独立，可以在系统掉电后工作，RTC 具有以下特点。</p><ul><li>内部具有一个 16bit 的日计数器，5bit 的小时计数器，6bit 的分计数器，6bit 的秒计数器</li><li>可外接 32768Hz 低频晶振作为计数时钟</li><li>可随时软件配置初始值</li><li>具有定时闹钟功能，可产生中断及唤醒外围设备</li><li>14 个用户寄存器可存放掉电信息</li><li>多个特殊寄存器记录 BROM 相关信息</li><li>RTC 模块记录的时间范围为 1900-2097 年。</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>配置路径如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Kernel Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
    Drivers Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SoC HAL Drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
            rtc devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable rtc driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos<span class="token operator">-</span>hal<span class="token operator">/</span>
<span class="token operator">|</span><span class="token operator">--</span> hal<span class="token operator">/</span>source<span class="token operator">/</span>rtc<span class="token operator">/</span>hal_rtc<span class="token punctuation">.</span>c                <span class="token comment">// hal层接口代码</span>
<span class="token operator">|</span><span class="token operator">--</span> hal<span class="token operator">/</span>source<span class="token operator">/</span>rtc<span class="token operator">/</span>platform<span class="token operator">/</span>rtc_sun20iw2<span class="token punctuation">.</span>h  <span class="token comment">// 平台配置</span>
<span class="token operator">|</span><span class="token operator">--</span> include<span class="token operator">/</span>hal<span class="token operator">/</span>sunxi_hal_rtc<span class="token punctuation">.</span>h             <span class="token comment">// 头文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RTC 模块寄存器的基本配置位于文件rtc_sun20iw2.h 里面，包括每个 RTC 的寄存器地址和中断号，部分配置如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 寄存器基址</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_RTC_BASE</span> <span class="token expression"><span class="token number">0x07000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_RTC_DATA_BASE</span> <span class="token expression"><span class="token punctuation">(</span>SUNXI_RTC_BASE<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span></span></span>
<span class="token comment">// 中断</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_GIC_START</span> <span class="token expression"><span class="token number">32</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUXNI_IRQ_RTC</span> <span class="token expression"><span class="token punctuation">(</span>SUNXI_GIC_START <span class="token operator">+</span> <span class="token number">105</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><h3 id="rtc-时间结构体" tabindex="-1"><a class="header-anchor" href="#rtc-时间结构体" aria-hidden="true">#</a> RTC 时间结构体</h3><p>该结构体用来保存 RTC 模块的时间，具体如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rtc_time</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>  <span class="token comment">// 秒</span>
    <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>  <span class="token comment">// 分</span>
    <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span> <span class="token comment">// 时</span>
    <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span> <span class="token comment">// 天</span>
    <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>  <span class="token comment">// 月</span>
    <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span> <span class="token comment">// 年</span>
    <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>
    <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>
    <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtc-闹钟结构体" tabindex="-1"><a class="header-anchor" href="#rtc-闹钟结构体" aria-hidden="true">#</a> RTC 闹钟结构体</h3><p>该结构体用来保存 RTC 模块的闹钟时间，具体如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rtc_wkalrm</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> enabled<span class="token punctuation">;</span> <span class="token comment">/* 0 = alarm disabled, 1 = alarm enabled */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pending<span class="token punctuation">;</span> <span class="token comment">/* 0 = alarm not pending, 1 = alarm pending */</span>
    <span class="token keyword">struct</span> <span class="token class-name">rtc_time</span> time<span class="token punctuation">;</span>  <span class="token comment">/* time the alarm is set to */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtc-初始化接口" tabindex="-1"><a class="header-anchor" href="#rtc-初始化接口" aria-hidden="true">#</a> RTC 初始化接口</h3><p>RTC 模块初始化，主要初始化一些工作模式，中断等等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="获取时间接口" tabindex="-1"><a class="header-anchor" href="#获取时间接口" aria-hidden="true">#</a> 获取时间接口</h3><p>获取时间值，保存在 rtc_tm 结构体里面</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_gettime</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtc_time</span> <span class="token operator">*</span>rtc_tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rtc_tm，保存时间的结构体参数</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="设置时间接口" tabindex="-1"><a class="header-anchor" href="#设置时间接口" aria-hidden="true">#</a> 设置时间接口</h3><p>设置时间值</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_settime</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtc_time</span> <span class="token operator">*</span>rtc_tm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rtc_tm，设置时间的结构体参数</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="获取闹钟接口" tabindex="-1"><a class="header-anchor" href="#获取闹钟接口" aria-hidden="true">#</a> 获取闹钟接口</h3><p>获取闹钟数据</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_getalarm</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtc_wkalrm</span> <span class="token operator">*</span>wkalrm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>wkalrm，保存闹钟数据的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="设置闹钟接口" tabindex="-1"><a class="header-anchor" href="#设置闹钟接口" aria-hidden="true">#</a> 设置闹钟接口</h3><p>设置闹钟数据</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_setalarm</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtc_wkalrm</span> <span class="token operator">*</span>wkalrm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>wkalrm，保存闹钟数据的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="使能闹钟中断接口" tabindex="-1"><a class="header-anchor" href="#使能闹钟中断接口" aria-hidden="true">#</a> 使能闹钟中断接口</h3><p>使能闹钟中断</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_alarm_irq_enable</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>enabled：1使能，0失能</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="注册闹钟回调接口" tabindex="-1"><a class="header-anchor" href="#注册闹钟回调接口" aria-hidden="true">#</a> 注册闹钟回调接口</h3><p>注册闹钟回调接口</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_rtc_register_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_t</span> user_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>user_callback：int callback(void) 的函数指针</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_rtc.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;alarm interrupt\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_rtc</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> enable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rtc_time</span> rtc_tm<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rtc_wkalrm</span> wkalrm<span class="token punctuation">;</span>

    <span class="token function">hal_rtc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_rtc_register_callback</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_rtc_gettime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rtc_tm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi rtc gettime error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    wkalrm<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    wkalrm<span class="token punctuation">.</span>time <span class="token operator">=</span> rtc_tm<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rtc_tm<span class="token punctuation">.</span>tm_min <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        rtc_tm<span class="token punctuation">.</span>tm_min <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_min <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;alarm time %04d-%02d-%02d %02d:%02d:%02d\\n&quot;</span><span class="token punctuation">,</span>
           wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span> wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span>
           wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_hour<span class="token punctuation">,</span> wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_min<span class="token punctuation">,</span> wkalrm<span class="token punctuation">.</span>time<span class="token punctuation">.</span>tm_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_rtc_settime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rtc_tm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi rtc settime error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_rtc_setalarm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wkalrm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi rtc setalarm error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_rtc_getalarm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wkalrm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi rtc getalarm error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_rtc_gettime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rtc_tm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi rtc gettime error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//if do hal_rtc_alarm_irq_enable and hal_rtc_uninit, alarm will not work</span>
    <span class="token function">hal_rtc_alarm_irq_enable</span><span class="token punctuation">(</span>enable<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* if the alarm time is less than code run,run here will close rtc, so the interrupt will not response*/</span>
    <span class="token comment">//hal_rtc_deinit();</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_rtc<span class="token punctuation">,</span> hal_rtc<span class="token punctuation">,</span> rtc hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,76),c=[p];function i(l,o){return s(),a("div",null,c)}const u=n(t,[["render",i],["__file","chapter21.html.vue"]]);export{u as default};
