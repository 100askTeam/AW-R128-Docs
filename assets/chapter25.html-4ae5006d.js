import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="spi" tabindex="-1"><a class="header-anchor" href="#spi" aria-hidden="true">#</a> SPI</h1><h2 id="模块功能介绍" tabindex="-1"><a class="header-anchor" href="#模块功能介绍" aria-hidden="true">#</a> 模块功能介绍</h2><p>SPI是一种全双工同步串行接口，可以工作在Master模式和Slave模式，SPI主要有以下特点： * 全双工同步串行接口 * Master/Slave模式可配置 * 支持最大96MHz时钟频率 * 支持SPI Mode0/1/2/3 * 片选和时钟的极性和相位可配置 * 5个时钟源 * 支持中断或DMA传输 * 支持多片选 * 支持Standard Single/Dual/Quad SPI，FIFO深度64B * 支持BIT模式，用于3Wire场景，支持可编程0~32bits帧长度（仅支持Master模式，且不支持DMA和FIFO功能） * 支持DBI模式，用于显示设备场景，用于传输视频数据</p><h2 id="模块配置介绍" tabindex="-1"><a class="header-anchor" href="#模块配置介绍" aria-hidden="true">#</a> 模块配置介绍</h2><p>目前有两种方法进行引脚配置：<code>sys_config</code>和平台头文件。</p><p>这两种方法选其中一种使用即可，在没有<code>sys_config</code>文件配置时，默认使用平台头文件。当检测到有<code>sys_config</code>文件并有相关关键字时，自动切换为该方法。</p><h3 id="sys-config文件引脚配置说明" tabindex="-1"><a class="header-anchor" href="#sys-config文件引脚配置说明" aria-hidden="true">#</a> sys_config文件引脚配置说明</h3><p>引脚配置在 <code>source/project/方案/configs/sys_config.fex</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[spi1]
spi1_used       = 1
spi1_cs_number  = 1
spi1_cs_bitmap  = 1
spi1_cs0        = port:PA02&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
spi1_sclk       = port:PA03&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
spi1_mosi       = port:PA04&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
spi1_miso       = port:PA05&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
spi1_hold       = port:PA06&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
spi1_wp         = port:PA07&lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;default&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="平台头文件资源配置说明" tabindex="-1"><a class="header-anchor" href="#平台头文件资源配置说明" aria-hidden="true">#</a> 平台头文件资源配置说明</h3><p>引脚配置在 <code>rtos-hal/hal/source/spi/platform/spi_sun20iw2.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_params_t</span> g_sunxi_spi_params<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">/* SPI0 */</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>reg_base <span class="token operator">=</span> SUNXI_SPI0_PBASE<span class="token punctuation">,</span> <span class="token punctuation">.</span>irq_num <span class="token operator">=</span> SUNXI_IRQ_SPI0<span class="token punctuation">,</span> <span class="token punctuation">.</span>gpio_num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pclk_pll_type <span class="token operator">=</span> HAL_SUNXI_AON_CCU<span class="token punctuation">,</span> <span class="token punctuation">.</span>pclk_pll_id <span class="token operator">=</span> CLK_DEVICE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pclk_hosc_type <span class="token operator">=</span> HAL_SUNXI_AON_CCU<span class="token punctuation">,</span> <span class="token punctuation">.</span>pclk_hosc_id <span class="token operator">=</span> CLK_HOSC<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>bus_type <span class="token operator">=</span> HAL_SUNXI_CCU<span class="token punctuation">,</span> <span class="token punctuation">.</span>bus_id <span class="token operator">=</span> CLK_BUS_SPI0<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mclk_type <span class="token operator">=</span> HAL_SUNXI_CCU<span class="token punctuation">,</span> <span class="token punctuation">.</span>mclk_id <span class="token operator">=</span> CLK_SPI0<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>reset_type <span class="token operator">=</span> HAL_SUNXI_RESET<span class="token punctuation">,</span> <span class="token punctuation">.</span>reset_id <span class="token operator">=</span> RST_SPI0<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>gpio_clk <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>gpio_mosi <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>gpio_miso <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>gpio_cs0 <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>gpio_wp <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>gpio_hold <span class="token operator">=</span> <span class="token function">GPIOB</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mux <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>driv_level <span class="token operator">=</span> GPIO_DRIVING_LEVEL2<span class="token punctuation">,</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DRIVERS_DMA</span></span>
        <span class="token punctuation">.</span>drq_tx <span class="token operator">=</span> DRQDST_SPI0_TX<span class="token punctuation">,</span> <span class="token punctuation">.</span>drq_rx <span class="token operator">=</span> DRQSRC_SPI0_RX<span class="token punctuation">,</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">.</span>rx_fifosize <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>tx_fifosize <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>dma_force_fixed <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="menuconfig-配置说明" tabindex="-1"><a class="header-anchor" href="#menuconfig-配置说明" aria-hidden="true">#</a> menuconfig 配置说明</h3><p>配置路径如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup  ---&gt;
    Drivers Setup  ---&gt;
        SoC HAL Drivers  ---&gt;
            SPI Devices  ---&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter25/image1.png" alt=""></p><h2 id="源码结构介绍" tabindex="-1"><a class="header-anchor" href="#源码结构介绍" aria-hidden="true">#</a> 源码结构介绍</h2><p>SPI 模块代码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/
|--include/hal/sunxi_hal_spi.h          // hal层数据结构和API接口相关头文件
|--hal/source/spi/platform_spi.h        // hal层平台相关头文件
|--hal/source/spi/platform/spi_xxx.h    // hal层平台信息相关头文件
|--hal/source/spi/common_spi.h          // hal层控制器寄存器相关头文件
|--hal/source/spi/hal_spi.c             // hal层接口驱动代码
|
|--hal/test/spi/test_spi.c              // hal层接口测试代码
|--hal/test/spi/spi_slave_driver.c      // hal层slave模式驱动代码
|--hal/test/spi/test_spi_slave.c        // hal层slave模式测试代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>需要包含头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal/sunxi_hal_spi.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="重要结构体及宏定义" tabindex="-1"><a class="header-anchor" href="#重要结构体及宏定义" aria-hidden="true">#</a> 重要结构体及宏定义</h2><h3 id="spi模式功能选择" tabindex="-1"><a class="header-anchor" href="#spi模式功能选择" aria-hidden="true">#</a> SPI模式功能选择</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_CPHA</span>        <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  </span><span class="token comment">/* clock phase */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_CPOL</span>        <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  </span><span class="token comment">/* clock polarity */</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_MODE_0</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_MODE_1</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span>SPI_CPHA<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_MODE_2</span>      <span class="token expression"><span class="token punctuation">(</span>SPI_CPOL<span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_MODE_3</span>      <span class="token expression"><span class="token punctuation">(</span>SPI_CPOL<span class="token operator">|</span>SPI_CPHA<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_CS_HIGH</span>     <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  </span><span class="token comment">/* chipselect active high? */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_LSB_FIRST</span>   <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  </span><span class="token comment">/* per-word bits-on-wire */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_3WIRE</span>       <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  </span><span class="token comment">/* SI/SO signals shared */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_LOOP</span>        <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  </span><span class="token comment">/* loopback mode */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_NO_CS</span>       <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  </span><span class="token comment">/* 1 dev/bus, no chipselect */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_READY</span>       <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  </span><span class="token comment">/* slave pulls low to pause */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_TX_DUAL</span>     <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  </span><span class="token comment">/* transmit with 2 wires */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_TX_QUAD</span>     <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  </span><span class="token comment">/* transmit with 4 wires */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_RX_DUAL</span>     <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> </span><span class="token comment">/* receive with 2 wires */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_RX_QUAD</span>     <span class="token expression"><span class="token function">BIT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> </span><span class="token comment">/* receive with 4 wires */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SPI_MODE_0/1/2/3：设置SPI的传输模式。</li><li>SPI_CS_HIGH：设置CS片选是否为高电平有效。</li><li>SPI_LSB_FIRST：设置发送顺序是低位在前。</li><li>SPI_3WIRE：设置SPI工作在3线模式下，及MOSI即用作输入也用作输入，实现半双工通信</li></ul><h3 id="spi控制器模式配置" tabindex="-1"><a class="header-anchor" href="#spi控制器模式配置" aria-hidden="true">#</a> SPI控制器模式配置</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    HAL_SPI_BUS_MASTER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HAL_SPI_BUS_SLAVE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    HAL_SPI_BUS_BIT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_bus_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HAL_SPI_BUS_MASTER：处于Master模式，外接SPI Device。</li><li>HAL_SPI_BUS_SLAVE：处于Slave模式，被其他Master访问。</li><li>HAL_SPI_BUS_BIT：处于BIT模式，使用3Wire方式进行数据传输。</li></ul><h3 id="spi控制器片选模式" tabindex="-1"><a class="header-anchor" href="#spi控制器片选模式" aria-hidden="true">#</a> SPI控制器片选模式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    HAL_SPI_CS_AUTO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HAL_SPI_CS_SOFT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_cs_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HAL_SPI_CS_AUTO：硬件自动控制，不需要驱动或软件介入。</li><li>HAL_SPI_CS_SOFT：软件手动控制，由驱动完成相关操作。</li></ul><h3 id="spi控制器采样模式" tabindex="-1"><a class="header-anchor" href="#spi控制器采样模式" aria-hidden="true">#</a> SPI控制器采样模式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    SUNXI_SPI_SAMP_MODE_OLD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_MODE_NEW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_bus_sample_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SUNXI_SPI_SAMP_MODE_OLD：粗调模式，共有3档可调</li><li>SUNXI_SPI_SAMP_MODE_NEW：细调模式，共有7档可调</li></ul><blockquote><p>粗调模式为驱动根据时钟频率自动识别，不需要额外配置</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_0_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_0_5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_1_0 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_1_5 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_2_0 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_2_5 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    SUNXI_SPI_SAMP_DELAY_CYCLE_3_0 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_spi_sample_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SUNXI_SPI_SAMP_DELAY_CYCLE：采样延时调节挡位选择</li></ul><blockquote><p>当采样模式处于细调时，才会使用到该参数</p></blockquote><h3 id="spi控制器配置结构体" tabindex="-1"><a class="header-anchor" href="#spi控制器配置结构体" aria-hidden="true">#</a> SPI控制器配置结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_spi_master_bus_mode_t</span> bus_mode<span class="token punctuation">;</span> <span class="token comment">// SPI控制器配置</span>
    <span class="token class-name">hal_spi_master_cs_mode_t</span> cs_mode<span class="token punctuation">;</span>   <span class="token comment">// SPI控制器片选模式</span>
    <span class="token class-name">hal_spi_master_bus_sample_mode_t</span> bus_sample_mode<span class="token punctuation">;</span>   <span class="token comment">// SPI控制器采样模式 - 粗调</span>
    <span class="token class-name">hal_spi_master_spi_sample_mode_t</span> spi_sample_mode<span class="token punctuation">;</span>   <span class="token comment">// SPI控制器采样模式 - 细调</span>
    <span class="token class-name">uint32_t</span> spi_sample_delay<span class="token punctuation">;</span>  <span class="token comment">// SPI控制器细调采样延时</span>
    <span class="token class-name">uint8_t</span> chipselect<span class="token punctuation">;</span> <span class="token comment">/* SPI slave device selection */</span>
    <span class="token class-name">uint32_t</span> clock_frequency<span class="token punctuation">;</span> <span class="token comment">/* SPI master clock frequency setting */</span>
    <span class="token class-name">uint32_t</span> mode<span class="token punctuation">;</span>  <span class="token comment">// SPI模式/功能选择</span>
    bool sip<span class="token punctuation">;</span>
    bool flash<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_config_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spi传输结构体" tabindex="-1"><a class="header-anchor" href="#spi传输结构体" aria-hidden="true">#</a> SPI传输结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>tx_buf<span class="token punctuation">;</span>  <span class="token comment">/* Data buffer to send */</span>
    <span class="token class-name">uint32_t</span> tx_len<span class="token punctuation">;</span>        <span class="token comment">/* The total number of bytes to send */</span>
    <span class="token class-name">uint32_t</span> tx_single_len<span class="token punctuation">;</span> <span class="token comment">/* The number of bytes to send in single mode */</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rx_buf<span class="token punctuation">;</span>        <span class="token comment">/* Received data buffer, */</span>
    <span class="token class-name">uint32_t</span> rx_len<span class="token punctuation">;</span>        <span class="token comment">/* The valid number of bytes received */</span>
    <span class="token class-name">uint8_t</span> tx_nbits <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">/* Data buffer to send in nbits mode */</span>
    <span class="token class-name">uint8_t</span> rx_nbits <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">/* Data buffer to received in nbits mode */</span>
    <span class="token class-name">uint8_t</span> dummy_byte<span class="token punctuation">;</span>     <span class="token comment">/* Flash send dummy byte, default 0*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_NBITS_SINGLE</span>    <span class="token expression"><span class="token number">0x01</span> </span><span class="token comment">/* 1bit transfer */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_NBITS_DUAL</span>      <span class="token expression"><span class="token number">0x02</span> </span><span class="token comment">/* 2bits transfer */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_NBITS_QUAD</span>      <span class="token expression"><span class="token number">0x04</span> </span><span class="token comment">/* 4bits transfer */</span></span>
    <span class="token class-name">uint8_t</span> bits_per_word<span class="token punctuation">;</span>  <span class="token comment">/* transfer bit_per_word */</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_spi_master_transfer_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对外提供的api接口" tabindex="-1"><a class="header-anchor" href="#对外提供的api接口" aria-hidden="true">#</a> 对外提供的API接口</h2><h3 id="hal-spi-init" tabindex="-1"><a class="header-anchor" href="#hal-spi-init" aria-hidden="true">#</a> hal_spi_init</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_init</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">hal_spi_master_config_t</span> <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：SPI模块初始化，主要申请中断、pinctrl初始化、clk初始化、SPI模块，包括SPI总线最大传输速率、片选模式等等</li><li>参数： <ul><li>port:SPI端口号</li><li>cfg:配置信息</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h3 id="hal-spi-deinit" tabindex="-1"><a class="header-anchor" href="#hal-spi-deinit" aria-hidden="true">#</a> hal_spi_deinit</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_deinit</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：SPI模块去初始化</li><li>参数： <ul><li>port:SPI端口号</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h3 id="hal-spi-write" tabindex="-1"><a class="header-anchor" href="#hal-spi-write" aria-hidden="true">#</a> hal_spi_write</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：发送数据，调hal_spi_xfer接口</li><li>参数： <ul><li>port:SPI端口号</li><li>buf:发送数据</li><li>size:发送数据大小</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h3 id="hal-spi-read" tabindex="-1"><a class="header-anchor" href="#hal-spi-read" aria-hidden="true">#</a> hal_spi_read</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：接收数据，调hal_spi_xfer接口</li><li>参数： <ul><li>port:SPI端口号</li><li>buf:接收数据</li><li>size:接收数据大小</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h3 id="hal-spi-xfer" tabindex="-1"><a class="header-anchor" href="#hal-spi-xfer" aria-hidden="true">#</a> hal_spi_xfer</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">hal_spi_master_transfer_t</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：发送或接收数据</li><li>参数： <ul><li>port:SPI端口号</li><li>t:指向传输包头的指针</li><li>num:传输包的个数</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h3 id="hal-spi-slave-abort" tabindex="-1"><a class="header-anchor" href="#hal-spi-slave-abort" aria-hidden="true">#</a> hal_spi_slave_abort</h3><ul><li>原型:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_status_t</span> <span class="token function">hal_spi_slave_abort</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：终止slave模式传输</li><li>参数： <ul><li>port:SPI端口号</li></ul></li><li>返回： <ul><li>0:成功</li><li>负数:失败</li></ul></li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><h3 id="master模式使用及测试范例" tabindex="-1"><a class="header-anchor" href="#master模式使用及测试范例" aria-hidden="true">#</a> Master模式使用及测试范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_config_t</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_MASTER<span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>cs_mode <span class="token operator">=</span> HAL_SPI_CS_AUTO<span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>clock_frequency <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>chipselect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>mode <span class="token operator">=</span> SPI_MODE_0<span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>sip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>flash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bit模式使用及测试范例" tabindex="-1"><a class="header-anchor" href="#bit模式使用及测试范例" aria-hidden="true">#</a> BIT模式使用及测试范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_config_t</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_BIT<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">hal_spi_master_transfer_t</span> tr <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>tx_len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bits_per_word <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试范例" tabindex="-1"><a class="header-anchor" href="#测试范例" aria-hidden="true">#</a> 测试范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_timer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_spi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span>KB<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">US</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span>US<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span>MS<span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> mode<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> bits <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> speed <span class="token operator">=</span> <span class="token number">5000000</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> verbose<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> transfer_size<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> iterations<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> default_tx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span>
    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> default_rx<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>default_tx<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>input_tx<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hex_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">size_t</span> line_size<span class="token punctuation">,</span>
             <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>address <span class="token operator">=</span> src<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>line <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s | &quot;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>length<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02X &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>address<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">%</span> line_size<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> line_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">%</span> line_size<span class="token punctuation">)</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;__ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; |&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">&lt;</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c <span class="token operator">=</span> <span class="token operator">*</span>line<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">126</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s | &quot;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 *  Unescape - process hexadecimal escape character
 *      converts shell input &quot;\\x23&quot; -&gt; 0x23
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>_dst<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>_src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> match<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>src <span class="token operator">=</span> _src<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>dst <span class="token operator">=</span> _dst<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ch<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>src <span class="token operator">==</span> <span class="token char">&#39;\\\\&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>src<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            match <span class="token operator">=</span> <span class="token function">sscanf</span><span class="token punctuation">(</span>src <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;%2x&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span>
                <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;malformed input string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            src <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ret<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span>tx<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span>rx<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_spi_master_status_t</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>
    <span class="token class-name">hal_spi_master_transfer_t</span> tr <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>tx<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>tx_len <span class="token operator">=</span> len<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>rx<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rx_len <span class="token operator">=</span> len<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>tx_single_len <span class="token operator">=</span> len<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>dummy_byte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>bits_per_word <span class="token operator">=</span> bits<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_TX_QUAD<span class="token punctuation">)</span>
        tr<span class="token punctuation">.</span>tx_nbits <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_TX_DUAL<span class="token punctuation">)</span>
        tr<span class="token punctuation">.</span>tx_nbits <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_RX_QUAD<span class="token punctuation">)</span>
        tr<span class="token punctuation">.</span>rx_nbits <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_RX_DUAL<span class="token punctuation">)</span>
        tr<span class="token punctuation">.</span>rx_nbits <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_LOOP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SPI_TX_QUAD <span class="token operator">|</span> SPI_TX_DUAL<span class="token punctuation">)</span><span class="token punctuation">)</span>
            tr<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SPI_RX_QUAD <span class="token operator">|</span> SPI_RX_DUAL<span class="token punctuation">)</span><span class="token punctuation">)</span>
            tr<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_3WIRE<span class="token punctuation">)</span>
            tr<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t send spi message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hex_dump</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;TX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hex_dump</span><span class="token punctuation">(</span>rx<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;RX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;rx/tx buffer is not same, data error!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    usec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>tv_sec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_sec<span class="token punctuation">)</span> <span class="token operator">+</span> end<span class="token punctuation">.</span>tv_usec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> usec<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_usage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prog<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: %s [-DsblHOLC3vpNR24SI]\\n&quot;</span><span class="token punctuation">,</span> prog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;  -D --device   device port to use (default 1)\\n&quot;</span>
         <span class="token string">&quot;  -s --speed    max speed (Hz)\\n&quot;</span>
         <span class="token string">&quot;  -b --bpw      bits per word\\n&quot;</span>
         <span class="token string">&quot;  -l --loop     loopback\\n&quot;</span>
         <span class="token string">&quot;  -H --cpha     clock phase\\n&quot;</span>
         <span class="token string">&quot;  -O --cpol     clock polarity\\n&quot;</span>
         <span class="token string">&quot;  -L --lsb      least significant bit first\\n&quot;</span>
         <span class="token string">&quot;  -C --cs-high  chip select active high\\n&quot;</span>
         <span class="token string">&quot;  -3 --3wire    SI/SO signals shared\\n&quot;</span>
         <span class="token string">&quot;  -v --verbose  Verbose (show tx buffer)\\n&quot;</span>
         <span class="token string">&quot;  -p            Send data (e.g. \\&quot;1234\\\\xde\\\\xad\\&quot;)\\n&quot;</span>
         <span class="token string">&quot;  -N --no-cs    no chip select\\n&quot;</span>
         <span class="token string">&quot;  -R --ready    slave pulls low to pause\\n&quot;</span>
         <span class="token string">&quot;  -2 --dual     dual transfer\\n&quot;</span>
         <span class="token string">&quot;  -4 --quad     quad transfer\\n&quot;</span>
         <span class="token string">&quot;  -S --size     transfer size\\n&quot;</span>
         <span class="token string">&quot;  -I --iter     iterations\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parse_opts</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">option</span> lopts<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;device&quot;</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;speed&quot;</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;bpw&quot;</span><span class="token punctuation">,</span>     <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;loop&quot;</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;cpha&quot;</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;H&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;cpol&quot;</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;O&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;lsb&quot;</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;L&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;cs-high&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;C&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;3wire&quot;</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;no-cs&quot;</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;N&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;ready&quot;</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;R&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;dual&quot;</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;verbose&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;quad&quot;</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;4&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;S&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token string">&quot;iter&quot;</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;I&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>

        c <span class="token operator">=</span> <span class="token function">getopt_long</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">&quot;D:s:b:lHOLC3NR24p:vS:I:&quot;</span><span class="token punctuation">,</span>
                lopts<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;D&#39;</span><span class="token operator">:</span>
            port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
            speed <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;b&#39;</span><span class="token operator">:</span>
            bits <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;l&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_LOOP<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;H&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_CPHA<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;O&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_CPOL<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;L&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_LSB_FIRST<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;C&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_CS_HIGH<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;3&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_3WIRE<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;N&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_NO_CS<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;v&#39;</span><span class="token operator">:</span>
            verbose <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;R&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_READY<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span>
            input_tx <span class="token operator">=</span> optarg<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;2&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_TX_DUAL<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;4&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">|=</span> SPI_TX_QUAD<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;S&#39;</span><span class="token operator">:</span>
            transfer_size <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;I&#39;</span><span class="token operator">:</span>
            iterations <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">print_usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_LOOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_TX_DUAL<span class="token punctuation">)</span>
            mode <span class="token operator">|=</span> SPI_RX_DUAL<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_TX_QUAD<span class="token punctuation">)</span>
            mode <span class="token operator">|=</span> SPI_RX_QUAD<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transfer_escaped_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>tx<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rx<span class="token punctuation">;</span>

    tx <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token punctuation">)</span>
        <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t allocate tx buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rx <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rx<span class="token punctuation">)</span>
        <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t allocate rx buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    size <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>tx<span class="token punctuation">,</span> str<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">transfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_free</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_free</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show_transfer_info</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> rate<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;total size   : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> MB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf MB&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> KB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf KB&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>KB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu B&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;total time   : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf s&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf ms&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf us&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MB<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;averange rate: %.2lf MB/s\\n&quot;</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">transfer_buf</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>tx<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rx<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    tx <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token punctuation">)</span>
        <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t allocate tx buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        tx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rx <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rx<span class="token punctuation">)</span>
        <span class="token function">pabort</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t allocate rx buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    usec <span class="token operator">=</span> <span class="token function">transfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_LOOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;transfer error !\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hex_dump</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;TX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hex_dump</span><span class="token punctuation">(</span>rx<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;RX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_free</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_free</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> usec<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_spidev_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_spi_master_config_t</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    port <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bits <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    speed <span class="token operator">=</span> <span class="token number">5000000</span><span class="token punctuation">;</span>
    verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    transfer_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    iterations <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    input_tx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>default_rx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>default_rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parse_opts</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> SPI_3WIRE<span class="token punctuation">)</span>
        cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_BIT<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_MASTER<span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>cs_mode <span class="token operator">=</span> HAL_SPI_CS_AUTO<span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>clock_frequency <span class="token operator">=</span> speed<span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>chipselect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>sip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>flash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;spi mode: 0x%x\\n&quot;</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;bits per word: %u\\n&quot;</span><span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;max speed: %u Hz (%u kHz)\\n&quot;</span><span class="token punctuation">,</span> speed<span class="token punctuation">,</span> speed<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>input_tx<span class="token punctuation">)</span>
        <span class="token function">transfer_escaped_string</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> input_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>transfer_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_size <span class="token operator">=</span> transfer_size <span class="token operator">*</span> iterations<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            total_usec <span class="token operator">+=</span> <span class="token function">transfer_buf</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> transfer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">show_transfer_info</span><span class="token punctuation">(</span>total_size<span class="token punctuation">,</span> total_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;averange time: %.2lf us\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>total_usec<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>iterations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
        <span class="token function">transfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> default_tx<span class="token punctuation">,</span> default_rx<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>default_tx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_spi_deinit</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_spidev_test<span class="token punctuation">,</span> hal_spidev_test<span class="token punctuation">,</span> spidev hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="slave模式使用及测试范例" tabindex="-1"><a class="header-anchor" href="#slave模式使用及测试范例" aria-hidden="true">#</a> Slave模式使用及测试范例</h2><h3 id="slave模式使用范例" tabindex="-1"><a class="header-anchor" href="#slave模式使用范例" aria-hidden="true">#</a> Slave模式使用范例</h3><p>重点代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_config_t</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_SLAVE<span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>clock_frequency <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>chipselect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
cfg<span class="token punctuation">.</span>mode <span class="token operator">=</span> SPI_MODE_0<span class="token punctuation">;</span>
<span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_timer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_thread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_spi.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;platform_spi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ARCH_SUN20IW2</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_SLAVE_THREAD_STACK_SIZE</span> <span class="token expression"><span class="token number">4096</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPI_SLAVE_THREAD_STACK_SIZE</span> <span class="token expression"><span class="token number">8192</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SLAVE_CACHE_MAX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PKT_HEAD_LEN</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OP_MASK</span>     <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDR_MASK_0</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDR_MASK_1</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN_MASK_0</span>  <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN_MASK_1</span>  <span class="token expression"><span class="token number">4</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_OP_WRITE</span>  <span class="token expression"><span class="token number">0x01</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_OP_READ</span>   <span class="token expression"><span class="token number">0x03</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_OP_HEAD</span>   <span class="token expression"><span class="token number">0xff</span></span></span>

<span class="token keyword">enum</span> <span class="token class-name">sunxi_spi_slave_status</span> <span class="token punctuation">{</span>
    SUNXI_SPI_SLAVE_NONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    SUNXI_SPI_SLAVE_RUNNING<span class="token punctuation">,</span>
    SUNXI_SPI_SLAVE_RETRY<span class="token punctuation">,</span>
    SUNXI_SPI_SLAVE_STOP<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token punctuation">{</span>
    u8 op_code<span class="token punctuation">;</span>
    u16 addr<span class="token punctuation">;</span>
    u16 len<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_frame</span> <span class="token punctuation">{</span>
    u8 data<span class="token punctuation">[</span>PKT_HEAD_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> pkt_head<span class="token punctuation">;</span>
    u8 <span class="token operator">*</span>tx_buf<span class="token punctuation">;</span>
    u8 <span class="token operator">*</span>rx_buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_cache</span> <span class="token punctuation">{</span>
    <span class="token class-name">hal_spinlock_t</span> buffer_lock<span class="token punctuation">;</span>
    u8 <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
    u32 size<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span>  port<span class="token punctuation">;</span>
    <span class="token class-name">hal_spi_master_config_t</span> cfg<span class="token punctuation">;</span>
    <span class="token class-name">hal_sem_t</span> semaphore_finished<span class="token punctuation">;</span>
    <span class="token class-name">hal_spi_master_transfer_t</span> xfer<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_frame</span> frame<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_cache</span> cache<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">sunxi_spi_slave_status</span> status<span class="token punctuation">;</span>
    <span class="token class-name">hal_thread_t</span> thread_handle<span class="token punctuation">;</span>
    <span class="token keyword">char</span> task_name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> spi_slave_test<span class="token punctuation">[</span>HAL_SPI_MASTER_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> bool <span class="token function">sunxi_spi_dump_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> line <span class="token operator">=</span> len <span class="token operator">/</span> col<span class="token punctuation">;</span>
    <span class="token keyword">int</span> last <span class="token operator">=</span> len <span class="token operator">%</span> col<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">+</span> offset<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08X: &quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> buffer<span class="token punctuation">[</span>col <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08X: &quot;</span><span class="token punctuation">,</span> col <span class="token operator">*</span> line <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> last<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> buffer<span class="token punctuation">[</span>col <span class="token operator">*</span> line <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">sunxi_spi_init_slave_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave<span class="token punctuation">,</span> u8 pattern<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool <span class="token function">sunxi_spi_slave_has_ptk_head</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>op_code <span class="token operator">||</span> head<span class="token operator">-&gt;</span>addr <span class="token operator">||</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>

    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sunxi_spi_slave_head_data_parse</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    head<span class="token operator">-&gt;</span>op_code <span class="token operator">=</span> data<span class="token punctuation">[</span>OP_MASK<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>ADDR_MASK_0<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> data<span class="token punctuation">[</span>ADDR_MASK_1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>LEN_MASK_0<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> data<span class="token punctuation">[</span>LEN_MASK_1<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sunxi_spi_slave_head_data_clear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sunxi_spi_slave_set_cache_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave<span class="token punctuation">,</span>
                                    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> u8 <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_cache</span> <span class="token operator">*</span>cache <span class="token operator">=</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">;</span>
    <span class="token keyword">int</span> real_size <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Set data addr over range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> head<span class="token operator">-&gt;</span>addr <span class="token operator">+</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        real_size <span class="token operator">=</span> cache<span class="token operator">-&gt;</span>size <span class="token operator">-</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">;</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Write size %d over range, some of data will be lost, real size to write is %d&quot;</span><span class="token punctuation">,</span>
                head<span class="token operator">-&gt;</span>len<span class="token punctuation">,</span> real_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token operator">-&gt;</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>buffer <span class="token operator">+</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> real_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token operator">-&gt;</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sunxi_spi_slave_get_cache_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave<span class="token punctuation">,</span>
                                        <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> u8 <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_cache</span> <span class="token operator">*</span>cache <span class="token operator">=</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">;</span>
    <span class="token keyword">int</span> real_size <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Get data addr over range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> head<span class="token operator">-&gt;</span>addr <span class="token operator">+</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        real_size <span class="token operator">=</span> cache<span class="token operator">-&gt;</span>size <span class="token operator">-</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">;</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;Read size %d over range, some of data will be lost, real size to read is %d&quot;</span><span class="token punctuation">,</span>
            head<span class="token operator">-&gt;</span>len<span class="token punctuation">,</span> real_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token operator">-&gt;</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> cache<span class="token operator">-&gt;</span>buffer <span class="token operator">+</span> head<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> real_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token operator">-&gt;</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sunxi_spi_slave_test_submit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>pkt_head <span class="token operator">=</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>pkt_head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token function">sunxi_spi_slave_head_data_parse</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">,</span> pkt_head<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sunxi_spi_slave_has_ptk_head</span><span class="token punctuation">(</span>pkt_head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;No Package head, wait revice from master&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pkt_head<span class="token operator">-&gt;</span>op_code <span class="token operator">=</span> SUNXI_OP_HEAD<span class="token punctuation">;</span>
        slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">sunxi_spi_slave_head_data_clear</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;op=0x%x addr=0x%x len=0x%x&quot;</span><span class="token punctuation">,</span> pkt_head<span class="token operator">-&gt;</span>op_code<span class="token punctuation">,</span> pkt_head<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> pkt_head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>pkt_head<span class="token operator">-&gt;</span>op_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SUNXI_OP_WRITE<span class="token operator">:</span>
            slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>pkt_head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>rx_buf<span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_len <span class="token operator">=</span> pkt_head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SUNXI_OP_READ<span class="token operator">:</span>
            slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>pkt_head<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>tx_buf<span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_len <span class="token operator">=</span> pkt_head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
            <span class="token function">sunxi_spi_slave_get_cache_data</span><span class="token punctuation">(</span>slave<span class="token punctuation">,</span> pkt_head<span class="token punctuation">,</span> <span class="token punctuation">(</span>u8 <span class="token operator">*</span><span class="token punctuation">)</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi slave get package operation read, send write buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sunxi_spi_dump_data</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;unknown op code %d, wait revice from master&quot;</span><span class="token punctuation">,</span> pkt_head<span class="token operator">-&gt;</span>op_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sunxi_spi_slave_head_data_clear</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pkt_head<span class="token operator">-&gt;</span>op_code <span class="token operator">=</span> SUNXI_OP_HEAD<span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">spi_slave_driver_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pArg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span><span class="token punctuation">)</span>pArg<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>pkt_head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">sunxi_spi_slave_test_submit</span><span class="token punctuation">(</span>slave<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_SPI_MASTER_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> SUNXI_SPI_SLAVE_RETRY<span class="token operator">:</span>
                <span class="token function">hal_log_warn</span><span class="token punctuation">(</span><span class="token string">&quot;slave transfer retry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sunxi_spi_slave_head_data_clear</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> SUNXI_SPI_SLAVE_STOP<span class="token operator">:</span>
                <span class="token function">hal_log_warn</span><span class="token punctuation">(</span><span class="token string">&quot;slave transfer stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> terminate<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;error status %d and ret %d&quot;</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>status<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        pkt_head <span class="token operator">=</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>pkt_head<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>pkt_head<span class="token operator">-&gt;</span>op_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SUNXI_OP_HEAD<span class="token operator">:</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi slave get package head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// sunxi_spi_dump_data(slave-&gt;xfer.rx_buf, 0, slave-&gt;xfer.len);</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SUNXI_OP_WRITE<span class="token operator">:</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi slave get package operation write, recv read buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// sunxi_spi_dump_data(slave-&gt;xfer.rx_buf, 0, slave-&gt;xfer.len);</span>
            <span class="token function">sunxi_spi_slave_set_cache_data</span><span class="token punctuation">(</span>slave<span class="token punctuation">,</span> pkt_head<span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_free</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SUNXI_OP_READ<span class="token operator">:</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;send write buffer done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">hal_log_debug</span><span class="token punctuation">(</span><span class="token string">&quot;sunxi slave get op_code filed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sunxi_spi_slave_head_data_clear</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>frame<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    retry<span class="token operator">:</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>xfer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

terminate<span class="token operator">:</span>
    <span class="token function">hal_sem_post</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>semaphore_finished<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">spi_slave_driver_abort</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave <span class="token operator">=</span> <span class="token operator">&amp;</span>spi_slave_test<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;slave transfer abort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    slave<span class="token operator">-&gt;</span>status <span class="token operator">=</span> SUNXI_SPI_SLAVE_RETRY<span class="token punctuation">;</span>
    <span class="token function">hal_spi_slave_abort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">spi_slave_driver_dump</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave <span class="token operator">=</span> <span class="token operator">&amp;</span>spi_slave_test<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">&gt;</span> slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size <span class="token operator">||</span> addr <span class="token operator">+</span> size <span class="token operator">&gt;</span> slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dump addr/size out of bounds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sunxi_spi_dump_data</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">spi_slave_driver_probe</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> freq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave <span class="token operator">=</span> <span class="token operator">&amp;</span>spi_slave_test<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">;</span>

    slave<span class="token operator">-&gt;</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>clock_frequency <span class="token operator">=</span> freq<span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>chipselect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>mode <span class="token operator">=</span> SPI_MODE_0<span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_SLAVE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>HAL_SPI_MASTER_OK <span class="token operator">!=</span> <span class="token function">hal_spi_init</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;spi init failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    slave<span class="token operator">-&gt;</span>semaphore_finished <span class="token operator">=</span> <span class="token function">hal_sem_create</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>semaphore_finished <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;[spi%d] creating semaphore_finished failed&quot;</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size <span class="token operator">=</span> SLAVE_CACHE_MAX<span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;alloc slave cache memory failed (size %d)&quot;</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sunxi_spi_init_slave_data</span><span class="token punctuation">(</span>slave<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">snprintf</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>task_name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>task_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;spi%d-slave-task\\0&quot;</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slave<span class="token operator">-&gt;</span>thread_handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>spi_slave_driver_thread<span class="token punctuation">,</span> slave<span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>task_name<span class="token punctuation">,</span>
                            SPI_SLAVE_THREAD_STACK_SIZE<span class="token punctuation">,</span> HAL_THREAD_PRIORITY_SYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>thread_handle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;create thread %s failed&quot;</span><span class="token punctuation">,</span> slave<span class="token operator">-&gt;</span>task_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    slave<span class="token operator">-&gt;</span>status <span class="token operator">=</span> SUNXI_SPI_SLAVE_RUNNING<span class="token punctuation">;</span>

    <span class="token function">hal_thread_start</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>thread_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">spi_slave_driver_remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_test</span> <span class="token operator">*</span>slave <span class="token operator">=</span> <span class="token operator">&amp;</span>spi_slave_test<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">;</span>

    slave<span class="token operator">-&gt;</span>status <span class="token operator">=</span> SUNXI_SPI_SLAVE_STOP<span class="token punctuation">;</span>
    <span class="token function">hal_spi_slave_abort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sem_wait</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>semaphore_finished<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_thread_stop</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>thread_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_free</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_spin_lock_deinit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>slave<span class="token operator">-&gt;</span>cache<span class="token punctuation">.</span>buffer_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_spi_deinit</span><span class="token punctuation">(</span>slave<span class="token operator">-&gt;</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_usage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s probe &lt;port&gt; &lt;freq&gt;&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s remove &lt;port&gt;&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s abort &lt;port&gt;&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s dump &lt;port&gt; &lt;addr&gt; &lt;size&gt;&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_spi_slave_driver</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> freq<span class="token punctuation">;</span>
    <span class="token keyword">int</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print_usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> port <span class="token operator">&gt;</span> HAL_SPI_MASTER_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;spi port %d not exist&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;probe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        freq <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">spi_slave_driver_probe</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;remove&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">spi_slave_driver_remove</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;abort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">spi_slave_driver_abort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;dump&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addr <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">spi_slave_driver_dump</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        <span class="token function">print_usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_spi_slave_driver<span class="token punctuation">,</span> hal_spi_slave_driver<span class="token punctuation">,</span> spi hal slave driver test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slave-模式测试范例" tabindex="-1"><a class="header-anchor" href="#slave-模式测试范例" aria-hidden="true">#</a> Slave 模式测试范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_timer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_spi.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;platform_spi.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PKT_HEAD_LEN</span> <span class="token expression"><span class="token number">5</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OP_MASK</span>     <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDR_MASK_0</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDR_MASK_1</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN_MASK_0</span>  <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN_MASK_1</span>  <span class="token expression"><span class="token number">4</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_OP_WRITE</span>  <span class="token expression"><span class="token number">0x01</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_OP_READ</span>   <span class="token expression"><span class="token number">0x03</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PKT_HEAD_DELAY</span>  <span class="token expression"><span class="token number">100</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PKT_XFER_DELAY</span>  <span class="token expression"><span class="token number">500</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span>KB<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">US</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span>US<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span>MS<span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> op_code<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> verbose<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hex_dump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">size_t</span> line_size<span class="token punctuation">,</span>
             <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>address <span class="token operator">=</span> src<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>line <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s | &quot;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>length<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02X &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>address<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">%</span> line_size<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> line_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">%</span> line_size<span class="token punctuation">)</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;__ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; |&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">&lt;</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c <span class="token operator">=</span> <span class="token operator">*</span>line<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">126</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s | &quot;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show_transfer_info</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> rate<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;total size   : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> MB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf MB&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> KB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf KB&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>KB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu B&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;total time   : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf s&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf ms&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;=</span> US<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf us&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu ns&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>MB<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>time <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;averange rate: %.2lf MB/s\\n&quot;</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">transfer_pkg_create</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    buf<span class="token punctuation">[</span>OP_MASK<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token operator">-&gt;</span>op_code<span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>ADDR_MASK_0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>addr <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>ADDR_MASK_1<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token operator">-&gt;</span>addr <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>LEN_MASK_0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>len <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span>LEN_MASK_1<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">transfer_slave_package</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>tx_buf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>rx_buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> head_buf<span class="token punctuation">[</span>PKT_HEAD_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">hal_spi_master_transfer_t</span> tr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">transfer_pkg_create</span><span class="token punctuation">(</span>head_buf<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;package head : { &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PKT_HEAD_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%02x &quot;</span><span class="token punctuation">,</span> head_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>head_buf<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_nbits <span class="token operator">=</span> SPI_NBITS_SINGLE<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_single_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_nbits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>tx_buf<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_nbits <span class="token operator">=</span> SPI_NBITS_SINGLE<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_len <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tx_single_len <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>rx_buf<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_nbits <span class="token operator">=</span> SPI_NBITS_SINGLE<span class="token punctuation">;</span>
    tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rx_len <span class="token operator">=</span> head<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>

    <span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_usleep</span><span class="token punctuation">(</span>PKT_HEAD_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">transfer_slave</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spi_slave_head</span> pkt_head<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nsec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    tx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        tx_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>

    rx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Write forward</span>
    pkt_head<span class="token punctuation">.</span>op_code <span class="token operator">=</span> SUNXI_OP_WRITE<span class="token punctuation">;</span>
    pkt_head<span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    pkt_head<span class="token punctuation">.</span>len <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token function">transfer_slave_package</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt_head<span class="token punctuation">,</span> tx_buf<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_usleep</span><span class="token punctuation">(</span>PKT_XFER_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Read back</span>
    pkt_head<span class="token punctuation">.</span>op_code <span class="token operator">=</span> SUNXI_OP_READ<span class="token punctuation">;</span>
    pkt_head<span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    pkt_head<span class="token punctuation">.</span>len <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token function">transfer_slave_package</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt_head<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Debug</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hex_dump</span><span class="token punctuation">(</span>tx_buf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;TX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hex_dump</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;RX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Compare buffer</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>tx_buf<span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rx/tx buffer is not same, compare error!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        nsec <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>tv_sec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_sec<span class="token punctuation">)</span> <span class="token operator">+</span> end<span class="token punctuation">.</span>tv_usec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>tx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> nsec<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_usage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s &lt;port&gt; &lt;freq&gt; &lt;addr&gt; &lt;size&gt; &lt;loop&gt; [debug]&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_spi_slave</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span>  port<span class="token punctuation">;</span>
    <span class="token class-name">hal_spi_master_config_t</span> cfg<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> loop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> usec<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print_usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> port <span class="token operator">&gt;</span> HAL_SPI_MASTER_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;spi port %d not exist&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    addr <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    loop <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        verbose <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> 
        verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;run spi slave test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cfg<span class="token punctuation">.</span>clock_frequency <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>chipselect <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>mode <span class="token operator">=</span> SPI_MODE_0<span class="token punctuation">;</span>
    cfg<span class="token punctuation">.</span>bus_mode <span class="token operator">=</span> HAL_SPI_BUS_MASTER<span class="token punctuation">;</span>
    <span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;max speed: %u Hz (%u kHz)&quot;</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>clock_frequency<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>clock_frequency<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;op addr : %d&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;op size : %d&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            usec <span class="token operator">=</span> <span class="token function">transfer_slave</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>usec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                total_usec <span class="token operator">+=</span> usec<span class="token punctuation">;</span>
                total_size <span class="token operator">+=</span> <span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">show_transfer_info</span><span class="token punctuation">(</span>total_size<span class="token punctuation">,</span> total_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;averange time: %.2lf us\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>total_usec<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>US<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_spi_deinit</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;spi slave test finish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_spi_slave<span class="token punctuation">,</span> hal_spi_slave_test<span class="token punctuation">,</span> spi hal slave tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="调试方法" tabindex="-1"><a class="header-anchor" href="#调试方法" aria-hidden="true">#</a> 调试方法</h1><p>使用 <code>hal_log_info/warn/err/debug</code> 等调试打印方法，可以根据需求修改系统配置，达到不同的打印等级</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPI_INFO</span><span class="token expression"><span class="token punctuation">(</span>sspi<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">hal_log_info</span><span class="token punctuation">(</span></span><span class="token string">&quot;hal-sspi %08lx.sspi%d: &quot;</span> <span class="token expression">fmt<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>base<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>bus_num<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPI_WARN</span><span class="token expression"><span class="token punctuation">(</span>sspi<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">hal_log_warn</span><span class="token punctuation">(</span></span><span class="token string">&quot;hal-sspi %08lx.sspi%d: &quot;</span> <span class="token expression">fmt<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>base<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>bus_num<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPI_ERR</span><span class="token expression"><span class="token punctuation">(</span>sspi<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token function">hal_log_err</span><span class="token punctuation">(</span></span><span class="token string">&quot;hal-sspi %08lx.sspi%d: &quot;</span> <span class="token expression">fmt<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>base<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>bus_num<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SPI_DBG</span><span class="token expression"><span class="token punctuation">(</span>sspi<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token function">hal_log_debug</span><span class="token punctuation">(</span></span><span class="token string">&quot;hal-sspi %08lx.sspi%d: &quot;</span> <span class="token expression">fmt<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>base<span class="token punctuation">,</span> sspi<span class="token operator">-&gt;</span>bus_num<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>SPI_DATA_LEVEL/SPI_DUMPREG_LEVEL</code> 宏开关，可以在传输的过程中打印收发数据 <code>buffer</code> 及控制器寄存器值</p><h2 id="调试工具" tabindex="-1"><a class="header-anchor" href="#调试工具" aria-hidden="true">#</a> 调试工具</h2><p>如果在 <code>menuconfig</code> 中将 <code>spi test</code> 配置打开，那么可以在 RTOS 系统中运行相应的 SPI 调试命令。</p><p><code>hal_spidev_test</code> 测试SPI Single模式，可以配置端口，频率，数据量，循环次数等参数</p><ul><li><code>hal_spidev_test -D &lt;port&gt; -s &lt;freq&gt; -S &lt;size&gt; -I &lt;loop&gt; [-v]</code></li></ul><p><code>hal_spi_slave_driver</code> Slave模式驱动，需要先再slave设备端跑起该驱动，才能在master端进行相应测试</p><ul><li><code>hal_spi_slave_driver probe &lt;port&gt; &lt;freq&gt;</code></li><li><code>hal_spi_slave_driver remove &lt;port&gt;</code></li><li><code>hal_spi_slave_driver abort &lt;port&gt;</code></li><li><code>hal_spi_slave_driver dump &lt;port&gt; &lt;addr&gt; &lt;size&gt;</code></li></ul><p><code>hal_spi_slave_test</code> Slave模式测试命令，该命令需要在master端运行</p><ul><li><code>hal_spi_slave_test &lt;port&gt; &lt;freq&gt; &lt;addr&gt; &lt;size&gt; &lt;loop&gt; [debug]</code></li></ul><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="多笔数据连续发送时-如何让cs脚保持使能" tabindex="-1"><a class="header-anchor" href="#多笔数据连续发送时-如何让cs脚保持使能" aria-hidden="true">#</a> 多笔数据连续发送时，如何让CS脚保持使能</h3><p><strong>问题现象</strong>：每包数据发送后，CS脚都会翻转一次，重新使能，导致与外设通信异常</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter25/image2.png" alt=""></p><p><strong>解决方法</strong>：将 <code>cs_mode</code> 配置为手动，并将需要CS信号包在内的多包数据，一次性传给驱动</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_spi_master_config_t</span> cfg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">hal_spi_master_transfer_t</span> tr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
cfg<span class="token punctuation">.</span>cs_mode <span class="token operator">=</span> HAL_SPI_CS_SOFT<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">hal_spi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">hal_spi_xfer</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter25.html.vue"]]);export{r as default};
