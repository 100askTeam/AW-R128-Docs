import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="rtos-多媒体编码" tabindex="-1"><a class="header-anchor" href="#rtos-多媒体编码" aria-hidden="true">#</a> RTOS 多媒体编码</h1><p>介绍 FreeRTOS 下如何使用 xrecorder 的接口来开发录制应用程序，方便录制应用开发人员快速正确地开发，以及录制应用测试人员如何根据该文档对基于 xrecord 的录制应用进行验证测试。</p><h2 id="编码支持情况" tabindex="-1"><a class="header-anchor" href="#编码支持情况" aria-hidden="true">#</a> 编码支持情况</h2><p>目前 RTOS 平台多媒体编码应用支持的编码格式分别为：pcm、amr、mp3、speex、opus。</p><p>其中 pcm、amr、mp3 可通过 xrecorder 进行编码以及录制；speex 和 opus 可通过第三方示例工程进行编码。</p><h2 id="xrecorder-状态图" tabindex="-1"><a class="header-anchor" href="#xrecorder-状态图" aria-hidden="true">#</a> xrecorder 状态图</h2><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter2/image1.png" alt=""></p><p>这张状态转换图清晰地描述了 xrecorder 的各个状态，也列举了主要的方法的调用时序，每种方法只能在一些特定的状态下使用，否则会出错。</p><h3 id="init-状态" tabindex="-1"><a class="header-anchor" href="#init-状态" aria-hidden="true">#</a> Init 状态</h3><p>Idle 状态：当调用 XRecordCreate() 创建一个 xrecord 时，处于 idle 状态。</p><h3 id="prepared-状态" tabindex="-1"><a class="header-anchor" href="#prepared-状态" aria-hidden="true">#</a> Prepared 状态</h3><p>调用 XRecordPrepare() 函数并返回后，xrecorder 处于 Prepared 状态。在这个状态下说明所有的资源都已经就绪了，调用 XRecordStart() 函数就可以进行录制。</p><h3 id="started-状态" tabindex="-1"><a class="header-anchor" href="#started-状态" aria-hidden="true">#</a> Started 状态</h3><p>xrecorder prepare 完成后，调用 XRecordStart() 进行录制，当应用开始录制后，xrecorder 就处于 Started 状态，这表明 xrecorder 正在录制文件。</p><h3 id="stopped-状态" tabindex="-1"><a class="header-anchor" href="#stopped-状态" aria-hidden="true">#</a> Stopped 状态</h3><p>Started 状态下均可调用 XrecordStop() 停止 xrecorder，而处于 Stop 状态的 xrecorder 要想重新录制，需要通过 XRecorderPrepare() 回到先前的 Prepared 状态重新开始才可以。</p><h3 id="destroyed-状态" tabindex="-1"><a class="header-anchor" href="#destroyed-状态" aria-hidden="true">#</a> Destroyed 状态</h3><p>通过 XRecordDestroy() 的方法可以进入 Destroyed 状态，只要 xrecorder 不再被使用，就应当尽快将其 destroy 掉。</p><h2 id="接口函数" tabindex="-1"><a class="header-anchor" href="#接口函数" aria-hidden="true">#</a> 接口函数</h2><h3 id="创建一个-xrecord" tabindex="-1"><a class="header-anchor" href="#创建一个-xrecord" aria-hidden="true">#</a> 创建一个 XRecord</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>XRecord <span class="token operator">*</span><span class="token function">XRecordCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="设置录制音频的编码格式" tabindex="-1"><a class="header-anchor" href="#设置录制音频的编码格式" aria-hidden="true">#</a> 设置录制音频的编码格式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordSetAudioEncodeType</span><span class="token punctuation">(</span>XRecord <span class="token operator">*</span>p<span class="token punctuation">,</span> XRECODER_AUDIO_ENCODE_TYPE type<span class="token punctuation">,</span> XRecordConfig <span class="token operator">*</span>config<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p: 通过 XRecordCreate 创建的 XRecord 指针</li><li>type: 已支持的编码格式</li><li>config: 上层应用对音频属性的配置</li></ul><p>返回值：</p><ul><li>成功: 0; 失败: ‑1</li></ul><h3 id="获取指针" tabindex="-1"><a class="header-anchor" href="#获取指针" aria-hidden="true">#</a> 获取指针</h3><p>获取指向音频设备管理模块的指针，用于录制音频</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">XRecordSetAudioCap</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> CaptureCtrl<span class="token operator">*</span> audioSrc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p: 通过 XRecordCreate 创建的 XRecord 指针</li><li>audioSrc: 由上层应用获取的音频设备管理模块的指针</li></ul><p>返回值：</p><ul><li>无</li></ul><p>audioSrc 可在上层应用通过调用 cedarx 的音频设备管理模块的 RTCaptureDeviceCreate 来创建。</p><h3 id="设置录制后文件的保存的路径" tabindex="-1"><a class="header-anchor" href="#设置录制后文件的保存的路径" aria-hidden="true">#</a> 设置录制后文件的保存的路径</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordSetDataDstUrl</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pUrl<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">,</span> <span class="token keyword">const</span> CdxKeyedVectorT<span class="token operator">*</span> pHeaders<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p: 通过 XRecordCreate 创建的 XRecord 指针</li><li>pUrl：url 地址</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><h3 id="将-xrecord-置为准备状态-准备-muxer" tabindex="-1"><a class="header-anchor" href="#将-xrecord-置为准备状态-准备-muxer" aria-hidden="true">#</a> 将 XRecord 置为准备状态, 准备 Muxer</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordPrepare</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XRecordCreate 创建的 XRecord 指针</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><h3 id="将-xrecord-置为启动状态" tabindex="-1"><a class="header-anchor" href="#将-xrecord-置为启动状态" aria-hidden="true">#</a> 将 XRecord 置为启动状态</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordStart</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XRecordCreate 创建的 XRecord 指针</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><h3 id="将-xrecord-置为停止状态" tabindex="-1"><a class="header-anchor" href="#将-xrecord-置为停止状态" aria-hidden="true">#</a> 将 XRecord 置为停止状态</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordStop</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XRecordCreate 创建的 XRecord 指针</li></ul><p>返回值：</p><ul><li>成功： 0；失败：‑1</li></ul><h3 id="编码数据入队封装" tabindex="-1"><a class="header-anchor" href="#编码数据入队封装" aria-hidden="true">#</a> 编码数据入队封装</h3><p>提供接口给下层编码模块，将编码数据放进缓存队列中等待封装</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">onAudioDataEnc</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> app<span class="token punctuation">,</span> CdxMuxerPacketT<span class="token operator">*</span> buff<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>app: xrecorder 的环境句柄；</li><li>buff：编码后的缓存数据</li></ul><p>返回值：</p><ul><li>成功： 0；失败：‑1</li></ul><h3 id="销毁一个-xrecord" tabindex="-1"><a class="header-anchor" href="#销毁一个-xrecord" aria-hidden="true">#</a> 销毁一个 XRecord</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XRecordDestroy</span><span class="token punctuation">(</span>XRecord<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XRecordCreate 创建的 XRecord 指针</li></ul><p>返回值：</p><ul><li>成功： 0；失败：‑1</li></ul><h2 id="xrecorder-开发流程" tabindex="-1"><a class="header-anchor" href="#xrecorder-开发流程" aria-hidden="true">#</a> XRecorder 开发流程</h2><ol><li><code>XRecordCreate()</code> //创建一个录制应用</li><li><code>XRecordSetAudioCap()</code> //设置音频采集设备；可先调用 <code>RTCaptureDeviceCreate</code> 创建。</li><li><code>XRecordSetDataDstUrl()</code> //设置录制后文件保存位置</li><li><code>XRecordSetAudioEncodeType()</code> //设置音频数据的编码格式</li><li><code>XRecordPrepare()</code> //设置 Muxer，让 xrecorder 进入准备状态</li><li><code>XRecordStart()</code> //开始录制</li><li><code>XRecordStop()</code> //停止录制</li><li><code>XRecordDestroy()</code> //当不需要进行录制的时候，销毁 xrecorder</li></ol><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ol><li>在调用 XRecordSetAudioCap 设置音频采集设备之前，需先打开音频采集设备来获取句柄。在 rtos 平台可调用 libcedarx 提供的音频采集设备控制模块 rtosCaptureControl.c 中的 <code>RTCaptureDeviceCreate</code> 来创建句柄。</li><li>recorder 应用未支持暂停录制。</li><li>recorder 的录制时长为调用 XRecordStart 至调用 XRecordStop 之间的时长来决定，因此上层应用需要录制指定时长的音频时，录制的步骤应为调用 XRecordStart，等待指定的时间，调用XRecordStop。</li></ol><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;aw_common.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;vfs.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xrecord.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RECORDER_LOGD</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[RECORDER_DBG] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RECORDER_LOGI</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[RECORDER_INFO] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RECORDER_LOGW</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[RECORDER_WRN] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RECORDER_LOGE</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[RECORDER_ERR] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">recorder_base</span> recorder_base<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">rec_cfg</span>
<span class="token punctuation">{</span>
    XRECODER_AUDIO_ENCODE_TYPE   type<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                 sample_rate<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                 chan_num<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                 bitrate<span class="token punctuation">;</span>
    <span class="token keyword">int</span>                 sampler_bits<span class="token punctuation">;</span>
<span class="token punctuation">}</span> rec_cfg<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">recorder_base</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>url<span class="token punctuation">,</span> <span class="token keyword">const</span> rec_cfg <span class="token operator">*</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>stop<span class="token punctuation">)</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span>
<span class="token punctuation">{</span>
    CdxWriterT base<span class="token punctuation">;</span>
    <span class="token class-name">vfs_file_t</span> <span class="token operator">*</span>vfs<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">recorder</span>
<span class="token punctuation">{</span>
    recorder_base base<span class="token punctuation">;</span>
    XRecord <span class="token operator">*</span>xrecorder<span class="token punctuation">;</span>
    CaptureCtrl <span class="token operator">*</span>cap<span class="token punctuation">;</span>
<span class="token punctuation">}</span> recorder<span class="token punctuation">;</span>

recorder_base <span class="token operator">*</span><span class="token function">recorder_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">recorder_destroy</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Example Customer Writer */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__CdxExampleConnect</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span>impl<span class="token punctuation">;</span>

    impl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span><span class="token punctuation">)</span>writer<span class="token punctuation">;</span>

    <span class="token function">vfs_unlink</span><span class="token punctuation">(</span><span class="token string">&quot;data/record/2.amr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    impl<span class="token operator">-&gt;</span>vfs <span class="token operator">=</span> <span class="token function">vfs_open</span><span class="token punctuation">(</span><span class="token string">&quot;data/record/2.amr&quot;</span><span class="token punctuation">,</span> VFS_RDWR <span class="token operator">|</span> VFS_CREAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>vfs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__CdxExampleRead</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__CdxExampleWrite</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> write_len<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span>impl<span class="token punctuation">;</span>

    impl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span><span class="token punctuation">)</span>writer<span class="token punctuation">;</span>

    write_len <span class="token operator">=</span> <span class="token function">vfs_write</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>vfs<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> write_len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__CdxExampleSeek</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">,</span> <span class="token keyword">long</span> moffset<span class="token punctuation">,</span> <span class="token keyword">int</span> mwhere<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__CdxExampleTell</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__CdxExampleClose</span><span class="token punctuation">(</span>CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span>impl<span class="token punctuation">;</span>

    impl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span><span class="token punctuation">)</span>writer<span class="token punctuation">;</span>

    <span class="token function">vfs_close</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>vfs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">CdxWriterOps</span> exampleCustomerWriteOps <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>cdxConnect   <span class="token operator">=</span>  __CdxExampleConnect<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cdxRead      <span class="token operator">=</span>  __CdxExampleRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cdxWrite     <span class="token operator">=</span>  __CdxExampleWrite<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cdxSeek      <span class="token operator">=</span>  __CdxExampleSeek<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cdxTell      <span class="token operator">=</span>  __CdxExampleTell<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cdxClose     <span class="token operator">=</span>  __CdxExampleClose
<span class="token punctuation">}</span><span class="token punctuation">;</span>

CdxWriterT <span class="token operator">*</span><span class="token function">ExampleCustomerWriterCreat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ExampleCustomerWriterImpl</span> <span class="token operator">*</span>impl<span class="token punctuation">;</span>

    impl <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;example customer writer create fail.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>impl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    impl<span class="token operator">-&gt;</span>base<span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token operator">&amp;</span>exampleCustomerWriteOps<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span>impl<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Main App */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* This is a simple audio recoder, when it is started, you can input commands to tell\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* what you want it to do.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* Usage: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   cedarx_record amr 10  : this means record 10s amr music\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   cedarx_record pcm 10  : this means record 10s pcm music\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

recorder <span class="token operator">*</span>recorder_singleton <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">record_start</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>url<span class="token punctuation">,</span> <span class="token keyword">const</span> rec_cfg <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    recorder <span class="token operator">*</span>impl <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> recorder<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>

    XRecordConfig audioConfig<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token operator">-&gt;</span>type <span class="token operator">==</span> XRECODER_AUDIO_ENCODE_PCM_TYPE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        audioConfig<span class="token punctuation">.</span>nChan <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>chan_num<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nSamplerate <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>sample_rate<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nSamplerBits <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>sampler_bits<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nBitrate <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>bitrate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token operator">-&gt;</span>type <span class="token operator">==</span> XRECODER_AUDIO_ENCODE_AMR_TYPE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        audioConfig<span class="token punctuation">.</span>nChan <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nSamplerate <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span><span class="token comment">//amr-nb 8000Hz amr-wb 16000Hz</span>
        audioConfig<span class="token punctuation">.</span>nSamplerBits <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nBitrate <span class="token operator">=</span> <span class="token number">12200</span><span class="token punctuation">;</span><span class="token comment">//amr-nb 12200  amr-wb 23850</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        audioConfig<span class="token punctuation">.</span>nChan <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>chan_num<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nSamplerate <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>sample_rate<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nSamplerBits <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>sampler_bits<span class="token punctuation">;</span>
        audioConfig<span class="token punctuation">.</span>nBitrate <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>bitrate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">XRecordSetDataDstUrl</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">XRecordSetAudioEncodeType</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>audioConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">XRecordPrepare</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">XRecordStart</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RECORDER_LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;record start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">record_stop</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    recorder <span class="token operator">*</span>impl <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> recorder<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">XRecordStop</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">extern</span> CaptureCtrl<span class="token operator">*</span> <span class="token function">RTCaptureDeviceCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

recorder_base <span class="token operator">*</span><span class="token function">recorder_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recorder_singleton <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span>recorder_singleton<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span>

    recorder <span class="token operator">*</span>impl <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>impl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    impl<span class="token operator">-&gt;</span>xrecorder <span class="token operator">=</span> <span class="token function">XRecordCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>

    impl<span class="token operator">-&gt;</span>cap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">RTCaptureDeviceCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>cap <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> failed<span class="token punctuation">;</span>
    <span class="token function">XRecordSetAudioCap</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">,</span> impl<span class="token operator">-&gt;</span>cap<span class="token punctuation">)</span><span class="token punctuation">;</span>

    impl<span class="token operator">-&gt;</span>base<span class="token punctuation">.</span>start <span class="token operator">=</span> record_start<span class="token punctuation">;</span>
    impl<span class="token operator">-&gt;</span>base<span class="token punctuation">.</span>stop <span class="token operator">=</span> record_stop<span class="token punctuation">;</span>

    recorder_singleton <span class="token operator">=</span> impl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span>impl<span class="token operator">-&gt;</span>base<span class="token punctuation">;</span>

failed<span class="token operator">:</span>
    <span class="token function">RECORDER_LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;recorder create failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span>
        <span class="token function">XRecordDestroy</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token punctuation">)</span>
        <span class="token function">free</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">recorder_destroy</span><span class="token punctuation">(</span>recorder_base <span class="token operator">*</span>base<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    recorder <span class="token operator">*</span>impl <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> recorder<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">XRecordDestroy</span><span class="token punctuation">(</span>impl<span class="token operator">-&gt;</span>xrecorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">free</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    recorder_singleton <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cedarx_record_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    recorder_base <span class="token operator">*</span>recorder<span class="token punctuation">;</span>
    rec_cfg cfg<span class="token punctuation">;</span>
    <span class="token keyword">char</span> music_url<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> file_url<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    CdxWriterT <span class="token operator">*</span>writer<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">&quot;amr&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;amr&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            cfg<span class="token punctuation">.</span>type <span class="token operator">=</span> XRECODER_AUDIO_ENCODE_AMR_TYPE<span class="token punctuation">;</span>
            <span class="token function">snprintf</span><span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">&quot;file://data/%ds.amr&quot;</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sample_rate <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span><span class="token comment">//8000</span>
            cfg<span class="token punctuation">.</span>chan_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1</span>
            cfg<span class="token punctuation">.</span>bitrate <span class="token operator">=</span> <span class="token number">12200</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sampler_bits <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">&quot;pcm&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;pcm&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            cfg<span class="token punctuation">.</span>type <span class="token operator">=</span> XRECODER_AUDIO_ENCODE_PCM_TYPE<span class="token punctuation">;</span>
            <span class="token function">snprintf</span><span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">&quot;file://data/%ds.pcm&quot;</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sample_rate <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span><span class="token comment">//8000</span>
            cfg<span class="token punctuation">.</span>chan_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1</span>
            cfg<span class="token punctuation">.</span>bitrate <span class="token operator">=</span> <span class="token number">12200</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sampler_bits <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">&quot;mp3&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;mp3&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            cfg<span class="token punctuation">.</span>type <span class="token operator">=</span> XRECODER_AUDIO_ENCODE_MP3_TYPE<span class="token punctuation">;</span>
            <span class="token function">snprintf</span><span class="token punctuation">(</span>file_url<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">&quot;file://data/%ds.mp3&quot;</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sample_rate <span class="token operator">=</span> <span class="token number">16000</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>chan_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>bitrate <span class="token operator">=</span> <span class="token number">32000</span><span class="token punctuation">;</span>
            cfg<span class="token punctuation">.</span>sampler_bits <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;now support!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the parameter is error,usage is as following:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    recorder <span class="token operator">=</span> <span class="token function">recorder_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recorder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recorder create fail, exit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;===start record %s now, last for %d s===\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    recorder<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>recorder<span class="token punctuation">,</span> file_url<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    recorder<span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span>recorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;record %s over.\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exit<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">recorder_destroy</span><span class="token punctuation">(</span>recorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cedarx_record_test<span class="token punctuation">,</span> cedarx_record<span class="token punctuation">,</span> cedarx record test demo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,82),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter2.html.vue"]]);export{r as default};
