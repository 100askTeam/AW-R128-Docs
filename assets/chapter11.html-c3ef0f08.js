import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const p={},e=t(`<h1 id="pmu" tabindex="-1"><a class="header-anchor" href="#pmu" aria-hidden="true">#</a> PMU</h1><p>PMU - 电源管理单元，负责系统各模块供电及电池充放电管理。</p><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>regulator 相关配置项：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ---&gt;
    soc related device drivers ---&gt;
        REGULATOR Devices ---&gt;
            [*] enable regulator driver
            [*] regulator test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>power 相关配置项：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ---&gt;
    soc related device drivers ---&gt;
        POWER Devices ---&gt;
            [*] enable power driver
                [*] use axp2585
                [*] regulator test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构介绍" tabindex="-1"><a class="header-anchor" href="#源码结构介绍" aria-hidden="true">#</a> 源码结构介绍</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/rtos-hal/hal/source/power/
├── axp2585.c
├── axp2585.h
├── axp.c
├── axp_twi.c
├── ffs.h
├── Kconfig
├── Makefile
├── sun20iw2p1
│ └── core.c
└── type.h

lichee/rtos-hal/hal/source/regulator/
├── Kconfig
├── Makefile
└── sun20iw2p1
  └── core.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_power.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_regulator.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regulator-相关结构体" tabindex="-1"><a class="header-anchor" href="#regulator-相关结构体" aria-hidden="true">#</a> regulator 相关结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">regulator_ops</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>enable<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>disable<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>set_voltage<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target_uV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>get_voltage<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>vol_uV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>set_en<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>set_voltage_ext<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> target_uV<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>get_voltage_ext<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>vol_uV<span class="token punctuation">,</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">regulator_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>private<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="power-相关结构体" tabindex="-1"><a class="header-anchor" href="#power-相关结构体" aria-hidden="true">#</a> power 相关结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">power_dev</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">bat_power_ops</span> <span class="token operator">*</span>bat_ops<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">usb_power_ops</span> <span class="token operator">*</span>usb_ops<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">power_supply</span>  <span class="token operator">*</span>config<span class="token punctuation">;</span>
    <span class="token class-name">hal_sem_t</span> irq_schd<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regulator-获取电路接口" tabindex="-1"><a class="header-anchor" href="#regulator-获取电路接口" aria-hidden="true">#</a> regulator 获取电路接口</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_regulator_get</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> request_flag<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev: 指定regulator的结构体</li><li>request_flag: 指定regulator的电路参数</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="regulator-电路使能接口" tabindex="-1"><a class="header-anchor" href="#regulator-电路使能接口" aria-hidden="true">#</a> regulator 电路使能接口</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_regulator_set_able</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev: 指定regulator的结构体</li><li>flags: 电路开关状态</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="regulator-获取电压接口" tabindex="-1"><a class="header-anchor" href="#regulator-获取电压接口" aria-hidden="true">#</a> regulator 获取电压接口</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_regulator_get_voltage_ext</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>vol_uV<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev: 指定regulator的结构体</li><li>vol_uV: 获取的电压信息</li><li>status: 运行/休眠时的电压</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="regulator-调节电压接口" tabindex="-1"><a class="header-anchor" href="#regulator-调节电压接口" aria-hidden="true">#</a> regulator 调节电压接口</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_regulator_set_voltage_ext</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> target_uV<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> status<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev: 指定regulator的结构体</li><li>target_uV: 指定调压信息</li><li>status: 运行/休眠时的电压</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="power-初始化" tabindex="-1"><a class="header-anchor" href="#power-初始化" aria-hidden="true">#</a> power 初始化</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="获取当前-power-驱动" tabindex="-1"><a class="header-anchor" href="#获取当前-power-驱动" aria-hidden="true">#</a> 获取当前 power 驱动</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化前的 power_dev 结构体</li></ul><p>返回值：</p><ul><li>0</li></ul><h3 id="获取电池电量信息" tabindex="-1"><a class="header-anchor" href="#获取电池电量信息" aria-hidden="true">#</a> 获取电池电量信息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_bat_cap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>电池电量，[0‑100]</li><li>失败：‑1</li></ul><h3 id="获取库仑计信息" tabindex="-1"><a class="header-anchor" href="#获取库仑计信息" aria-hidden="true">#</a> 获取库仑计信息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_coulumb_counter</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回电流大小，单位mA</li><li>失败：‑1</li></ul><h3 id="查看电池当前状态" tabindex="-1"><a class="header-anchor" href="#查看电池当前状态" aria-hidden="true">#</a> 查看电池当前状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_bat_present</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：电池有效返回1，否则返回0</li><li>失败：‑1</li></ul><h3 id="查看电池是否连接" tabindex="-1"><a class="header-anchor" href="#查看电池是否连接" aria-hidden="true">#</a> 查看电池是否连接</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_bat_online</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：电池存在返回1，否则返回0</li><li>失败：‑1</li></ul><h3 id="获取电池充电状态" tabindex="-1"><a class="header-anchor" href="#获取电池充电状态" aria-hidden="true">#</a> 获取电池充电状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_bat_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回电池的多种状态，[0] 未知状态；[1] 充电状态；[3] 连接单不充电；[4] 充满电。</li><li>失败：‑1</li></ul><h3 id="获取电池当前的健康状态" tabindex="-1"><a class="header-anchor" href="#获取电池当前的健康状态" aria-hidden="true">#</a> 获取电池当前的健康状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_bat_health</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回1，电池健康</li><li>失败：‑1</li></ul><h3 id="获取电池电压" tabindex="-1"><a class="header-anchor" href="#获取电池电压" aria-hidden="true">#</a> 获取电池电压</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_vbat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回当前电压，单位mV</li><li>失败：‑1</li></ul><h3 id="获取充电电流" tabindex="-1"><a class="header-anchor" href="#获取充电电流" aria-hidden="true">#</a> 获取充电电流</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_ibat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回当前充电电流，单位mA</li><li>失败：‑1</li></ul><h3 id="获取放电电流" tabindex="-1"><a class="header-anchor" href="#获取放电电流" aria-hidden="true">#</a> 获取放电电流</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_disibat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：返回当前放电电流，单位mA</li><li>失败：‑1</li></ul><h3 id="获取-axp-ic-温度" tabindex="-1"><a class="header-anchor" href="#获取-axp-ic-温度" aria-hidden="true">#</a> 获取 AXP IC 温度</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_temp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：当前AXP IC 温度，单位为温度数值*10</li><li>失败：‑1</li></ul><h3 id="获取电池温度" tabindex="-1"><a class="header-anchor" href="#获取电池温度" aria-hidden="true">#</a> 获取电池温度</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_temp_ambient</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>成功：当前电池温度，单位为温度数值*10</li></ul><p>返回值：</p><ul><li>失败：‑1</li></ul><h3 id="设置充电电流" tabindex="-1"><a class="header-anchor" href="#设置充电电流" aria-hidden="true">#</a> 设置充电电流</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_set_chg_cur</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li><li>cur：充电电流大小，单位mA</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="设置充电截止电压" tabindex="-1"><a class="header-anchor" href="#设置充电截止电压" aria-hidden="true">#</a> 设置充电截止电压</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_set_chg_vol</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> vol<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li><li>vol：充电截止电压，单位mV</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="设置电池开关" tabindex="-1"><a class="header-anchor" href="#设置电池开关" aria-hidden="true">#</a> 设置电池开关</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_set_batfet</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> onoff<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li><li>onoff：电池开关，0 关闭电池与电路连接，1 打开连接</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="获取当前usb-状态" tabindex="-1"><a class="header-anchor" href="#获取当前usb-状态" aria-hidden="true">#</a> 获取当前USB 状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_usb_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：[1]USB 连接，有VBUS；[0] 无USB 连接，无VBUS</li><li>失败：‑1</li></ul><h3 id="获取usb-口输入限流值" tabindex="-1"><a class="header-anchor" href="#获取usb-口输入限流值" aria-hidden="true">#</a> 获取USB 口输入限流值</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_usb_ihold</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：USB 口限流的电流值，单位mA</li><li>失败：‑1</li></ul><h3 id="获取usb-口输入限压值" tabindex="-1"><a class="header-anchor" href="#获取usb-口输入限压值" aria-hidden="true">#</a> 获取USB 口输入限压值</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_get_usb_vhold</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li></ul><p>返回值：</p><ul><li>成功：USB 口限压电流值，单位mV</li><li>失败：‑1</li></ul><h3 id="设置usb-口输入限流值" tabindex="-1"><a class="header-anchor" href="#设置usb-口输入限流值" aria-hidden="true">#</a> 设置USB 口输入限流值</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_set_usb_ihold</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li><li>cur：USB 口限流的电流值，单位mA，范围[0‑3100]</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h3 id="设置usb-口输入限压值" tabindex="-1"><a class="header-anchor" href="#设置usb-口输入限压值" aria-hidden="true">#</a> 设置USB 口输入限压值</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_power_set_usb_vhold</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">power_dev</span> <span class="token operator">*</span>rdev<span class="token punctuation">,</span> <span class="token keyword">int</span> vol<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rdev：初始化后power_dev 结构体</li><li>vol：USB 口输入限压值，单位mV，范围[3880mV~5080mV]</li></ul><p>返回值：</p><ul><li>成功：0</li><li>失败：‑1</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><h3 id="regulator-模块使用范例" tabindex="-1"><a class="header-anchor" href="#regulator-模块使用范例" aria-hidden="true">#</a> regulator 模块使用范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_regulator.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_common.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_BASE</span>             <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x40050000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_DCDC_CTRL0</span>       <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0004</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_DCDC_CTRL1</span>       <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0008</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_DCDC_LDO_MODE</span>    <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x000c</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_RTC_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0020</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_EXT_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0024</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_TOP_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0028</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_AON_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0040</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_APP_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x0044</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOC_PRCM_DSP_LDO_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span>SOC_PRCM_BASE<span class="token operator">+</span><span class="token number">0x004c</span><span class="token punctuation">)</span></span></span>

<span class="token comment">//test : rpccli arm hal_regulator_set_current_able</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hal_regulator_regs_check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_DCDC_CTRL0<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_DCDC_CTRL0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_DCDC_CTRL1<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_DCDC_CTRL1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_DCDC_LDO_MODE<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_DCDC_LDO_MODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_RTC_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_RTC_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_EXT_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_EXT_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_TOP_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_TOP_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_AON_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_AON_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_APP_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_APP_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] %x:%x\\n&quot;</span><span class="token punctuation">,</span> SOC_PRCM_DSP_LDO_CTRL<span class="token punctuation">,</span> <span class="token function">readl</span><span class="token punctuation">(</span>SOC_PRCM_DSP_LDO_CTRL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_set_able</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> SOC_ID_MAX<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> regulator<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] set regulator_en[%d]:%x, flage:%d\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_get</span><span class="token punctuation">(</span><span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regulator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] set_able regulator_en\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_set_able</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>regulator<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] set_regulator[%d]able_status:%d\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_regs_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_set_able<span class="token punctuation">,</span> hal_regulator_set_current_able<span class="token punctuation">,</span> regulator hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_get_voltage_ext</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> SOC_ID_MAX<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> regulator<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] get regulator:%x\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_get</span><span class="token punctuation">(</span><span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regulator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] cat check_dedc_status\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_get_voltage_ext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>regulator<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] get_regulator[%d]status[%d]voltage:%d\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_regs_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_get_voltage_ext<span class="token punctuation">,</span> hal_regulator_get_voltage<span class="token punctuation">,</span> regulator hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_set_voltage_ext</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> SOC_ID_MAX<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">regulator_dev</span> regulator<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        ret<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        ret<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ret1 <span class="token operator">=</span> <span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ret<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> ret<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] set regulator:%x\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_get</span><span class="token punctuation">(</span><span class="token function">REGULATOR_GET</span><span class="token punctuation">(</span>SOC_REGULATOR<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regulator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] set_regulator[%d]status[%d]voltage:%d\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> ret1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_set_voltage_ext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>regulator<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[regulator] finishe-set_regulator[%d]status[%d]voltage:%d\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> ret1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_regulator_regs_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_set_voltage_ext<span class="token punctuation">,</span> hal_regulator_set_voltage<span class="token punctuation">,</span> regulator hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="power-模块使用范例" tabindex="-1"><a class="header-anchor" href="#power-模块使用范例" aria-hidden="true">#</a> power 模块使用范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_power.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_power_get_bat</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">power_dev</span> rdev<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get power\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_power_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get bat cap\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_bat_cap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat cap:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get_coulumb_counter\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_coulumb_counter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] coulumb_counter:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get bat_present\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">&quot;pmu_bat_unused:%d\\n&quot;</span><span class="token punctuation">,</span> rdev<span class="token punctuation">.</span>config<span class="token operator">-&gt;</span>pmu_bat_unused<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">&quot;pmu_version:%d\\n&quot;</span><span class="token punctuation">,</span> rdev<span class="token punctuation">.</span>config<span class="token operator">-&gt;</span>pmu_version<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_bat_present</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat_present:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get online\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_bat_online</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat online:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get status\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_bat_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat status:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get bat health\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_bat_health</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat health:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get vbat\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_vbat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat vbat:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get ibat\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_ibat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat ibat:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get disibat\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_disibat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat disibat:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get temp\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_temp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat temp:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat get test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_power_get_bat<span class="token punctuation">,</span> test_power_get_bat<span class="token punctuation">,</span> power hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_power_set_bat</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">power_dev</span> rdev<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vol <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set bat power:cur:%d vol:%d\\n&quot;</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_power_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set bat cur:%d\\n&quot;</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_set_chg_cur</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] chg_cur:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set bat vol:%d\\n&quot;</span><span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_set_chg_vol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] _chg_vol:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] bat set test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_power_set_bat<span class="token punctuation">,</span> test_power_set_bat<span class="token punctuation">,</span> power hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_power_get_usb</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">power_dev</span> rdev<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get power\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_power_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get usb_status\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_usb_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_status:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_ihold\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_usb_ihold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_ihold:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get usb_vhold\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_usb_vhold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_vhold:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] get cc_status\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_get_cc_status</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] cc_status:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb get test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_power_get_usb<span class="token punctuation">,</span> test_power_get_usb<span class="token punctuation">,</span> power hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_power_set_usb</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">power_dev</span> rdev<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vol <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set usb power:cur:%d vol:%d\\n&quot;</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_power_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set usb_ihold:%d\\n&quot;</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_set_usb_ihold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_ihold:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] set usb_vhold:%d\\n&quot;</span><span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">hal_power_set_usb_vhold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rdev<span class="token punctuation">,</span> vol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb_vhold:%d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[power] usb set test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_power_set_usb<span class="token punctuation">,</span> test_power_set_usb<span class="token punctuation">,</span> power hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,196),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter11.html.vue"]]);export{r as default};
