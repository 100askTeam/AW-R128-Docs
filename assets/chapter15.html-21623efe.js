import{_ as n,o as s,c as a,e}from"./app-e85d5a28.js";const t={},p=e(`<h1 id="twi" tabindex="-1"><a class="header-anchor" href="#twi" aria-hidden="true">#</a> TWI</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter15/image1.jpg" alt="image1"></p><p>TWI 控制器的框图如上所示，该控制器支持的标准通信速率为 100Kbps，最高通信速率可以达到 400Kbps。其中 CPUX 域的 TWI 控制器时钟源来自于 APB2，CPUS 域的 S‑TWI 时钟源来自于APBS。</p><p>TWI 传输数据的方式包括包传输和 DMA 运输。</p><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>模块配置在 <code>menuconfig</code> 位于如下位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Kernel Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
    Drivers Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SoC HAL Drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
            TWI devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable twi driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TWI 模块寄存器的基本配置位于 <code>common_twi.h</code> 文件里面，包括每个 TWI 的寄存器地址和中断号，部分配置如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* TWI Register Offset */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_ADDR_REG</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:8bit reserved,7-1bit for slave addr,0 bit for GCE */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_XADDR_REG</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:8bit reserved,7-0bit for second addr in 10bit addr */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_DATA_REG</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:8bit reserved, 7-0bit send or receive data byte */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_CTL_REG</span>         <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  INT_EN,BUS_EN,M_STA,INT_FLAG,A_ACK */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_STAT_REG</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  28 interrupt types + 0xF8 normal type = 29  */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_CLK_REG</span>         <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:7bit reserved,6-3bit,CLK_M,2-0bit CLK_N */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_SRST_REG</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:1bit reserved;0bit,write 1 to clear 0. */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_EFR_REG</span>         <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1C</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:2bit reserved,1:0 bit data byte follow read command */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_LCR_REG</span>         <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:6bits reserved  5:0bit for sda&amp;scl control*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_DVFS_REG</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">)</span>  </span><span class="token comment">/*  31:3bits reserved  2:0bit for dvfs control. only A10 support. */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_DRIVER_CTRL</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span></span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TWI 模块对于不同平台的区分位于 <code>platform\\twi_sun20iw3.h</code> 中。包括基地址以及平台相关参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** the irq of each TWI **/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ARCH_SUN20IW3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_GIC_START</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_GIC_START</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/** the base address of TWI*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_TWI0_PBASE</span> <span class="token expression"><span class="token number">0x02502000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_IRQ_TWI0</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">41</span> <span class="token operator">-</span> SUNXI_GIC_START<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI0_SCK</span> <span class="token expression"><span class="token function">GPIOA</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI0_SDA</span> <span class="token expression"><span class="token function">GPIOA</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI0_PIN_MUXSEL</span> <span class="token expression"><span class="token number">4</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_TWI1_PBASE</span> <span class="token expression"><span class="token number">0x02502400</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUNXI_IRQ_TWI1</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">-</span> SUNXI_GIC_START<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI1_SCK</span> <span class="token expression"><span class="token function">GPIOA</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI1_SDA</span> <span class="token expression"><span class="token function">GPIOA</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI1_PIN_MUXSEL</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos‑hal<span class="token operator">/</span>
<span class="token operator">|</span>‑‑hal<span class="token operator">/</span>source<span class="token operator">/</span>twi<span class="token operator">/</span>hal_twi<span class="token punctuation">.</span>c    <span class="token comment">/* hal层接口代码 */</span>
<span class="token operator">|</span>‑‑include<span class="token operator">/</span>hal<span class="token operator">/</span>sunxi_hal_twi<span class="token punctuation">.</span>h    <span class="token comment">/* 头文件 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;sunxi_hal_twi.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="twi-端口号-twi-port-t" tabindex="-1"><a class="header-anchor" href="#twi-端口号-twi-port-t" aria-hidden="true">#</a> TWI 端口号 twi_port_t</h3><p>该数据结构主要用来表明 TWI 的编号，用户可以用来调用 TWI 的控制器。具体定义如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typedef enum
{
    TWI_MASTER_0,           /**&lt; TWI master 0. */
    TWI_MASTER_1,           /**&lt; TWI master 1. */
    TWI_MASTER_2,           /**&lt; TWI master 0. */
    TWI_MASTER_3,           /**&lt; TWI master 1. */
    TWI_MASTER_4,           /**&lt; TWI master 4. */
    TWI_MASTER_5,           /**&lt; TWI master 5. */
    S_TWI_MASTER_0,           /**&lt; S_TWI master 0. */
    S_TWI_MASTER_1,           /**&lt; S_TWI master 1. */
    S_TWI_MASTER_2,           /**&lt; S_TWI master 2. */
    TWI_MASTER_MAX              /**&lt; max TWI master number, \\&lt;invalid\\&gt; */
} twi_port_t;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="twi-消息结构体-twi-msg-t" tabindex="-1"><a class="header-anchor" href="#twi-消息结构体-twi-msg-t" aria-hidden="true">#</a> TWI 消息结构体 twi_msg_t</h3><p>该数据结构是 TWI 通信时的消息结构，定义每个通信数据的格式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">twi_msg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> addr<span class="token punctuation">;</span>          <span class="token comment">/* slave address */</span>
    <span class="token class-name">uint16_t</span> flags<span class="token punctuation">;</span>
<span class="token comment">/* read data, from slave to master
 * TWI_M_RD is guaranteed to be 0x0001!
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_M_RD</span>        <span class="token expression"><span class="token number">0x0001</span>  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TWI_M_TEN</span>       <span class="token expression"><span class="token number">0x0010</span>  </span><span class="token comment">/* this is a ten bit chip address */</span></span>
    <span class="token class-name">uint16_t</span> len<span class="token punctuation">;</span>           <span class="token comment">/* msg length */</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>       <span class="token comment">/* pointer to msg data */</span>
<span class="token punctuation">}</span> <span class="token class-name">twi_msg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="twi-控制结构体-hal-twi-transfer-cmd-t" tabindex="-1"><a class="header-anchor" href="#twi-控制结构体-hal-twi-transfer-cmd-t" aria-hidden="true">#</a> TWI 控制结构体 hal_twi_transfer_cmd_t</h3><p>该数据接口储存了一些用户在调用 twi_control 的时候可以用到的一些参数，具体如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    I2C_SLAVE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">/* 设置从机地址 */</span>
    I2C_SLAVE_FORCE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/* 强制设置从机地址 */</span>
    I2C_TENBIT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 支持10位地址 */</span>
    I2C_RDWR <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">/* 读写支持 */</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_twi_transfer_cmd_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="twi-频率结构体-twi-frequency-t" tabindex="-1"><a class="header-anchor" href="#twi-频率结构体-twi-frequency-t" aria-hidden="true">#</a> TWI 频率结构体 twi_frequency_t</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    TWI_FREQUENCY_100K <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">,</span>          <span class="token comment">/**&lt;  100kbps. */</span>
    TWI_FREQUENCY_200K <span class="token operator">=</span> <span class="token number">200000</span><span class="token punctuation">,</span>          <span class="token comment">/**&lt;  200kbps. */</span>
    TWI_FREQUENCY_400K <span class="token operator">=</span> <span class="token number">400000</span><span class="token punctuation">,</span>          <span class="token comment">/**&lt;  400kbps. */</span>
<span class="token punctuation">}</span> <span class="token class-name">twi_frequency_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="twi-返回值结构体" tabindex="-1"><a class="header-anchor" href="#twi-返回值结构体" aria-hidden="true">#</a> TWi 返回值结构体</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typedef enum
{
    TWI_STATUS_ERROR = -4,                        /**&lt;  An error occurred and the transaction has failed. */
    TWI_STATUS_ERROR_BUSY = -3,                   /**&lt;  The TWI bus is busy, an error occurred. */
    TWI_STATUS_INVALID_PORT_NUMBER = -2,          /**&lt;  A wrong port number is given. */
    TWI_STATUS_INVALID_PARAMETER = -1,            /**&lt;  A wrong parameter is given. */
    TWI_STATUS_OK = 0                             /**&lt;  No error occurred during the function call. */
} twi_status_t;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="twi-初始化接口" tabindex="-1"><a class="header-anchor" href="#twi-初始化接口" aria-hidden="true">#</a> TWI 初始化接口</h3><p>TWI 模块初始化，主要初始化时钟，中断以及引脚配置等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">twi_status_t</span> <span class="token function">hal_twi_init</span><span class="token punctuation">(</span><span class="token class-name">twi_port_t</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>port：TWI 端口号</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="twi-控制接口" tabindex="-1"><a class="header-anchor" href="#twi-控制接口" aria-hidden="true">#</a> TWI 控制接口</h3><p>更改 TWI 的一些配置，包括从设备地址以及读写数据等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">twi_status_t</span> <span class="token function">hal_twi_control</span><span class="token punctuation">(</span><span class="token class-name">twi_port_t</span> port<span class="token punctuation">,</span> <span class="token class-name">hal_twi_transfer_cmd_t</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>port：端口号</li><li>cmd：控制参数</li><li>args：传入的配置数据</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="twi-数据发送接口" tabindex="-1"><a class="header-anchor" href="#twi-数据发送接口" aria-hidden="true">#</a> TWI 数据发送接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">twi_status_t</span> <span class="token function">hal_twi_write</span><span class="token punctuation">(</span><span class="token class-name">twi_port_t</span> port<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> pos<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>port：通道号</li><li>pos：偏移量（目前支持 1 个字节大小）</li><li>buf：待发送数据</li><li>size：发送数据大小，不包括偏移量</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="twi-数据接收接口" tabindex="-1"><a class="header-anchor" href="#twi-数据接收接口" aria-hidden="true">#</a> TWI 数据接收接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">twi_status_t</span> <span class="token function">hal_twi_read</span><span class="token punctuation">(</span><span class="token class-name">twi_port_t</span> port<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>port：通道号</li><li>pos：偏移量（目前支持 1 个字节大小）</li><li>buf：接收的数据</li><li>size：接收数据大小，不包括偏移量</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="twi-去初始化接口" tabindex="-1"><a class="header-anchor" href="#twi-去初始化接口" aria-hidden="true">#</a> TWI 去初始化接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">twi_status_t</span> <span class="token function">hal_twi_deinit</span><span class="token punctuation">(</span><span class="token class-name">twi_port_t</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>port：TWI 端口号</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_twi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_READ</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_WRITE</span> <span class="token expression"><span class="token number">1</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_twi</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">twi_msg_t</span> msg<span class="token punctuation">;</span>
    <span class="token class-name">twi_port_t</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> addr<span class="token punctuation">;</span>
    <span class="token keyword">char</span> reg_addr<span class="token punctuation">,</span> reg_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rw <span class="token operator">=</span> TEST_READ<span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\ttwi [port] [slave_addr] [reg] -r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;\\t                              -w [val]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Run twi test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    addr <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reg_addr <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        reg_val <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;r&#39;</span><span class="token operator">:</span>
                <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;twi read test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                rw <span class="token operator">=</span> TEST_READ<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;w&#39;</span><span class="token operator">:</span>
                <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;twi write test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                rw <span class="token operator">=</span> TEST_WRITE<span class="token punctuation">;</span>
                reg_val <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;invalid param!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_twi_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_twi_control</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> I2C_SLAVE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> TEST_READ<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_twi_read</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> reg_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reg_val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;reg_val: 0x%x&quot;</span><span class="token punctuation">,</span> reg_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rw <span class="token operator">==</span> TEST_WRITE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/*
         * hal_twi_write bug workaround
         */</span>
        <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> reg_addr<span class="token punctuation">;</span>
        buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> reg_val<span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>addr <span class="token operator">=</span>  addr<span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>buf <span class="token operator">=</span> buf<span class="token punctuation">;</span>

        <span class="token function">hal_twi_control</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> I2C_RDWR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Twi test finish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//hal_twi_uninit(port);</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Twi test1 finish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_twi<span class="token punctuation">,</span> hal_twi<span class="token punctuation">,</span> twi hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),c=[p];function o(i,l){return s(),a("div",null,c)}const u=n(t,[["render",o],["__file","chapter15.html.vue"]]);export{u as default};
