import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const p={},e=t(`<h1 id="lpuart" tabindex="-1"><a class="header-anchor" href="#lpuart" aria-hidden="true">#</a> LPUART</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>LPUART 驱动主要实现设备驱动的底层细节，并为上层提供一套标准的 API 接口以供使用。</p><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>配置路径如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            LPUART Devices ---&gt;
                [*] enable lpuart driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>LPUART 模块源码结构如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hal<span class="token operator">/</span>source<span class="token operator">/</span>lpuart<span class="token operator">/</span>             <span class="token operator">--</span><span class="token operator">--</span> 驱动源码
├── hal_lpuart<span class="token punctuation">.</span>c
├── Kconfig
├── Makefile
├── platform
│   ├── lpuart<span class="token operator">-</span>sun20iw2p1<span class="token punctuation">.</span>h    <span class="token operator">--</span><span class="token operator">--</span> 平台地址，引脚复用等配置
│   └── <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
├── platform<span class="token operator">-</span>lpuart<span class="token punctuation">.</span>h
└── lpuart<span class="token punctuation">.</span>h
include<span class="token operator">/</span>hal<span class="token operator">/</span>                   <span class="token operator">--</span><span class="token operator">--</span> 驱动APIs声明头文件
└── hal_lpuart<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>需要包含头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_lpuart.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化-lpuart-驱动" tabindex="-1"><a class="header-anchor" href="#初始化-lpuart-驱动" aria-hidden="true">#</a> 初始化 LPUART 驱动</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_init</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> lpuart_port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h3 id="卸载-lpuart-驱动" tabindex="-1"><a class="header-anchor" href="#卸载-lpuart-驱动" aria-hidden="true">#</a> 卸载 LPUART 驱动</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_deinit</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> lpuart_port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li></ul><h3 id="设置波特率及参数" tabindex="-1"><a class="header-anchor" href="#设置波特率及参数" aria-hidden="true">#</a> 设置波特率及参数</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_control</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> lpuart_port<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port_t：LPUART 端口号</li><li>cmd：预留，暂未使用</li><li>args：指向 _lpuart_config_t 类型变量的数组</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h3 id="接收处理" tabindex="-1"><a class="header-anchor" href="#接收处理" aria-hidden="true">#</a> 接收处理</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_receive</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：LPUART 端口号</li><li>data: 接收数据缓冲区</li><li>num: 接收数据长度</li></ul><p>返回值：</p><ul><li>size: 成功接收的字节数</li></ul><h3 id="接收对比处理" tabindex="-1"><a class="header-anchor" href="#接收对比处理" aria-hidden="true">#</a> 接收对比处理</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_rx_cmp</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> lpuart_port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> cmp_len<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>cmp_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li><li>cmp_len：比较数据的长度</li><li>cmp_data：比较的数据</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h3 id="启用接收对比处理回调" tabindex="-1"><a class="header-anchor" href="#启用接收对比处理回调" aria-hidden="true">#</a> 启用接收对比处理回调</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_enable_rx_cmp</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> lpuart_port<span class="token punctuation">,</span> <span class="token class-name">lpuart_callback_t</span> cb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li><li>cb：处理回调函数</li><li>arg：回调函数的参数</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h3 id="禁用接收对比处理回调" tabindex="-1"><a class="header-anchor" href="#禁用接收对比处理回调" aria-hidden="true">#</a> 禁用接收对比处理回调</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_lpuart_disable_rx_cmp</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> lpuart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h3 id="配置pm绕过模式" tabindex="-1"><a class="header-anchor" href="#配置pm绕过模式" aria-hidden="true">#</a> 配置PM绕过模式</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">HAL_LPUART_SetBypassPmMode</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> lpuart_port<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>lpuart_port：LPUART 端口号</li><li>mode：配置模式</li></ul><p>返回值：</p><ul><li>SUNXI_HAL_OK: 成功</li><li>HAL_LPUART_STATUS_ERROR: 失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_timer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_lpuart.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_uart.h&gt;</span></span>

<span class="token comment">/* find a free uart_port or pc com as source */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UART_TEST</span> <span class="token expression">UART_1</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_LEN</span> <span class="token expression"><span class="token number">5</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
        <span class="token string">&quot;\\t hal_lpuart &lt;port&gt; &lt;baudrate&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_recv_data</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;enter recv data test\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_lpuart_enable_rx_data</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* use uart as source */</span>
    <span class="token function">hal_uart_init</span><span class="token punctuation">(</span>UART_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_send</span><span class="token punctuation">(</span>UART_TEST<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* use pc com as source */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;enter\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_lpuart_disable_rx_data</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compare_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;data compare success!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test_cmp_data</span><span class="token punctuation">(</span><span class="token class-name">lpuart_port_t</span> port<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;enter cmp data test\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> cmp<span class="token punctuation">[</span>TEST_LEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_lpuart_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;lpuart %d not inited\\n&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_lpuart_rx_cmp</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> TEST_LEN<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_lpuart_enable_rx_cmp</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> compare_callback<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* use uart as source, stop bit of uart should be 2 */</span>
    <span class="token function">hal_uart_init</span><span class="token punctuation">(</span>UART_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_send</span><span class="token punctuation">(</span>UART_TEST<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* use pc com as source */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;enter abcde\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_lpuart_disable_rx_cmp</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">lpuart_reset_multiplex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">lpuart_multiplex</span><span class="token punctuation">(</span>LPUART_0<span class="token punctuation">,</span> UART_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lpuart_multiplex</span><span class="token punctuation">(</span>LPUART_1<span class="token punctuation">,</span> UART_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_lpuart</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">lpuart_port_t</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> baudrate<span class="token punctuation">;</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    baudrate <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_lpuart_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">!=</span> SUNXI_HAL_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Fail to init lpuart\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lpuart_multiplex</span><span class="token punctuation">(</span>LPUART_0<span class="token punctuation">,</span> UART_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lpuart_multiplex</span><span class="token punctuation">(</span>LPUART_1<span class="token punctuation">,</span> UART_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">test_recv_data</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test_cmp_data</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">lpuart_reset_multiplex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_lpuart<span class="token punctuation">,</span> hal_lpuart<span class="token punctuation">,</span> lpuart hal APIs tests<span class="token punctuation">)</span>
\`\`</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70),c=[e];function l(i,o){return s(),a("div",null,c)}const r=n(p,[["render",l],["__file","chapter14.html.vue"]]);export{r as default};
