import{_ as n,o as s,c as a,e}from"./app-e85d5a28.js";const t={},p=e(`<h1 id="sid" tabindex="-1"><a class="header-anchor" href="#sid" aria-hidden="true">#</a> SID</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>SID 模块主要用于烧写 SoC 的 efuse。efuse 包括 ChipID、HASH 码等相关信息。该模块特点如下：</p><ul><li>efuse 一根熔丝只能被编程一次，并且具有一次可编程存储器的特点。</li><li>包含 SID_SRAM，SID_SRAM 在每次芯片上电时会备份 efuse 信息。</li><li>SID 模块寄存器是非安全的；efuse 有安全非安全区分。</li><li>提供芯片唯一ID ChipID，出厂前会烧录好</li><li>（secure enable bit ）作为 efuse 中安全开启开关，使能后，芯片会变成安全芯片</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            SID devices ---&gt;
                [*] enable efuse driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>SID 驱动位于 <code>hal/source/efuse/</code> 目录下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hal
├── source
│   ├── efuse
│ │ ├── efuse<span class="token punctuation">.</span>c # SID底层驱动文件
│ │ ├── efuse<span class="token punctuation">.</span>h # SID底层驱动头文件
│ │ ├── hal_efuse<span class="token punctuation">.</span>c # SID公用操作接口函数文件
│ │ ├── Kconfig
│ │ ├── Makefile
│ │ ├── platform
│ │ │   ├── efuse_sun20iw2<span class="token punctuation">.</span>h # 具体的平台配置头文件
│ │ └── platform_efuse<span class="token punctuation">.</span>h # 平台配置头文件
└── include
    └── hal
        └── sunxi_hal_efuse<span class="token punctuation">.</span>h # SID公用操作接口函数头文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_efuse.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="efuse-写接口" tabindex="-1"><a class="header-anchor" href="#efuse-写接口" aria-hidden="true">#</a> efuse 写接口</h3><p>将指定名字的数据写入 efuse</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_write</span><span class="token punctuation">(</span><span class="token keyword">char</span> key_name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> key_bit_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>key_name: efuse 区域名字</li><li>key_data: 待写入数据</li><li>key_bit_len: 待写入数据 bit 数</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="efuse-读接口" tabindex="-1"><a class="header-anchor" href="#efuse-读接口" aria-hidden="true">#</a> efuse 读接口</h3><p>读 efuse 中指定名字区域的数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_read</span><span class="token punctuation">(</span><span class="token keyword">char</span> key_name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> key_bit_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>key_name: efuse 区域名字</li><li>key_data: 待读取数据</li><li>key_bit_len: 待读取数据 bit 数</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="efuse-读扩展接口" tabindex="-1"><a class="header-anchor" href="#efuse-读扩展接口" aria-hidden="true">#</a> efuse 读扩展接口</h3><p>读 efuse 中指定名字区域的数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_read_ext</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> start_bit<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> bit_num<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>start_bit: efuse 区域名字</li><li>bit_num: 待读取数据</li><li>data: 存放待读取数据</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="开启-secure-enable-bit-接口" tabindex="-1"><a class="header-anchor" href="#开启-secure-enable-bit-接口" aria-hidden="true">#</a> 开启 secure enable bit 接口</h3><p>开启 secure enable bit</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_set_security_mode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><blockquote><p>开启 <strong>efuse</strong> 中 <strong>secure enable bit</strong> 之后，芯片会变成安全芯片，此过程不可逆，开启时请额外注意。</p></blockquote><h3 id="读取-secure-enable-bit-状态接口" tabindex="-1"><a class="header-anchor" href="#读取-secure-enable-bit-状态接口" aria-hidden="true">#</a> 读取 secure enable bit 状态接口</h3><p>读取 secure enable bit 状态</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_get_security_mode</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：没有烧写</li><li>1：烧写了</li></ul><h3 id="读取-chipid-接口" tabindex="-1"><a class="header-anchor" href="#读取-chipid-接口" aria-hidden="true">#</a> 读取 chipid 接口</h3><p>读取 efuse 中 chipid</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_get_chipid</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>buffer: 用于存放 chipid 数据的指针</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="读取-thermal-校准值接口" tabindex="-1"><a class="header-anchor" href="#读取-thermal-校准值接口" aria-hidden="true">#</a> 读取 thermal 校准值接口</h3><p>读取 thermal sensor 校准值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_get_thermal_cdata</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>buffer: 存放读取的数据的指针</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="读取芯片版本接口" tabindex="-1"><a class="header-anchor" href="#读取芯片版本接口" aria-hidden="true">#</a> 读取芯片版本接口</h3><p>读取芯片版本信息</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_efuse_get_chip_ver</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>正数：芯片版本号</li><li>负数：失败</li></ul><h3 id="读取-efuse-sram-接口" tabindex="-1"><a class="header-anchor" href="#读取-efuse-sram-接口" aria-hidden="true">#</a> 读取 efuse sram 接口</h3><p>读取 efuse sram 中数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_get_module_param_from_sid</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dst: 存放读取的数据</li><li>offset: 读取的偏移</li><li>len: 读取长度（字节）</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_efuse.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span>  <span class="token expression">HEXDUMP_LINE_CHR_CNT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HEXDUMP_LINE_CHR_CNT</span> <span class="token expression"><span class="token number">16</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sunxi_hexdump</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> line<span class="token punctuation">[</span>HEXDUMP_LINE_CHR_CNT<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> addr<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> addr <span class="token operator">&lt;</span> bytes<span class="token punctuation">;</span> addr <span class="token operator">+=</span> HEXDUMP_LINE_CHR_CNT<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytes<span class="token operator">-</span>addr<span class="token punctuation">)</span><span class="token operator">&lt;</span>HEXDUMP_LINE_CHR_CNT <span class="token operator">?</span> <span class="token punctuation">(</span>bytes<span class="token operator">-</span>addr<span class="token punctuation">)</span> <span class="token operator">:</span> HEXDUMP_LINE_CHR_CNT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

        <span class="token function">memcpy</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> buf <span class="token operator">+</span> addr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>line <span class="token operator">+</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> HEXDUMP_LINE_CHR_CNT <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* print addr */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%.8X: &quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* print hex */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HEXDUMP_LINE_CHR_CNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2X &quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* print char */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HEXDUMP_LINE_CHR_CNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0x20</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0x7E</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_efuse</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">hal_efuse_get_chipid</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sunxi_hexdump</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;===================================\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Test Finished.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_efuse<span class="token punctuation">,</span> hal_efuse<span class="token punctuation">,</span> efuse hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),i=[p];function c(l,o){return s(),a("div",null,i)}const d=n(t,[["render",c],["__file","chapter22.html.vue"]]);export{d as default};
