import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const e={},p=t(`<h1 id="ir" tabindex="-1"><a class="header-anchor" href="#ir" aria-hidden="true">#</a> IR</h1><p>红外是一种电磁波，可以实现数据的无线传输，由发送和接收两个部分组成。发送端对红外信号进行脉冲编码，接收端完成对红外信号的脉冲解码。红外遥控协议有多种，如 NEC、SIRC、 RC-5 等，这些协议都比较简单，基本都是以脉冲宽度或脉冲间隔来编码。当遥控器按下按键时，遥控器逻辑单元会产生一个完整的脉冲波形，包含遥控指令的信息，即红外传输的基带信号。这个波形被送到遥控器的调制单元，经调制单元调制成高频红外电磁波信号，由发光二极管发射出去，如下图所示。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image1.jpg" alt="image1"></p><p>红外电磁波信号一般使用一体化接收头接收，同时完成信号的解调和放大，其输出信号就是红外的基带脉冲信号。解调后的信号可直接送入信号处理单元，由处理单元对脉冲波形进行解码，典型红外接收电路如下图所示。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image2.jpg" alt="image2"></p><p>相对应的，IR RX 模块属于INPUT 输入设备，支持红外遥控器的按键遥控。具体规格如下所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image3.jpg" alt="image3"></p><p>整个系统框架流程如上图所示：当用户按下遥控器的时候，会触发一个中断。IR 驱动会进入中断，然后解析遥控器发送的键值，然后对该电压值进行解码，然后将该事件上报给INPUT 子系统。INPUT 子系统找到相应的事件处理程序之后，会将该按键事件上报给用户空间，等待用户程序对该按键信息的读取与处理。</p><h2 id="ir-tx-发送-cir-tx" tabindex="-1"><a class="header-anchor" href="#ir-tx-发送-cir-tx" aria-hidden="true">#</a> IR TX 发送 （CIR_TX）</h2><h3 id="模块内部调制原理" tabindex="-1"><a class="header-anchor" href="#模块内部调制原理" aria-hidden="true">#</a> 模块内部调制原理</h3><p>内部调制原理如下图所示。其中 IMS（Internal Modulation Select），为选择使用内部调制或不调制。软件需设置使用IMS。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image4.jpg" alt="image4"></p><h3 id="载波频率设置" tabindex="-1"><a class="header-anchor" href="#载波频率设置" aria-hidden="true">#</a> 载波频率设置</h3><p>载波频率计算公式为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Fc = Fclk / [(RFMC + 1) * (DRMC + 2)] (公式1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中</p><ul><li>Fc为载波频率；</li><li>Fclk为Sunxi IR-TX时钟源，目前配置为12MHz；</li><li>RFMC为载波分频系数，由MCR寄存器（0x04）bit[7:0]设定；</li><li>DRMC为载波占空比设置，由GLR寄存器（0x00）bit[6:5]设定，可配置1/2、1/3或1/4。</li></ul><p>通常，载波占空比DRMC 和载波频率 Fc 由应用层设定，因此设置载波占空比即转换为设置GLR bit[6:5]，设置载波频率即转换成设置MCR bit[7:0]，由公式1 变换得计算RFMC 的公式为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>RFMC = Fclk / [Fc *(DRMC + 2)] - 1 (公式2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据发送流程" tabindex="-1"><a class="header-anchor" href="#数据发送流程" aria-hidden="true">#</a> 数据发送流程</h3><p>CIR-TX 驱动数据发送流程如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image5.jpg" alt="image5"></p><h3 id="模块配置介绍" tabindex="-1"><a class="header-anchor" href="#模块配置介绍" aria-hidden="true">#</a> 模块配置介绍</h3><p>IR_TX 在 <code>menuconfig</code> 中配置如下</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image6.jpg" alt="image6"></p><h3 id="模块源码结构" tabindex="-1"><a class="header-anchor" href="#模块源码结构" aria-hidden="true">#</a> 模块源码结构</h3><p>CIR_TX 模块源码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/
|--hal/source/cir_tx/hal_cir_tx     // hal层接口代码
|--include/hal/sunxi_hal_cir_tx.h   // 头文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h3><p>头文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;sunxi_hal_cir_tx.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="irtx-初始化" tabindex="-1"><a class="header-anchor" href="#irtx-初始化" aria-hidden="true">#</a> IRTX 初始化</h4><p>IRTX 模块初始化，主要完成clk 初始化</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">cir_tx_status_t</span> <span class="token function">hal_cir_tx_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_cir_tx_t</span> <span class="token operator">*</span>cir_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>cir_tx</code> ：操作结构体</li></ul><p>返回值：</p><ul><li><code>0</code>：成功初始化</li><li>负数：初始化失败</li></ul><h4 id="irtx-设置载波占空比" tabindex="-1"><a class="header-anchor" href="#irtx-设置载波占空比" aria-hidden="true">#</a> IRTX 设置载波占空比</h4><p>配置 IRTX 模块占空比</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_cir_tx_set_duty_cycle</span><span class="token punctuation">(</span><span class="token keyword">int</span> duty_cycle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>duty_cycle</code>：占空比大小</li></ul><p>返回值：</p><ul><li>无</li></ul><h4 id="irtx-设置载波频率" tabindex="-1"><a class="header-anchor" href="#irtx-设置载波频率" aria-hidden="true">#</a> IRTX 设置载波频率</h4><p>设置载波频率</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_cir_tx_set_carrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> carrier_freq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>carrier_freq</code>：载波频率大小</li></ul><p>返回值：</p><ul><li>无</li></ul><h4 id="irtx-使能发送" tabindex="-1"><a class="header-anchor" href="#irtx-使能发送" aria-hidden="true">#</a> IRTX 使能发送</h4><p>发送IRTX 数据</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_cir_tx_xmit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>txbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>txbuf</code>： 代表数据 <code>buf</code></li><li><code>count</code>： 代表数据长度</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_hal_cir_tx.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NS_TO_US</span><span class="token expression"><span class="token punctuation">(</span>nsec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nsec<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_NBITS</span> <span class="token expression"><span class="token number">32</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_UNIT</span> <span class="token expression"><span class="token number">562500</span> </span><span class="token comment">/* ns. Logic data bit pulse length */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_HEADER_PULSE</span> <span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span> </span><span class="token comment">/* 9ms. 16 * Logic data bit pulse length*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_HEADER_SPACE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span> </span><span class="token comment">/* 4.5ms */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_BIT_PULSE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_BIT_0_SPACE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_BIT_1_SPACE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_TRAILER_PULSE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEC_TRAILER_SPACE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> NEC_UNIT<span class="token punctuation">)</span> </span><span class="token comment">/* even longer */</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO_IR_RAW_BUF_SIZE</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_DUTY_CYCLE</span> <span class="token expression"><span class="token number">33</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CARRIER_FREQ</span> <span class="token expression"><span class="token number">38000</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIRC_MODE2_PULSE</span> <span class="token expression"><span class="token number">0x01000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIRC_MODE2_SPACE</span> <span class="token expression"><span class="token number">0x00000000</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIRC_VALUE_MASK</span> <span class="token expression"><span class="token number">0x00FFFFFF</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIRC_MODE2_MASK</span> <span class="token expression"><span class="token number">0xFF000000</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIRC_PULSE</span><span class="token expression"><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>LIRC_VALUE_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> LIRC_MODE2_PULSE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIRC_SPACE</span><span class="token expression"><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>LIRC_VALUE_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> LIRC_MODE2_SPACE<span class="token punctuation">)</span></span></span>

<span class="token class-name">uint32_t</span> tx_raw_buf<span class="token punctuation">[</span>GPIO_IR_RAW_BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nec_modulation_byte</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> mask <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/* bit 1 */</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_BIT_PULSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_SPACE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_BIT_1_SPACE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">/* bit 0 */</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_BIT_PULSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_SPACE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_BIT_0_SPACE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ir_lirc_transmit_ir</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>raw_buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">,</span> count<span class="token punctuation">;</span>

  count <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">1024</span> <span class="token operator">||</span> count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nec_ir_encode</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>raw_buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> key_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">uint8_t</span> address<span class="token punctuation">,</span> reverse_address<span class="token punctuation">,</span> command<span class="token punctuation">,</span> reverse_command<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> <span class="token operator">*</span>head_p<span class="token punctuation">,</span> <span class="token operator">*</span>data_p<span class="token punctuation">,</span> <span class="token operator">*</span>stop_p<span class="token punctuation">;</span>

  address <span class="token operator">=</span> <span class="token punctuation">(</span>key_code <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  reverse_address <span class="token operator">=</span> <span class="token punctuation">(</span>key_code <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  command <span class="token operator">=</span> <span class="token punctuation">(</span>key_code <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  reverse_command <span class="token operator">=</span> <span class="token punctuation">(</span>key_code <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>

  <span class="token comment">/* head bit */</span>
  head_p <span class="token operator">=</span> raw_buf<span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>head_p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_HEADER_PULSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>head_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_HEADER_SPACE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* data bit */</span>
  data_p <span class="token operator">=</span> raw_buf <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token function">nec_modulation_byte</span><span class="token punctuation">(</span>data_p<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>

  data_p <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token function">nec_modulation_byte</span><span class="token punctuation">(</span>data_p<span class="token punctuation">,</span> reverse_address<span class="token punctuation">)</span><span class="token punctuation">;</span>

  data_p <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token function">nec_modulation_byte</span><span class="token punctuation">(</span>data_p<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>

  data_p <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token function">nec_modulation_byte</span><span class="token punctuation">(</span>data_p<span class="token punctuation">,</span> reverse_command<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* stop bit */</span>
  stop_p <span class="token operator">=</span> data_p <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>stop_p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_TRAILER_PULSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>stop_p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LIRC_PULSE</span><span class="token punctuation">(</span><span class="token function">NS_TO_US</span><span class="token punctuation">(</span>NEC_TRAILER_SPACE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NEC_NBITS <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_cir_tx</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> key_code <span class="token operator">=</span> <span class="token number">0x04fb13ec</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sunxi_cir_tx_t</span> <span class="token operator">*</span>cir_tx<span class="token punctuation">;</span>

  <span class="token function">hal_cir_tx_init</span><span class="token punctuation">(</span>cir_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">hal_cir_tx_set_duty_cycle</span><span class="token punctuation">(</span>DEFAULT_DUTY_CYCLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hal_cir_tx_set_carrier</span><span class="token punctuation">(</span>DEFAULT_CARRIER_FREQ<span class="token punctuation">)</span><span class="token punctuation">;</span>

  size <span class="token operator">=</span> <span class="token function">nec_ir_encode</span><span class="token punctuation">(</span>tx_raw_buf<span class="token punctuation">,</span> key_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>tx_raw_buf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00FFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> tx_raw_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tx_raw_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x00FFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">hal_cir_tx_xmit</span><span class="token punctuation">(</span>tx_raw_buf<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;end test!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ir-rx-接收-cir" tabindex="-1"><a class="header-anchor" href="#ir-rx-接收-cir" aria-hidden="true">#</a> IR RX 接收（CIR）</h2><h3 id="模块配置介绍-1" tabindex="-1"><a class="header-anchor" href="#模块配置介绍-1" aria-hidden="true">#</a> 模块配置介绍</h3><p>IR 在 <code>menuconfig</code> 中配置如下</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter10/image7.jpg" alt="image7"></p><h3 id="模块源码结构-1" tabindex="-1"><a class="header-anchor" href="#模块源码结构-1" aria-hidden="true">#</a> 模块源码结构</h3><p>CIR 模块源码结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/
|--hal/source/cir/hal_cir.c     // hal层接口代码
|--include/hal/sunxi_hal_cir.h  // 头文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块返回值定义" tabindex="-1"><a class="header-anchor" href="#模块返回值定义" aria-hidden="true">#</a> 模块返回值定义</h3><table><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">枚举</th><th style="text-align:left;">定义</th></tr></thead><tbody><tr><td style="text-align:left;">-4</td><td style="text-align:left;"><code>CIR_PIN_ERR</code></td><td style="text-align:left;">配置的 CIR 引脚错误</td></tr><tr><td style="text-align:left;">-3</td><td style="text-align:left;"><code>CIR_CLK_ERR</code></td><td style="text-align:left;">配置的 CIR 模块时钟错误</td></tr><tr><td style="text-align:left;">-2</td><td style="text-align:left;"><code>CIR_IRQ_ERR</code></td><td style="text-align:left;">中断配置错误</td></tr><tr><td style="text-align:left;">-1</td><td style="text-align:left;"><code>CIR_PORT_ERR</code></td><td style="text-align:left;">配置 CIR 端口错误</td></tr><tr><td style="text-align:left;">0</td><td style="text-align:left;"><code>CIR_OK</code></td><td style="text-align:left;">成功</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
   CIR_PIN_ERR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>
   CIR_CLK_ERR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
   CIR_IRQ_ERR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>
   CIR_PORT_ERR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
   CIR_OK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">cir_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块接口说明-1" tabindex="-1"><a class="header-anchor" href="#模块接口说明-1" aria-hidden="true">#</a> 模块接口说明</h3><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_cir.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="ir-初始化接口" tabindex="-1"><a class="header-anchor" href="#ir-初始化接口" aria-hidden="true">#</a> IR 初始化接口</h4><p>IR 模块初始化，主要初始化采样率、通道选择及注册中断等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">cir_status_t</span> <span class="token function">sunxi_cir_init</span><span class="token punctuation">(</span><span class="token class-name">cir_port_t</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>port</code> ：CIR 通道</li></ul><p>返回值：</p><ul><li><code>0</code>：成功初始化</li><li>负数：初始化失败</li></ul><h4 id="ir-注册回调接口" tabindex="-1"><a class="header-anchor" href="#ir-注册回调接口" aria-hidden="true">#</a> IR 注册回调接口</h4><p>向应用层提供注册回调接口的功能</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sunxi_cir_callback_register</span><span class="token punctuation">(</span><span class="token class-name">cir_port_t</span> port<span class="token punctuation">,</span> <span class="token class-name">cir_callback_t</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>port</code> ：CIR 通道</li><li><code>callback</code>：应用层回调接口</li></ul><p>返回值：</p><ul><li>无</li></ul><h4 id="ir-去初始化接口" tabindex="-1"><a class="header-anchor" href="#ir-去初始化接口" aria-hidden="true">#</a> IR 去初始化接口</h4><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sunxi_cir_deinit</span><span class="token punctuation">(</span><span class="token class-name">cir_port_t</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>port</code> ：CIR 通道</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="模块使用范例-1" tabindex="-1"><a class="header-anchor" href="#模块使用范例-1" aria-hidden="true">#</a> 模块使用范例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_hal_cir.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token class-name">cir_callback_t</span> <span class="token function">cir_irq_callback</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> data_type<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;reg_val:0x%u\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_cir</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">cir_port_t</span> port<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> timeout_sec <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
  TickType_t start_ticks<span class="token punctuation">,</span> current_ticks<span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Run ir test\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;usage: hal_ir channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">sunxi_cir_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;cir init failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">sunxi_cir_callback_register</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> cir_irq_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  start_ticks <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;start_ticks: %u\\n&quot;</span><span class="token punctuation">,</span> start_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current_ticks <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_ticks <span class="token operator">-</span> start_ticks<span class="token punctuation">)</span> <span class="token operator">*</span> portTICK_PERIOD_MS <span class="token operator">&gt;=</span>
        timeout_sec <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;current_ticks: %u\\n&quot;</span><span class="token punctuation">,</span> current_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">sunxi_cir_deinit</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","chapter10.html.vue"]]);export{r as default};
