import{_ as n,o as s,c as a,e}from"./app-e85d5a28.js";const p={},t=e(`<h1 id="adc-按键配置方法" tabindex="-1"><a class="header-anchor" href="#adc-按键配置方法" aria-hidden="true">#</a> ADC 按键配置方法</h1><p>FreeRTOS平台上使用的按键为ADC-KEY，采用的ADC模块为GPADC。</p><p>按键功能驱动的实现是通过ADC分压，使每个按键检测的电压值不同，从而实现区分不同的按键。按下或者弹起中断之后，通过中断触发，主动检测当前电压识别出对应的按键。最后再通过input子系统将获取按键的键值并上报给应用层。</p><h2 id="gpadc-key配置方法" tabindex="-1"><a class="header-anchor" href="#gpadc-key配置方法" aria-hidden="true">#</a> GPADC-Key配置方法</h2><p>按键结构体定义key_config的成员：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sunxikbd_config</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> measure<span class="token punctuation">;</span>    <span class="token comment">// 电压阈值</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>              <span class="token comment">// 功能名</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key_num<span class="token punctuation">;</span>    <span class="token comment">// 按键数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> scankeycodes<span class="token punctuation">[</span>KEY_MAX_CNT<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 按键的键值</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key_vol<span class="token punctuation">[</span>KEY_MAX_CNT<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 按键的电压值</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同平台的配置可能不同，以r128为例，下面是r128的成员config：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sunxikbd_config</span> key_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>measure <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;gpadc-key&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>key_num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>key_vol <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">415</span><span class="token punctuation">,</span><span class="token number">646</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1157</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scankeycodes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前按键驱动的配置都是以hardcode的方式写入驱动代码中，也就是说按键的数量，不同按键对应的电压值，不同按键对应的KeyCode等等配置如果要修改的话，需要对源码进行修改。</p><p>如上述按键结构体的定义，以下两配置按照默认配置即可。</p><ul><li>measure：GPADC最大能够识别的电压值，需要根据UserMaual来设置。默认为2.5V。</li><li>name：注册的按键驱动名称，会注册到input子系统中。</li></ul><p>可以自定义的配置为：key_num，key_vol，scankeycodes。</p><ul><li>key_num: 按照实际硬件设计来设置。</li><li>key_vol: 按照硬件，实际每个按键分压的情况来设置。</li><li>scankeycodes：每个按键对应的KeyCode，方便应用通过input获得按下的按键时，能够识别是哪个按键按下了。</li></ul><p>key_vol的配置方法，可以参考下图的GPADC-KEY的硬件设置。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part5/chapter3/image1.png" alt="image1"></p><p>在图中，VCC输入的电压为3.3V，通过分压关系，第一个按键的电压为0.21V，因此key_vol可以设置为210，以此类推。</p><h2 id="驱动初始化方法" tabindex="-1"><a class="header-anchor" href="#驱动初始化方法" aria-hidden="true">#</a> 驱动初始化方法</h2><p>默认系统启动时，不会加载GPADC驱动以及按键驱动。</p><p>如果需要加载GPADC-Key驱动，需要调用以下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_gpadc_key_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>sunxi_gpadc_key_init()</code> 该函数即可完成GPADC驱动以及按键驱动的加载了，即可开始使用按键驱动。</p><h2 id="应用调用方法" tabindex="-1"><a class="header-anchor" href="#应用调用方法" aria-hidden="true">#</a> 应用调用方法</h2><p>接下来继续介绍一下，应用中该如何获取按键按下的事件。</p><p>在FreeRTOS系统中，也移植了 Linux 的 input 子系统。GPADC-Key 中也是调用了 input 的接口，进行注册 input 设置，上报事件等动作。</p><p>在调用 <code>sunxi_gpadc_key_init()</code> 时，通过 <code>input_set_capability()</code> 去设置了事件的属性；通过 <code>sunxi_input_register_device()</code> 注册了 input 设备；在按键按下触发中断时，也是通过 <code>input_report_key()</code> 和 <code>input_sync()</code> 上报 <code>input</code> 事件。</p><p>因此，在应用层想要获取input事件，可以直接通过input接口去获取，使用示例可如下例程：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">input_func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_input_event</span> event<span class="token punctuation">;</span>

    <span class="token function">sunxi_gpadc_key_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 驱动初始化</span>

    fd <span class="token operator">=</span> <span class="token function">sunxi_input_open</span><span class="token punctuation">(</span>DEVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sunxi_input_readb</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_input_event</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">!=</span> EV_KEY<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;key up\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;key press: KeyCode:%d\\n&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),c=[t];function o(i,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","chapter3.html.vue"]]);export{k as default};
