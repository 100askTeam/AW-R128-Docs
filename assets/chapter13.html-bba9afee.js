import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const p={},e=t(`<h1 id="uart" tabindex="-1"><a class="header-anchor" href="#uart" aria-hidden="true">#</a> UART</h1><p>Universal Asynchronous Receiver/Transmitter，通用异步收发传输器</p><ul><li>Compatible with industry-standard 16450/16550 UARTs</li><li>64-Byte Transmit and receive data FIFOs</li><li>Supports DMA controller interface</li><li>Supports Software/ Hardware Flow Control</li><li>Supports IrDA 1.0 SIR</li><li>Supports RS-485 mode</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>其menuconfig 的配置如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Kernel Setup ---<span class="token operator">&gt;</span>
    Drivers Setup ---<span class="token operator">&gt;</span>
        SoC HAL Drivers ---<span class="token operator">&gt;</span>
            UART devices ---<span class="token operator">&gt;</span>
                <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token builtin class-name">enable</span> uart driver
                <span class="token punctuation">[</span>*<span class="token punctuation">]</span> enbale uart hal APIs Test <span class="token builtin class-name">command</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span>
│  hal_uart<span class="token punctuation">.</span>c         # 驱动源码
│  platform<span class="token operator">-</span>uart<span class="token punctuation">.</span>h    # 平台选择头文件
│  uart<span class="token punctuation">.</span>h             # 驱动私有头文件
└─platform
        uart<span class="token operator">-</span>sun20iw2p1<span class="token punctuation">.</span>h # 平台特化定义
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_uart.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="返回值枚举" tabindex="-1"><a class="header-anchor" href="#返回值枚举" aria-hidden="true">#</a> 返回值枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    HAL_UART_STATUS_ERROR_PARAMETER <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>      <span class="token comment">/**&lt; Invalid user input parameter. */</span>
    HAL_UART_STATUS_ERROR_BUSY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>           <span class="token comment">/**&lt; UART port is currently in use. */</span>
    HAL_UART_STATUS_ERROR_UNINITIALIZED <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/**&lt; UART port has not been initialized. */</span>
    HAL_UART_STATUS_ERROR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token comment">/**&lt; UART driver detected a common error. */</span>
    HAL_UART_STATUS_OK <span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment">/**&lt; UART function executed successfully. */</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_uart_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="波特率枚举" tabindex="-1"><a class="header-anchor" href="#波特率枚举" aria-hidden="true">#</a> 波特率枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    UART_BAUDRATE_300 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    UART_BAUDRATE_600<span class="token punctuation">,</span>
    UART_BAUDRATE_1200<span class="token punctuation">,</span>
    UART_BAUDRATE_2400<span class="token punctuation">,</span>
    UART_BAUDRATE_4800<span class="token punctuation">,</span>
    UART_BAUDRATE_9600<span class="token punctuation">,</span>
    UART_BAUDRATE_19200<span class="token punctuation">,</span>
    UART_BAUDRATE_38400<span class="token punctuation">,</span>
    UART_BAUDRATE_57600<span class="token punctuation">,</span>
    UART_BAUDRATE_115200<span class="token punctuation">,</span>
    UART_BAUDRATE_230400<span class="token punctuation">,</span>
    UART_BAUDRATE_576000<span class="token punctuation">,</span>
    UART_BAUDRATE_921600<span class="token punctuation">,</span>
    UART_BAUDRATE_1000000<span class="token punctuation">,</span>
    UART_BAUDRATE_1500000<span class="token punctuation">,</span>
    UART_BAUDRATE_3000000<span class="token punctuation">,</span>
    UART_BAUDRATE_4000000<span class="token punctuation">,</span>
    UART_BAUDRATE_MAX<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_baudrate_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uart-字长枚举" tabindex="-1"><a class="header-anchor" href="#uart-字长枚举" aria-hidden="true">#</a> UART 字长枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    UART_WORD_LENGTH_5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    UART_WORD_LENGTH_6<span class="token punctuation">,</span>
    UART_WORD_LENGTH_7<span class="token punctuation">,</span>
    UART_WORD_LENGTH_8<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_word_length_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uart-停止位枚举" tabindex="-1"><a class="header-anchor" href="#uart-停止位枚举" aria-hidden="true">#</a> UART 停止位枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    UART_STOP_BIT_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    UART_STOP_BIT_2<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_stop_bit_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uart-奇偶枚举" tabindex="-1"><a class="header-anchor" href="#uart-奇偶枚举" aria-hidden="true">#</a> UART 奇偶枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    UART_PARITY_NONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    UART_PARITY_ODD<span class="token punctuation">,</span>
    UART_PARITY_EVEN
<span class="token punctuation">}</span> <span class="token class-name">uart_parity_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uart-配置结构体" tabindex="-1"><a class="header-anchor" href="#uart-配置结构体" aria-hidden="true">#</a> UART 配置结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uart_baudrate_t</span> baudrate<span class="token punctuation">;</span>
    <span class="token class-name">uart_word_length_t</span> word_length<span class="token punctuation">;</span>
    <span class="token class-name">uart_stop_bit_t</span> stop_bit<span class="token punctuation">;</span>
    <span class="token class-name">uart_parity_t</span> parity<span class="token punctuation">;</span>
<span class="token punctuation">}</span> _uart_config_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取uart驱动的版本号" tabindex="-1"><a class="header-anchor" href="#获取uart驱动的版本号" aria-hidden="true">#</a> 获取UART驱动的版本号</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sunxi_hal_version_t</span> <span class="token function">hal_uart_get_version</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART端口号</li></ul><p>返回：</p><ul><li>UART 驱动版本号</li></ul><h3 id="初始化uart驱动" tabindex="-1"><a class="header-anchor" href="#初始化uart驱动" aria-hidden="true">#</a> 初始化UART驱动</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_init</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="初始化异构amp-uart控制台" tabindex="-1"><a class="header-anchor" href="#初始化异构amp-uart控制台" aria-hidden="true">#</a> 初始化异构AMP UART控制台</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_init_for_amp_cli</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="卸载uart驱动" tabindex="-1"><a class="header-anchor" href="#卸载uart驱动" aria-hidden="true">#</a> 卸载UART驱动</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_deinit</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="发送数据" tabindex="-1"><a class="header-anchor" href="#发送数据" aria-hidden="true">#</a> 发送数据</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_send</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li><li>data：准备发送的数据buffer</li><li>num：buffer 大小</li></ul><p>返回：</p><ul><li>成功发送的字节数</li></ul><h3 id="发送一个字符" tabindex="-1"><a class="header-anchor" href="#发送一个字符" aria-hidden="true">#</a> 发送一个字符</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_put_char</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li><li>c：待发送的字符</li></ul><p>返回：</p><ul><li>1：成功</li></ul><h3 id="接收数据" tabindex="-1"><a class="header-anchor" href="#接收数据" aria-hidden="true">#</a> 接收数据</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_receive</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li><li>data：接收数据缓冲区</li><li>num：接收数据的大小</li></ul><p>返回：</p><ul><li>size：接收到的数据大小</li></ul><h3 id="非阻塞接收数据" tabindex="-1"><a class="header-anchor" href="#非阻塞接收数据" aria-hidden="true">#</a> 非阻塞接收数据</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_receive_no_block</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> num<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li><li>data：接收数据缓冲区</li><li>num：接收数据的大小</li><li>timeout：超时时间</li></ul><p>返回：</p><ul><li>size：接收到的数据大小</li></ul><h3 id="接收一个字符" tabindex="-1"><a class="header-anchor" href="#接收一个字符" aria-hidden="true">#</a> 接收一个字符</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint8_t</span> <span class="token function">hal_uart_get_char</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li></ul><p>返回：</p><ul><li>收到的字符值</li></ul><h3 id="设置-uart-工作参数" tabindex="-1"><a class="header-anchor" href="#设置-uart-工作参数" aria-hidden="true">#</a> 设置 UART 工作参数</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_control</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li><li>cmd：保留</li><li>args: 指向 _uart_config_t 类型的结构体</li></ul><p>返回：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="轮询接收" tabindex="-1"><a class="header-anchor" href="#轮询接收" aria-hidden="true">#</a> 轮询接收</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_receive_polling</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev：UART 端口号</li><li>data：接收数据缓冲区</li><li>num：接收数据的大小</li></ul><p>返回：</p><ul><li>size：接收到的数据大小</li></ul><h3 id="查看轮询接收状态" tabindex="-1"><a class="header-anchor" href="#查看轮询接收状态" aria-hidden="true">#</a> 查看轮询接收状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_check_poll_state</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev_id<span class="token punctuation">,</span> <span class="token keyword">short</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev_id：UART 端口号</li><li>key：标志位，取值 POLLIN，POLLOUT，POLLERR</li></ul><p>返回：</p><ul><li>UART 当前的接收状态</li></ul><h3 id="执行唤醒处理函数" tabindex="-1"><a class="header-anchor" href="#执行唤醒处理函数" aria-hidden="true">#</a> 执行唤醒处理函数</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_poll_wakeup</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> dev_id<span class="token punctuation">,</span> <span class="token keyword">short</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev_id：UART 端口号</li><li>key：标志位，取值 POLLIN，POLLOUT，POLLERR</li></ul><p>返回：</p><ul><li>回调函数执行返回值</li></ul><h3 id="注册唤醒处理函数" tabindex="-1"><a class="header-anchor" href="#注册唤醒处理函数" aria-hidden="true">#</a> 注册唤醒处理函数</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_register_poll_wakeup</span><span class="token punctuation">(</span>poll_wakeup_func poll_wakeup<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>poll_wakeup：回调函数</li></ul><p>返回：</p><ul><li>0</li></ul><h3 id="设置硬件流控" tabindex="-1"><a class="header-anchor" href="#设置硬件流控" aria-hidden="true">#</a> 设置硬件流控</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_uart_set_hardware_flowcontrol</span><span class="token punctuation">(</span><span class="token class-name">uart_port_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>无</li></ul><h3 id="禁用硬件流控" tabindex="-1"><a class="header-anchor" href="#禁用硬件流控" aria-hidden="true">#</a> 禁用硬件流控</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_uart_disable_flowcontrol</span><span class="token punctuation">(</span><span class="token class-name">uart_port_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>无</li></ul><h3 id="设置-uart-回环" tabindex="-1"><a class="header-anchor" href="#设置-uart-回环" aria-hidden="true">#</a> 设置 UART 回环</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_uart_set_loopback</span><span class="token punctuation">(</span><span class="token class-name">uart_port_t</span> uart_port<span class="token punctuation">,</span> bool enable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li><li>enable：是否开启</li></ul><p>返回：</p><ul><li>无</li></ul><h3 id="使能-rx-中断" tabindex="-1"><a class="header-anchor" href="#使能-rx-中断" aria-hidden="true">#</a> 使能 RX 中断</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_enable_rx</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>0</li></ul><h3 id="失能-rx-中断" tabindex="-1"><a class="header-anchor" href="#失能-rx-中断" aria-hidden="true">#</a> 失能 RX 中断</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_uart_disable_rx</span><span class="token punctuation">(</span><span class="token class-name">int32_t</span> uart_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>uart_port：UART 端口号</li></ul><p>返回：</p><ul><li>0</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_timer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_uart.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
        <span class="token string">&quot;\\t hal_uart &lt;port&gt; &lt;baudrate&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_uart</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> tbuf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> rbuf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uart_port_t</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> baudrate<span class="token punctuation">;</span>
    _uart_config_t uart_config<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Testing UART in loopback mode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cmd_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    baudrate <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>CONFIG_CLI_UART_PORT <span class="token operator">==</span> port<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;uart0 can&#39;t test, please use other port!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>baudrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">4800</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_4800<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">9600</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_9600<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">115200</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_115200<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">1500000</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_1500000<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">4000000</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_4000000<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Using default baudrate: 115200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_115200<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    uart_config<span class="token punctuation">.</span>word_length <span class="token operator">=</span> UART_WORD_LENGTH_8<span class="token punctuation">;</span>
    uart_config<span class="token punctuation">.</span>stop_bit <span class="token operator">=</span> UART_STOP_BIT_1<span class="token punctuation">;</span>
    uart_config<span class="token punctuation">.</span>parity <span class="token operator">=</span> UART_PARITY_NONE<span class="token punctuation">;</span>

    <span class="token function">hal_uart_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_control</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>uart_config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_disable_flowcontrol</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_set_loopback</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* send */</span>
    <span class="token function">hal_uart_send</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> tbuf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* loopback receive */</span>
    <span class="token function">hal_uart_receive_no_block</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">MS_TO_OSTICK</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sending:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Receiving:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* verify data */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_init API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_control API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_disable_flowcontrol API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_set_loopback API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_send API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_receive API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_deinit API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test uart hal APIs success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test uart hal APIs failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_msleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_deinit</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_uart<span class="token punctuation">,</span> hal_uart<span class="token punctuation">,</span> uart hal APIs tests<span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFFSIZE</span> <span class="token expression"><span class="token number">4096</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_stress_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage:\\n&quot;</span>
        <span class="token string">&quot;\\t hal_uart &lt;port&gt; &lt;baudrate&gt; &lt;flowctrl&gt; &lt;loopback&gt; &lt;len&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_uart_stress</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>tbuf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rbuf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>BUFFSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uart_port_t</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> baudrate<span class="token punctuation">;</span>
    _uart_config_t uart_config<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flowctrl<span class="token punctuation">,</span> loopback<span class="token punctuation">,</span> testlen<span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Testing UART in loopback mode with stress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cmd_stress_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    baudrate <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    flowctrl <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    loopback <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testlen <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUFFSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUFFSIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>baudrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">4800</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_4800<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">9600</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_9600<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">115200</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_115200<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">1500000</span><span class="token operator">:</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_1500000<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Using default baudrate: 115200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uart_config<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> UART_BAUDRATE_115200<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    uart_config<span class="token punctuation">.</span>word_length <span class="token operator">=</span> UART_WORD_LENGTH_8<span class="token punctuation">;</span>
    uart_config<span class="token punctuation">.</span>stop_bit <span class="token operator">=</span> UART_STOP_BIT_1<span class="token punctuation">;</span>
    uart_config<span class="token punctuation">.</span>parity <span class="token operator">=</span> UART_PARITY_NONE<span class="token punctuation">;</span>

    <span class="token function">hal_uart_init</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_control</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>uart_config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;flow:%d, loopback:%d len:%d\\n&quot;</span><span class="token punctuation">,</span> flowctrl<span class="token punctuation">,</span> loopback<span class="token punctuation">,</span> testlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flowctrl<span class="token punctuation">)</span>
        <span class="token function">hal_uart_set_hardware_flowcontrol</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">hal_uart_disable_flowcontrol</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>loopback<span class="token punctuation">)</span>
        <span class="token function">hal_uart_set_loopback</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">hal_uart_set_loopback</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* send */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;send\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_send</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> tbuf<span class="token punctuation">,</span> testlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;send done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* loopback receive */</span>
    <span class="token function">hal_uart_receive</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> testlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sending:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%x &quot;</span><span class="token punctuation">,</span> tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Receiving:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x%x &quot;</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token comment">/* verify data */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check %d fail, 0x%x != 0x%x\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> tbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rbuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> testlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_init API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_control API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_disable_flowcontrol API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_set_loopback API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_send API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_receive API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test hal_uart_deinit API success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test uart hal APIs success!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Test uart hal APIs failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_msleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_uart_deinit</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_uart_stress<span class="token punctuation">,</span> hal_uart_stress<span class="token punctuation">,</span> uart hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,158),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","chapter13.html.vue"]]);export{r as default};
