import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const e={},p=t(`<h1 id="dma-controller" tabindex="-1"><a class="header-anchor" href="#dma-controller" aria-hidden="true">#</a> DMA Controller</h1><p>本文介绍RTOS 中DMA 驱动的接口及使用方法，为DMA 的使用者提供参考。</p><p>DMA 主要实现设备与设备、设备与 memory、memory 与 memory 之间的数据搬运与传输；BSP DMA 驱动主要实现设备驱动的底层细节，并为上层提供一套标准的 API 接口以供使用。</p><h2 id="文档约定" tabindex="-1"><a class="header-anchor" href="#文档约定" aria-hidden="true">#</a> 文档约定</h2><table><thead><tr><th style="text-align:left;">数据</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">DRQSRC_XXX</td><td style="text-align:left;">源 DRQ 号</td></tr><tr><td style="text-align:left;">DRQDST_XXX</td><td style="text-align:left;">目的 DRQ 号</td></tr></tbody></table><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options —<span class="token operator">&gt;</span>
    soc related device drivers —<span class="token operator">&gt;</span>
        DMA Devices —<span class="token operator">&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable dma driver
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>     enable dma hal API test command
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hal<span class="token operator">/</span>source<span class="token operator">/</span>dma<span class="token operator">/</span>       <span class="token operator">--</span><span class="token operator">--</span> 驱动源码
├── hal_dma<span class="token punctuation">.</span>c
├── Kconfig
├── Makefile
├── platform
│   └── dma<span class="token operator">-</span>sun20iw3<span class="token punctuation">.</span>h
├── platform<span class="token operator">-</span>dma<span class="token punctuation">.</span>h

include<span class="token operator">/</span>hal<span class="token operator">/</span>          <span class="token operator">--</span><span class="token operator">--</span> 驱动APIs声明头文件
└── hal_dma<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="驱动框架" tabindex="-1"><a class="header-anchor" href="#驱动框架" aria-hidden="true">#</a> 驱动框架</h2><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter4/image1.jpg" alt="image1"></p><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_dma.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_common.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="申请-dma-通道" tabindex="-1"><a class="header-anchor" href="#申请-dma-通道" aria-hidden="true">#</a> 申请 DMA 通道</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_chan_status_t</span> <span class="token function">hal_dma_chan_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span><span class="token operator">*</span>dma_chan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dma_chan: 存放 DMA 通道的指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_CHAN_STATUS_BUSY: 申请失败</li><li>HAL_DMA_CHAN_STATUS_FREE: 申请成功</li></ul><h3 id="释放-dma-通道" tabindex="-1"><a class="header-anchor" href="#释放-dma-通道" aria-hidden="true">#</a> 释放 DMA 通道</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_chan_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan: 要释放的 DMA 通道结构体指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="释放-dma-通道描述符" tabindex="-1"><a class="header-anchor" href="#释放-dma-通道描述符" aria-hidden="true">#</a> 释放 DMA 通道描述符</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_chan_desc_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan: 要释放的 DMA 通道结构体指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="初始化环形-dma-传输" tabindex="-1"><a class="header-anchor" href="#初始化环形-dma-传输" aria-hidden="true">#</a> 初始化环形 DMA 传输</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_prep_cyclic</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> buf_addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> buf_len<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> period_len<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">dma_transfer_direction</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li><li>buf_addr: 数据缓冲区</li><li>buf_len: 数据缓冲区长度</li><li>period_len: 单次 DMA 搬运长度</li><li>dir:DMA 传输方向</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="初始化-memory-to-memory-dma-传输" tabindex="-1"><a class="header-anchor" href="#初始化-memory-to-memory-dma-传输" aria-hidden="true">#</a> 初始化 memory to memory DMA 传输</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_prep_memcpy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> dest<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> src<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li><li>dest: 目的地址</li><li>src: 源地址</li><li>len: 传输长度</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="初始化通用-dma-传输" tabindex="-1"><a class="header-anchor" href="#初始化通用-dma-传输" aria-hidden="true">#</a> 初始化通用 DMA 传输</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_prep_device</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> dest<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> src<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">dma_transfer_direction</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li><li>dest: 目的地址</li><li>src: 源地址</li><li>len: 传输长度</li><li>dir:DMA 传输方向</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="注册-dma-回调函数" tabindex="-1"><a class="header-anchor" href="#注册-dma-回调函数" aria-hidden="true">#</a> 注册 DMA 回调函数</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_callback_install</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> dma_callback callback<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>callback_param<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li><li>callback: 回调函数 handler</li><li>callback_param: 回调函数传参</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="配置-dma-描述符传输信息" tabindex="-1"><a class="header-anchor" href="#配置-dma-描述符传输信息" aria-hidden="true">#</a> 配置 DMA 描述符传输信息</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_slave_config</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dma_slave_config</span> <span class="token operator">*</span>config<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li><li>config:DMA 描述符结构体指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="获取-dma-发送状态" tabindex="-1"><a class="header-anchor" href="#获取-dma-发送状态" aria-hidden="true">#</a> 获取 DMA 发送状态</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">dma_status</span> <span class="token function">hal_dma_tx_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>left_size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变</li><li>left_size: 存放剩余长度的指针变量</li></ul><p>返回值：</p><ul><li>DMA_INVALID_PARAMETER: 参数非法</li><li>DMA_IN_PROGRESS: 正在进行</li><li>DMA_COMPLETE: 传输完成</li></ul><h3 id="启动-dma-传输" tabindex="-1"><a class="header-anchor" href="#启动-dma-传输" aria-hidden="true">#</a> 启动 DMA 传输</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="停止-dma-传输" tabindex="-1"><a class="header-anchor" href="#停止-dma-传输" aria-hidden="true">#</a> 停止 DMA 传输</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_dma_status_t</span> <span class="token function">hal_dma_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>chan:DMA 通道结构体指针变量</li></ul><p>返回值：</p><ul><li>HAL_DMA_STATUS_INVALID_PARAMETER: 参数非法</li><li>HAL_DMA_STATUS_ERROR: 失败</li><li>HAL_DMA_STATUS_OK: 成功</li></ul><h3 id="初始化-dma-控制器驱动" tabindex="-1"><a class="header-anchor" href="#初始化-dma-控制器驱动" aria-hidden="true">#</a> 初始化 DMA 控制器驱动</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_dma_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="申请一致性内存" tabindex="-1"><a class="header-anchor" href="#申请一致性内存" aria-hidden="true">#</a> 申请一致性内存</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">dma_alloc_coherent</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>size: 申请内存的大小</li></ul><p>返回值：</p><ul><li>ptr: 内存缓冲区指针</li></ul><h3 id="释放一致性内存" tabindex="-1"><a class="header-anchor" href="#释放一致性内存" aria-hidden="true">#</a> 释放一致性内存</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">dma_free_coherent</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>addr: 内存缓冲区指针</li></ul><p>返回值：</p><ul><li>无</li></ul><h2 id="调试节点" tabindex="-1"><a class="header-anchor" href="#调试节点" aria-hidden="true">#</a> 调试节点</h2><ul><li><code>menuconfig</code> 选择测试文件<code>CONFIG_HAL_TEST_DMA</code></li><li>s系统启动后执行<code>hal_dma</code>即可，若结果为 “PASS”, 则表明当前 DMA 基本功能是否正常</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_dma.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_common.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DMA_TEST_LEN</span>    <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dma_test_cb</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;DMA finished, callback to do something...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_dma</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_chan</span> <span class="token operator">*</span>hdma <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>buf1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>buf2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dma_slave_config</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;run in dma test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    buf2 <span class="token operator">=</span> <span class="token function">dma_alloc_coherent</span><span class="token punctuation">(</span>DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf1 <span class="token operator">=</span> <span class="token function">dma_alloc_coherent</span><span class="token punctuation">(</span>DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;malloc buf1 error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;malloc buf2 error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buf2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> DMA_TEST_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>

    <span class="token function">hal_dcache_clean_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf1<span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf2<span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* request dma chan */</span>
    ret <span class="token operator">=</span> <span class="token function">hal_dma_chan_request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> HAL_DMA_CHAN_STATUS_BUSY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma channel busy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* register dma callback */</span>
    ret <span class="token operator">=</span> <span class="token function">hal_dma_callback_install</span><span class="token punctuation">(</span>hdma<span class="token punctuation">,</span> dma_test_cb<span class="token punctuation">,</span> hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;register dma callback failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    config<span class="token punctuation">.</span>direction <span class="token operator">=</span> DMA_MEM_TO_MEM<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>dst_addr_width <span class="token operator">=</span> DMA_SLAVE_BUSWIDTH_8_BYTES<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>src_addr_width <span class="token operator">=</span> DMA_SLAVE_BUSWIDTH_8_BYTES<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>dst_maxburst <span class="token operator">=</span> DMA_SLAVE_BURST_16<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>src_maxburst <span class="token operator">=</span> DMA_SLAVE_BURST_16<span class="token punctuation">;</span>
    config<span class="token punctuation">.</span>slave_id <span class="token operator">=</span> <span class="token function">sunxi_slave_id</span><span class="token punctuation">(</span>DRQDST_SDRAM<span class="token punctuation">,</span> DRQSRC_SDRAM<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">hal_dma_slave_config</span><span class="token punctuation">(</span>hdma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma config error, ret:%d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_dma_prep_memcpy</span><span class="token punctuation">(</span>hdma<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf1<span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma prep error, ret:%d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_dma_start</span><span class="token punctuation">(</span>hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma start error, ret:%d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hal_dma_tx_status</span><span class="token punctuation">(</span>hdma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">hal_dma_stop</span><span class="token punctuation">(</span>hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma stop error, ret:%d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_dma_chan_free</span><span class="token punctuation">(</span>hdma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HAL_DMA_STATUS_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;dma free error, ret:%d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf2<span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;src buf:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> DMA_TEST_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;dst buf:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> DMA_TEST_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> buf2<span class="token punctuation">,</span> DMA_TEST_LEN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dma test fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dma test pass\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

end<span class="token operator">:</span>
    <span class="token function">dma_free_coherent</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dma_free_coherent</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_dma<span class="token punctuation">,</span> hal_dma<span class="token punctuation">,</span> dma hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><ol><li>使用时出现数据搬运后数据为 0 的情况</li></ol><p>确保传输内存使用 <code>dma_alloc_coherent</code> 申请</p>`,119),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","chapter4.html.vue"]]);export{d as default};
