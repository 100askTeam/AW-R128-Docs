import{_ as n,o as s,c as a,e}from"./app-e85d5a28.js";const p={},t=e(`<h1 id="gpadc" tabindex="-1"><a class="header-anchor" href="#gpadc" aria-hidden="true">#</a> GPADC</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>GPADC 是 12bit 采集精度的模数转换模块，支持 4 路通道，模拟输入范围 0-1.8v，最高采样率 1MHZ，并且支持数据比较，自校验功能，同时工作于可配置的四种工作模式：</p><ul><li>Single mode：在指定的通道完成一次转换并将数据放在响应数据寄存器中；</li><li>Single-cycle mode：在指定的通道完成一个周期转换并将数据放在响应数据寄存器中；</li><li>Continuous mode：在指定的通道持续转换并将数据放在响应数据寄存器中；</li><li>Burst mode：边采样边转换并将数据放入 32 字节的 FIFO，支持中断控制。</li></ul><p>一般来说 GPADC 接口用于 KEY 模块按键的读取，一般包括 VOL+、VOL-、HOME、MENU、ENTER 等等，GPADC0 用于 KEY 的电路如上图。AVCC-AP 为 1.8V 的供电，不同的按键按下，GPADC 口的电压不同，CPU 通过对这个电压的采样来确定具体是那一个按键按下。如下图，VOL+、VOL-、MENU、ENTER、HOME对应的电压分别为 0.21V、0.41V、0.59V、0.75V、0.88V。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter6/image1.jpg" alt="image1"></p><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>其 menuconfig 的配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            GPADC devices ---&gt;
                [*] enable gpadc driver
                [*] enbale gpadc hal APIs Test command
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>GPADC 模块源码结构如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos<span class="token operator">-</span>hal<span class="token operator">/</span>
<span class="token operator">|</span><span class="token operator">--</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>gpadc<span class="token operator">/</span>hal_gpadc<span class="token punctuation">.</span>c    <span class="token comment">// hal层接口代码</span>
<span class="token operator">|</span><span class="token operator">--</span>include<span class="token operator">/</span>hal<span class="token operator">/</span>sunxi_hal_gpadc<span class="token punctuation">.</span>h   <span class="token comment">// 头文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_gpadc.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="gpadc-初始化接口" tabindex="-1"><a class="header-anchor" href="#gpadc-初始化接口" aria-hidden="true">#</a> GPADC 初始化接口</h3><p>GPADC 模块初始化，主要初始化时钟，中断以及采样率配置等</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_gpadc_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="gpadc-通道配置接口" tabindex="-1"><a class="header-anchor" href="#gpadc-通道配置接口" aria-hidden="true">#</a> GPADC 通道配置接口</h3><p>选择并配置 GPADC 某个通道</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_gpadc_status_t</span> <span class="token function">hal_gpadc_channel_init</span><span class="token punctuation">(</span><span class="token class-name">hal_gpadc_channel_t</span> channal<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>channel：通道号</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="gpadc-通道取消配置接口" tabindex="-1"><a class="header-anchor" href="#gpadc-通道取消配置接口" aria-hidden="true">#</a> GPADC 通道取消配置接口</h3><p>取消 GPADC 某个通道配置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_gpadc_status_t</span> <span class="token function">hal_gpadc_channel_exit</span><span class="token punctuation">(</span><span class="token class-name">hal_gpadc_channel_t</span> channal<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>channel：通道号</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="gpadc-去初始化接口" tabindex="-1"><a class="header-anchor" href="#gpadc-去初始化接口" aria-hidden="true">#</a> GPADC 去初始化接口</h3><p>GPADC 模块去初始化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_gpadc_status_t</span> <span class="token function">hal_gpadc_deinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h3 id="gpadc-注册回调接口" tabindex="-1"><a class="header-anchor" href="#gpadc-注册回调接口" aria-hidden="true">#</a> GPADC 注册回调接口</h3><p>向应用层提供注册回调接口的功能</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">hal_gpadc_status_t</span> <span class="token function">hal_gpadc_register_callback</span><span class="token punctuation">(</span><span class="token class-name">hal_gpadc_channel_t</span> channal<span class="token punctuation">,</span> <span class="token class-name">gpadc_callback_t</span> user_callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>channel：通道号</li><li>user_callback：应用层回调接口</li></ul><p>返回值：</p><ul><li>0 代表成功</li><li>负数代表失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><h3 id="读取电压" tabindex="-1"><a class="header-anchor" href="#读取电压" aria-hidden="true">#</a> 读取电压</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_gpadc.h&gt;</span></span>

<span class="token keyword">int</span> channel <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_gpadc</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> vol_data<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Run gpadc test\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;usage: hal_gpadc channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpadc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;gpadc init failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    channel <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> channel <span class="token operator">&gt;</span> CHANNEL_NUM<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;channel %d is wrong, must between 0 and %d\\n&quot;</span><span class="token punctuation">,</span> CHANNEL_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_gpadc_channel_init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vol_data <span class="token operator">=</span> <span class="token function">gpadc_read_channel_data</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;channel %d vol data is %u\\n&quot;</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> vol_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpadc_channel_exit</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpadc_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_gpadc<span class="token punctuation">,</span> hal_gpadc<span class="token punctuation">,</span> gpadc hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回调方式读取电压" tabindex="-1"><a class="header-anchor" href="#回调方式读取电压" aria-hidden="true">#</a> 回调方式读取电压</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_gpadc.h&gt;</span></span>

<span class="token keyword">int</span> channel <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">sunxigpadc_irq_callback</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> dada_type<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> vol_data<span class="token punctuation">;</span>
    data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>VOL_RANGE <span class="token operator">/</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vol_data <span class="token operator">=</span> data <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;channel %d vol data: %d\\n&quot;</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> vol_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpadc_channel_exit</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpadc_deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_gpadc_callback</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> vol_data<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Run gpadc test\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;usage: hal_gpadc channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_gpadc_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;gpadc init failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    channel <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> channel <span class="token operator">&gt;</span> CHANNEL_NUM<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_err</span><span class="token punctuation">(</span><span class="token string">&quot;channel %d is wrong, must between 0 and %d\\n&quot;</span><span class="token punctuation">,</span> CHANNEL_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_gpadc_channel_init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_gpadc_register_callback</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> sunxigpadc_irq_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_gpadc_callback<span class="token punctuation">,</span> hal_gpadc callback<span class="token punctuation">,</span> gpadc hal APIs tests callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),c=[t];function l(i,o){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","chapter6.html.vue"]]);export{d as default};
