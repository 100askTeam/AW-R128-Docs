import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="rtos-异构多核通信" tabindex="-1"><a class="header-anchor" href="#rtos-异构多核通信" aria-hidden="true">#</a> RTOS 异构多核通信</h1><h2 id="异构多核通信介绍" tabindex="-1"><a class="header-anchor" href="#异构多核通信介绍" aria-hidden="true">#</a> 异构多核通信介绍</h2><p>R128 所带有的 M33 主核心与 C906, HIFI5 DSP 核心是完全不同的核心，为了最大限度的发挥他们的性能，协同完成某一任务，所以在不同的核心上面运行的系统也各不相同。这些不同架构的核心以及他们上面所运行的软件组合在一起，就成了 AMP 系统 （Asymmetric Multiprocessing System, 异构多处理系统）。</p><p>为了多核心协同工作，对于需要异构多核通信框架需要满足以下功能：</p><ol><li>隔离核间差异，把一部分服务部署在一个核上，另一部分服务部署在另外的核上，应用层代码只需通过标准接口来申请服务，其对底层服务具体在哪个核上实现无感知。</li><li>同一个核，既可作为远程服务端，也可以作为客户端。</li></ol><p>针对异构多核系统的特性，在进行远程服务调用时，需要解决以下几个问题：</p><ol><li>缓存一致性问题。缓存一致性是在异构多核系统中十分重要的问题，跨核调用者和服务提供者必须知道其使用的 buffer 是否会经过其他核的修改，是否会被其他核读取数据。若被其他核修改，那当前核使用时，需要先无效 buffer 对应的 dcache；若会被其他核读取，则当前核写完数据后，需要将 buffer 对应的 dcache 刷回下一级内存。如此一来，一旦远程服务的参数或返回值比较复杂，那么使用者和服务提供者就需要花大量的精力来理清每个 buffer 的使用关系，极大地增加了他们的负担。并且，为了避免对其他数据造成影响，冲刷 dcache 时也还需要保证其数据独占一个 cacheline，否则会将其他数据误刷。这也会增加处理缓存一致性问题的难度。</li><li>CPU 位宽不一致问题。在 R128 项目中，HIFI5 的 CPU 位宽为 32bit，C906 的 CPU 位宽为64bit，M33 的 CPU 位宽为 32bit。对于三种不同的核，软件上指针变量、long 类型变量的数据大小并不一致，那么就会导致同一个结构体在不同位宽的核上，其内存布局并不一致，三个核若直接读取则会发生错误。</li><li>复杂场景处理问题。在多个核之间，需要考虑到远程服务端的并发处理能力、核间的嵌套调用关系、服务端函数的休眠、如何降低内存使用开销等。这些场景都是需要进行优化处理的，服务端的并发处理能力会影响到跨核远程服务的高效性；核间的嵌套调用以及服务函数的休眠，影响到远程调用服务的稳定性。</li></ol><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image1.png" alt=""></p><p>为了解决这些问题，提供了 Sunxi-AMP 框架提供异构通讯的接口。同时也提供了 rpdata 实现更加底层的异构通讯</p><h2 id="sunxi‐amp-简介" tabindex="-1"><a class="header-anchor" href="#sunxi‐amp-简介" aria-hidden="true">#</a> Sunxi‑AMP 简介</h2><h3 id="sunxi‐amp-工作流程图" tabindex="-1"><a class="header-anchor" href="#sunxi‐amp-工作流程图" aria-hidden="true">#</a> Sunxi‑AMP 工作流程图</h3><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image2.png" alt=""></p><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h3><p><code>amp_threadpool.c</code> 文件中实现了一个简易线程池，在系统启动时创建指定线程数量的线程池，以提升远程消息的处理效率。若处理远程消息较多，无法及时处理，则由动态增加线程池中线程的数量；若消息较少，则动态删除线程池中的线程。初始化时创建的线程数量由 <code>amp_threadpool.h</code> 中的 <code>AMP_THD_POOL_MIN_NUM</code> 宏来决定，其也表示线程池中至少存在的最小数量的处理线程。<code>AMP_THD_POOL_MAX_NUM</code> 表示线程池中能同时存在的处理线程的最大数量。动态新增处理线程的条件是消息接受队列中存在两个或以上的未处理消息并且当前线程池中存活线程数量小于 <code>AMP_THD_POOL_MAX_NUM</code>。动态删除处理线程的条件是 (正在处理消息的线程的数量 * 2) 小于系统中存活线程数量并且当前线程池中存活线程数量大于 <code>AMP_THD_POOL_MAX_NUM</code>。</p><h3 id="远程调用实现方式" tabindex="-1"><a class="header-anchor" href="#远程调用实现方式" aria-hidden="true">#</a> 远程调用实现方式</h3><p>Sunxi‑AMP 目前支持 1 种远程跨核调用实现方式：</p><ul><li>参数指针传递：将远程跨核调用服务参数的指针或者数据值进行直接传递。如果参数是指针类型，则直接传递该指针；如果参数是数值，则直接传递该数值。参数指针传递比较适合参数结构体简单、核间数据传递量大的场景。其缺点是处理缓存一致性比较麻烦。</li></ul><p>直接通过指针来传递参数及返回值，数据传递过程中可以免于拷贝，消耗内存较少，性能较高。</p><p>以 <code>setConfig(struct config *data)</code> 函数为例，在发起 <code>setConfig</code> 远程调用时，会创建一个<code>sunxi_amp_msg_args</code> 结构体，会将 <code>setConfig</code> 的参数依次设置到 <code>sunxi_amp_msg_args</code> 的 <code>args</code> 数组中，然后将 <code>sunxi_amp_msg</code> 的 <code>data</code> 字段设置为 <code>sunxi_amp_msg_args</code> 结构体地址。通过 <code>msgbox</code> 将<code>sunxi_amp_msg</code> 发送给另外的一个核后，另外一个核重新组装 <code>sunxi_map_msg</code>，即可拿到参数数据。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image3.png" alt=""></p><h3 id="sunxi‐amp-数据结构" tabindex="-1"><a class="header-anchor" href="#sunxi‐amp-数据结构" aria-hidden="true">#</a> Sunxi‑AMP 数据结构</h3><h4 id="消息结构" tabindex="-1"><a class="header-anchor" href="#消息结构" aria-hidden="true">#</a> 消息结构</h4><p><code>sunxi_amp_msg</code> 结构体表示通过 <code>msgbox</code> 传输的消息内容，Sunxi‑AMP 远程跨核调用框架基于<code>sunxi_amp_msg</code> 消息来完成各种功能。一个完整的 <code>sunxi_amp_msg</code>，包含以下字段，总共 12字节。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_msg_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> rpcid<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">// 远程调用 ID 值，高 8 位表示 service id，低 8 位表示 function id</span>
    <span class="token class-name">uint32_t</span> prio<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 发送端任务优先级</span>
    <span class="token class-name">uint32_t</span> type<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 消息类型</span>
    <span class="token class-name">uint32_t</span> src<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// 源地址，即表示从哪个核发出的消息</span>
    <span class="token class-name">uint32_t</span> dst<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// 目的地址，即表示该消息发送到哪个核上</span>
    <span class="token class-name">uint32_t</span> data<span class="token punctuation">;</span>      <span class="token comment">// 消息数据</span>
    <span class="token class-name">uint32_t</span> flags<span class="token punctuation">;</span>     <span class="token comment">// 消息标识，当前设置为线程句柄，用于在远程调用堵塞等待时唤醒该线程</span>
<span class="token punctuation">}</span> sunxi_amp_msg<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中远程调用的 ID 分为两个部分，高 8 位表示远程服务组 ID，低 8 位表示某个远程服务组中的 <code>function ID</code>，也就是最多支持 256 个远程服务组，每个远程服务组最多支持 256 个远程调用。下面以 FSYS 文件系统服务为例，介绍 <code>rpcid</code> 的组成及其计算方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RPCCALL_FSYS</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">RPCNO</span><span class="token punctuation">(</span>RPCNO_FSYS<span class="token punctuation">,</span> RPCHandler_FSYS_t<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>RPCSERVICE_FSYS_DIR <span class="token operator">&lt;&lt;</span> <span class="token number">29</span><span class="token punctuation">)</span> <span class="token operator">|</span> SELF_DIRECTION <span class="token operator">&lt;&lt;</span> <span class="token number">26</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>RPCCALL_FSYS(y)</code> 宏会自动计算 <code>rpcid</code> 以及 <code>src</code>, <code>dst</code> 三个字段的值。</li><li><code>RPCSERVICE_FSYS_DIR</code> 表示 <code>FSYS</code> 服务所在的核，它用来设置 <code>dst</code> 字段。</li><li><code>SELF_DIRECTION</code> 表示当前所在的核，用于设置 src 字段。</li><li><code>RPCNO(RPCNO_FSYS</code>, <code>RPCHandler_FSYS_t, y)</code> 用于计算 <code>rpcid</code>。其中，<code>RPCNO_FSYS</code> 计算出 <code>service ID</code>，放置于高 8 位，<code>RPCNO</code> 计算出 <code>function ID</code>，放置于低 8 位。</li></ul><h4 id="消息类型" tabindex="-1"><a class="header-anchor" href="#消息类型" aria-hidden="true">#</a> 消息类型</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>MSG_SERIAL_FUNC_CALL   <span class="token comment">// 序列化远程服务调用</span>
MSG_SERIAL_FUNC_RET    <span class="token comment">// 序列化远程服务返回值</span>
MSG_SERIAL_FREE_BUFFER <span class="token comment">// 序列化远程服务释放内存</span>
MSG_DIRECT_FUNC_CALL   <span class="token comment">// 参数指针传递远程服务调用</span>
MSG_DIRECT_FUNC_RET    <span class="token comment">// 参数指针传递远程服务返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指针传递远程调用时的参数结构体" tabindex="-1"><a class="header-anchor" href="#指针传递远程调用时的参数结构体" aria-hidden="true">#</a> 指针传递远程调用时的参数结构体</h4><p><code>sunxi_amp_msg_args</code> 用来表示使用指针传递远程调用时的参数信息，<code>sunxi_amp_msg_args</code> 结构体的地址会被设置到 <code>sunxi_amp_msg</code> 的 <code>data</code> 字段进行传递。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_msg_args_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> args_num<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> reserved<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> args<span class="token punctuation">[</span>SUNXI_AMP_MAX_ARGS_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> sunxi_amp_msg_args<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="远程调用服务的服务函数表" tabindex="-1"><a class="header-anchor" href="#远程调用服务的服务函数表" aria-hidden="true">#</a> 远程调用服务的服务函数表</h4><p><code>sunxi_amp_func_table</code> 用来表示远程调用服务的服务函数表。<code>args_num</code> 表示该服务的参数个数，<code>return_type</code> 表示该服务的返回值类型，<code>func</code> 表示服务函数指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_func_table</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> args_num<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> return_type<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    sunxi_amp_service_func func<span class="token punctuation">;</span>
<span class="token punctuation">}</span> sunxi_amp_func_table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sunxi-amp-源码结构" tabindex="-1"><a class="header-anchor" href="#sunxi-amp-源码结构" aria-hidden="true">#</a> Sunxi-AMP 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>├── amp_core<span class="token punctuation">.</span>c            # Sunxi‑AMP 核心处理代码，包含消息解析等
├── amp_msgbox<span class="token punctuation">.</span>c          # Sunxi‑AMP msgbox 对接封装
├── amp_service<span class="token punctuation">.</span>c         # 远程服务数组
├── amp_stub<span class="token punctuation">.</span>c            # 触发远程服务的钩子函数
├── amp_test<span class="token punctuation">.</span>c            # Sunxi‑AMP 单核测试文件
├── amp_threadpool<span class="token punctuation">.</span>c      # Sunxi‑AMP 线程池
├── amp_threadpool<span class="token punctuation">.</span>h      # 线程池头文件
├── Kconfig               # 配置文件
├── Makefile
├── msgbuffer<span class="token punctuation">.</span>c           # 对接 erpc 实现的源码，已废弃
├── msgbuffer<span class="token punctuation">.</span>h
├── service               # 已支持的远程调用服务
│   ├── audio             # 音频远程调用服务
│   ├── bt                # 蓝牙远程调用服务
│   ├── demo              # erpc 测试用例
│   ├── flashc            # flashc驱动远程调用服务
│   ├── fsys              # 文件系统远程调用服务
│   ├── misc              # 杂项远程调用服务，主要用于操作命令传递之类的场景
│   ├── net               # wifi 网络远程调用服务
│   ├── pm                # 休眠唤醒远程调用服务
│   ├── rpcconsole        # 控制台远程调用服务
│   ├── rpdata            # 远程数据获取调用服务，用于屏蔽复杂操作，使开发者仅关心数据获取及发送
│   └── tfm               # 安全系统远程调用服务
├── sunxi_amp<span class="token punctuation">.</span>h
├── sunxi_amp_msg<span class="token punctuation">.</span>h
├── sunxi_amp_status<span class="token punctuation">.</span>h
├── sunxi_amp_table<span class="token punctuation">.</span>h
└── tests                 # 多核通信压力测试
    └── test_stress<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h3><p>M33 与 C906</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>System components ‑‑‑&gt;
    aw components ‑‑‑&gt;
        AMP Components Support ‑‑‑&gt;
            [*] Tina RTOS AMP                    # 使能 Sunxi‑AMP 组件
            [*] AMP Funcall Thread               # 使能通过任务处理函数调用
            [*] AMP Funcall ThreadPool           # 使能线程池
            [*] AMP Change Service Task Priority # 使能优先级传递
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sunxi-amp-接口说明" tabindex="-1"><a class="header-anchor" href="#sunxi-amp-接口说明" aria-hidden="true">#</a> Sunxi-AMP 接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_amp.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="远程调用服务函数结构体" tabindex="-1"><a class="header-anchor" href="#远程调用服务函数结构体" aria-hidden="true">#</a> 远程调用服务函数结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_FSYS<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_NET<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_BT<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_DEMO<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_ARM_CONSOLE<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_DSP_CONSOLE<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_RV_CONSOLE<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_PMOFM33<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_PMOFRV<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_PMOFDSP<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_FLASHC<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_M33_MISC<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_RV_MISC<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_DSP_MISC<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_AUDIO<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_RPDATA<span class="token punctuation">;</span>
    sunxi_amp_func_table <span class="token operator">*</span>RPCHandler_TFM<span class="token punctuation">;</span>
<span class="token punctuation">}</span> RPCHandler_RPCT_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-信息结构体" tabindex="-1"><a class="header-anchor" href="#amp-信息结构体" aria-hidden="true">#</a> AMP 信息结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_info_t</span>
<span class="token punctuation">{</span>
    QueueHandle_t send_queue<span class="token punctuation">;</span> <span class="token comment">/*send to remote processor */</span>
    QueueHandle_t recv_queue<span class="token punctuation">;</span> <span class="token comment">/*receive from remote processor */</span>
    TaskHandle_t  sendTask<span class="token punctuation">;</span>   <span class="token comment">/*send to remote processor */</span>
    TaskHandle_t  recvTask<span class="token punctuation">;</span>   <span class="token comment">/*receive from remote processor */</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> sedp_arm<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> sedp_rv<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> sedp_dsp<span class="token punctuation">;</span>
    sunxi_amp_wait wait<span class="token punctuation">;</span>
    QueueHandle_t amp_msg_heap_mutex<span class="token punctuation">;</span>
<span class="token punctuation">}</span> sunxi_amp_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-消息结构体" tabindex="-1"><a class="header-anchor" href="#amp-消息结构体" aria-hidden="true">#</a> AMP 消息结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_msg_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> rpcid<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> prio<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> type<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> src<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dst<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> data<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> flags<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> sunxi_amp_msg<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp操作结构体" tabindex="-1"><a class="header-anchor" href="#amp操作结构体" aria-hidden="true">#</a> AMP操作结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_msg_ops</span>
<span class="token punctuation">{</span>
    sunxi_amp_msg_func send_to_queue<span class="token punctuation">;</span>
    sunxi_amp_msg_func send_to_dev<span class="token punctuation">;</span>
    sunxi_amp_msg_func receive_from_dev<span class="token punctuation">;</span>
    sunxi_amp_dev_init init<span class="token punctuation">;</span>
<span class="token punctuation">}</span> sunxi_amp_msg_ops<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-消息类型枚举" tabindex="-1"><a class="header-anchor" href="#amp-消息类型枚举" aria-hidden="true">#</a> AMP 消息类型枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">MSG_TYPE</span>
<span class="token punctuation">{</span>
    MSG_SERIAL_FUNC_CALL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    MSG_SERIAL_FUNC_RET<span class="token punctuation">,</span>
    MSG_SERIAL_FREE_BUFFER<span class="token punctuation">,</span>
    MSG_DIRECT_FUNC_CALL<span class="token punctuation">,</span>
    MSG_DIRECT_FUNC_RET<span class="token punctuation">,</span>
    MSG_TYPE_NUM<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-消息返回值枚举" tabindex="-1"><a class="header-anchor" href="#amp-消息返回值枚举" aria-hidden="true">#</a> AMP 消息返回值枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">FUNC_RETURN_TYPE</span>
<span class="token punctuation">{</span>
    RET_NULL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    RET_POINTER<span class="token punctuation">,</span>
    RET_NUMBER_32<span class="token punctuation">,</span>
    RET_NUMBER_64<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-消息发送方向枚举" tabindex="-1"><a class="header-anchor" href="#amp-消息发送方向枚举" aria-hidden="true">#</a> AMP 消息发送方向枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">RPC_MSG_DIRECTION</span>
<span class="token punctuation">{</span>
    RPC_MSG_DIR_UNKNOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    RPC_MSG_DIR_CM33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    RPC_MSG_DIR_RV<span class="token punctuation">,</span>
    RPC_MSG_DIR_DSP<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-消息参数" tabindex="-1"><a class="header-anchor" href="#amp-消息参数" aria-hidden="true">#</a> AMP 消息参数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_msg_args_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> args_num<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> reserved<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> args<span class="token punctuation">[</span>SUNXI_AMP_MAX_ARGS_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> sunxi_amp_msg_args<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="amp-函数表结构体" tabindex="-1"><a class="header-anchor" href="#amp-函数表结构体" aria-hidden="true">#</a> AMP 函数表结构体</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_sunxi_amp_func_table</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> args_num<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> return_type<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
    sunxi_amp_service_func func<span class="token punctuation">;</span>
<span class="token punctuation">}</span> sunxi_amp_func_table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-amp-系统信息" tabindex="-1"><a class="header-anchor" href="#获取-amp-系统信息" aria-hidden="true">#</a> 获取 AMP 系统信息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sunxi_amp_info <span class="token operator">*</span><span class="token function">get_amp_info</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>sunxi_amp_info 结构体</li></ul><h3 id="amp发送消息" tabindex="-1"><a class="header-anchor" href="#amp发送消息" aria-hidden="true">#</a> AMP发送消息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_amp_msg_send</span><span class="token punctuation">(</span>sunxi_amp_msg <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>msg：消息结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>-1：失败</li></ul><h3 id="获取-amp-操作" tabindex="-1"><a class="header-anchor" href="#获取-amp-操作" aria-hidden="true">#</a> 获取 AMP 操作</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sunxi_amp_msg_ops <span class="token operator">*</span><span class="token function">get_msg_ops</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>sunxi_amp_msg_ops：操作结构体</li></ul><h3 id="amp接收消息" tabindex="-1"><a class="header-anchor" href="#amp接收消息" aria-hidden="true">#</a> AMP接收消息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_amp_msg_recv</span><span class="token punctuation">(</span>sunxi_amp_msg <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>msg：消息结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>-1：失败</li></ul><h3 id="发起远程函数调用" tabindex="-1"><a class="header-anchor" href="#发起远程函数调用" aria-hidden="true">#</a> 发起远程函数调用</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> haveRet<span class="token punctuation">,</span> <span class="token keyword">int</span> stub_args_num<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>stub_args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>id : 远程服务函数的 ID 值</li><li>haveRet ：是否存在返回值，在实际使用中，为了保证函数调用的顺序，该值需为 1</li><li>stub_args_num : 远程服务函数的参数个数</li><li>stub_args : 远程服务函数的参数</li></ul><p>返回值：</p><ul><li>远程服务函数的返回值</li></ul><h3 id="申请-cacheline-对齐的内存" tabindex="-1"><a class="header-anchor" href="#申请-cacheline-对齐的内存" aria-hidden="true">#</a> 申请 cacheline 对齐的内存</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>size : 需要申请的内存大小</li></ul><p>返回值：</p><ul><li>申请的内存地址</li></ul><h3 id="释放-cacheline-对齐的内存" tabindex="-1"><a class="header-anchor" href="#释放-cacheline-对齐的内存" aria-hidden="true">#</a> 释放 cacheline 对齐的内存</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">amp_align_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ptr：需要释放的内存地址</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="申请-amp-内存" tabindex="-1"><a class="header-anchor" href="#申请-amp-内存" aria-hidden="true">#</a> 申请 AMP 内存</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">amp_malloc</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>size : 需要申请的内存大小</li></ul><p>返回值：</p><ul><li>申请的内存地址</li></ul><h3 id="释放-amp-内存" tabindex="-1"><a class="header-anchor" href="#释放-amp-内存" aria-hidden="true">#</a> 释放 AMP 内存</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">amp_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ptr：需要释放的内存地址</li></ul><p>返回值：</p><ul><li>无</li></ul><h2 id="sunxi-amp-使用范例" tabindex="-1"><a class="header-anchor" href="#sunxi-amp-使用范例" aria-hidden="true">#</a> Sunxi-AMP 使用范例</h2><h3 id="添加指针传递调用服务" tabindex="-1"><a class="header-anchor" href="#添加指针传递调用服务" aria-hidden="true">#</a> 添加指针传递调用服务</h3><p>添加指针传递远程调用服务的流程如下：</p><ol><li>可参考 <code>lichee/rtos‑components/aw/amp/service/fsys/</code> 远程文件系统服务。在 <code>lichee/rtos-components/aw/amp/service/</code> 下创建对应服务的文件夹 <code>fsys</code> 以及对应的 <code>service</code> 和 <code>stub</code> 端源文件，远程文件系统服务中为 <code>fsys_ser.c</code> 和 <code>fsys_stub.c</code>。可参考 <code>Makefile</code> 和 <code>Kconfig</code> 添加编译、配置新的远程调用服务</li><li>在 <code>fsys_ser.c</code> 中创建 <code>sunxi_amp_func_table</code> 数组 <code>fsys_table</code></li><li>在 <code>amp_service.c</code> 中将 <code>fsys_table</code> 添加到 <code>func_table</code> 数组中</li><li>在 <code>sunxi_amp_table.h</code> 中添加文件系统远程服务组的结构体 <code>RPCHandler_FSYS_t</code>，需要注意的是，<code>RPCHandler_FSYS_t</code> 结构体的成员变量需要与 <code>sunxi_amp</code></li><li>在 <code>sunxi_amp.h</code> 的 <code>RPCHandler_RPCT_t</code> 结构体定义中添加 <code>RPCHandler_FSYS</code> 指针</li><li>在 <code>sunxi_amp.h</code> 中定义以下宏</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPCNO_FSYS</span> <span class="token expression"><span class="token function">RPCCALL_RPCNO</span><span class="token punctuation">(</span>RPCHandler_FSYS<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPCSERVICE_FSYS_DIR</span> <span class="token expression"><span class="token punctuation">(</span>RPC_MSG_DIR_RV<span class="token punctuation">)</span> </span><span class="token comment">// 此处需要根据实际部署远程文件系统服务的核而修改</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RPCCALL_FSYS</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">RPCNO</span><span class="token punctuation">(</span>RPCNO_FSYS<span class="token punctuation">,</span> RPCHandler_FSYS_t<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>RPCSERVICE_FSYS_DIR <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span></span></span>
SELF_DIRECTION <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>fsys_ser.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;statfs.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_amp.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>

<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">truncate</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>__file<span class="token punctuation">,</span> __off_t __length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">fstatfs</span> <span class="token punctuation">(</span><span class="token keyword">int</span> __fildes<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statfs</span> <span class="token operator">*</span>__buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ssize_t</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">ssize_t</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">off_t</span> <span class="token function">_lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_fstat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> pathSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">int</span> oldSize<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>new<span class="token punctuation">,</span> <span class="token keyword">int</span> newSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>new<span class="token punctuation">,</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>old<span class="token punctuation">,</span> oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">rename</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>old<span class="token punctuation">,</span> oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>new<span class="token punctuation">,</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> DIR <span class="token operator">*</span><span class="token function">_opendir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> pathSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DIR <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span><span class="token function">_readdir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>pdir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>pdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_closedir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>pdir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">closedir</span><span class="token punctuation">(</span>pdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">rmdir</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_access</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> amode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_truncate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">,</span> <span class="token class-name">off_t</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">truncate</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_statfs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> nameSize<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statfs</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">statfs</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_fstatfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statfs</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">fstatfs</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_fsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fsync</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

sunxi_amp_func_table fsys_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_open<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_close<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_read<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_write<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_lseek<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_fstat<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_stat<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_unlink<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_rename<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_opendir<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_readdir<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_closedir<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_mkdir<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_rmdir<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_access<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_truncate<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_statfs<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_fstatfs<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_fsync<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>fsys_stub.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;reent.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_amp.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MAYBE_STATIC</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;statfs.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">struct</span> <span class="token class-name">dirent</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> d_ino<span class="token punctuation">;</span>          <span class="token comment">/*!&lt; file number */</span>
    <span class="token class-name">uint8_t</span> d_type<span class="token punctuation">;</span>     <span class="token comment">/*!&lt; not defined in POSIX, but present in BSD and Linux */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DT_UNKNOWN</span>  <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DT_REG</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DT_DIR</span>      <span class="token expression"><span class="token number">2</span></span></span>
    <span class="token keyword">char</span> d_name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/*!&lt; zero-terminated file name */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> __uint64_t __fsblkcnt_t<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">statfs</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> f_type<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> f_bsize<span class="token punctuation">;</span>
    __fsblkcnt_t f_blocks<span class="token punctuation">;</span>
    __fsblkcnt_t f_bfree<span class="token punctuation">;</span>
    __fsblkcnt_t f_bavail<span class="token punctuation">;</span>
    __fsfilcnt_t f_files<span class="token punctuation">;</span>
    __fsfilcnt_t f_ffree<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> dd_vfs_idx<span class="token punctuation">;</span> <span class="token comment">/*!&lt; VFS index, not to be used by applications */</span>
    <span class="token class-name">uint16_t</span> dd_rsv<span class="token punctuation">;</span>     <span class="token comment">/*!&lt; field reserved for future extension */</span>
    <span class="token comment">/* remaining fields are defined by VFS implementation */</span>
<span class="token punctuation">}</span> DIR<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>


MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nameSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_name <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_name<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nameSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>flag<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">ssize_t</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">_read_r</span><span class="token punctuation">(</span>_REENT<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">_write_r</span><span class="token punctuation">(</span>_REENT<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>offset<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>whence<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>lseek<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MAYBE_STATIC</span></span>
MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">fstat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st_align <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st_align<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>st_align<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> st_align<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>fstat<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>st_align<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pathSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_path <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>st_align <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st_align<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>st_align<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_path<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pathSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> st_align<span class="token punctuation">;</span>

    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> st_align<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>st_align<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pathSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_path <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_path<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pathSize<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>unlink<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MAYBE_STATIC</span></span>
MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>new<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> newSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>new<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_old <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_old<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_new <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_new<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_old<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_new<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_new<span class="token punctuation">,</span> new<span class="token punctuation">,</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_old<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_old<span class="token punctuation">,</span> old<span class="token punctuation">,</span> oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_old<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>oldSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_new<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>newSize<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_old<span class="token punctuation">,</span> oldSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_new<span class="token punctuation">,</span> newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>rename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_old<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_new<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

MAYBE_STATIC DIR <span class="token operator">*</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DIR <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pathSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_path <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_path<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pathSize<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>opendir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span><span class="token function">readdir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>pdir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>ent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pdir<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pdir<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>readdir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ent<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">closedir</span><span class="token punctuation">(</span>DIR <span class="token operator">*</span>pdir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pdir<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pdir<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>closedir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MAYBE_STATIC</span></span>
MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nameSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_name <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_name<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nameSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>mode<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>mkdir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nameSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_name <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_name<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nameSize<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>rmdir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> amode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nameSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_name <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_name<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nameSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>amode<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>access<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">off_t</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nameSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_name <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_name<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nameSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_name<span class="token punctuation">,</span> nameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>truncate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">statfs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statfs</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pathSize <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_path <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_statfs <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_statfs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_statfs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>align_path<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>align_statfs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_path<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>pathSize<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_statfs<span class="token punctuation">;</span>

    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_path<span class="token punctuation">,</span> pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>statfs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_statfs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">fstatfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statfs</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>align_statfs <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>align_statfs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> align_statfs<span class="token punctuation">;</span>

    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>fstatfs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> align_statfs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">statfs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>align_statfs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MAYBE_STATIC <span class="token keyword">int</span> <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fd<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_FSYS</span><span class="token punctuation">(</span>fsync<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rpcli-跨核终端实现" tabindex="-1"><a class="header-anchor" href="#rpcli-跨核终端实现" aria-hidden="true">#</a> RPCLI 跨核终端实现</h3><p><strong>rpcconsole_stub.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_amp.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEND_TO_32BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEND_TO_64BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> argc<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> flag<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> argv_64<span class="token punctuation">[</span>SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> argv_32<span class="token punctuation">[</span>SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">union</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>argv_cmd<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> argv_cmd_data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_rpcconsole</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: rpccli [arm|dsp|rv] commandname [arg0 ...] \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;maximum number of arg:%d\\n&quot;</span><span class="token punctuation">,</span> SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span> <span class="token operator">*</span>rpc_arg <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpc_arg <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Alloc memory failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rpc_arg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>rpc_args_cmd <span class="token operator">=</span> <span class="token function">amp_align_malloc</span><span class="token punctuation">(</span>SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpc_args_cmd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Alloc memory failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">amp_align_free</span><span class="token punctuation">(</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rpc_args_cmd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpc_arg<span class="token operator">-&gt;</span>argv_cmd <span class="token operator">=</span> rpc_args_cmd<span class="token punctuation">;</span>
    rpc_arg<span class="token operator">-&gt;</span>argc <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rpc_arg<span class="token operator">-&gt;</span>argv_32<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_args_cmd<span class="token punctuation">;</span>
        rpc_arg<span class="token operator">-&gt;</span>argv_64<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_args_cmd<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>rpc_args_cmd<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rpc_args_cmd <span class="token operator">+=</span> <span class="token function">ALIGN_UP</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> rpc_arg<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;arm&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rpc_arg<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> SEND_TO_32BIT<span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_ARM_CONSOLE</span><span class="token punctuation">(</span>exe_cmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;dsp&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rpc_arg<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> SEND_TO_32BIT<span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_DSP_CONSOLE</span><span class="token punctuation">(</span>exe_cmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;rv&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rpc_arg<span class="token operator">-&gt;</span>flag <span class="token operator">=</span> SEND_TO_64BIT<span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">func_stub</span><span class="token punctuation">(</span><span class="token function">RPCCALL_RV_CONSOLE</span><span class="token punctuation">(</span>exe_cmd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">amp_align_free</span><span class="token punctuation">(</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_rpcconsole<span class="token punctuation">,</span> rpccli<span class="token punctuation">,</span> exe<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>rpcconsole_ser.c</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;barrier.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_amp.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEND_TO_32BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEND_TO_64BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> argc<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> flag<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> argv_64<span class="token punctuation">[</span>SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> argv_32<span class="token punctuation">[</span>SUNXI_AMP_SH_MAX_CMD_ARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">union</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>argv_cmd<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> argv_cmd_data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">_execute_cmd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpcconsole_arg_t</span> <span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>command_name<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">finsh_syscall</span> <span class="token operator">*</span>call<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_ARCH_DSP</span></span>
    <span class="token function">dsb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">isb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> SEND_TO_32BIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        command_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>argv_32<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        command_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>argv_64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    call <span class="token operator">=</span> <span class="token function">finsh_syscall_lookup</span><span class="token punctuation">(</span>command_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>call <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> call<span class="token operator">-&gt;</span>func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The command(%s) no exist !\\n&quot;</span><span class="token punctuation">,</span> command_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>flag <span class="token operator">==</span> SEND_TO_32BIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> call<span class="token operator">-&gt;</span><span class="token function">func</span><span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>argc<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_32<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> call<span class="token operator">-&gt;</span><span class="token function">func</span><span class="token punctuation">(</span>rpc_arg<span class="token operator">-&gt;</span>argc<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_64<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rpc_arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>rpc_arg<span class="token operator">-&gt;</span>argv_cmd<span class="token punctuation">,</span> SH_MAX_CMD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

sunxi_amp_func_table console_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_execute_cmd<span class="token punctuation">,</span> <span class="token punctuation">.</span>args_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>return_type <span class="token operator">=</span> RET_POINTER<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sunxi‐amp-注意事项" tabindex="-1"><a class="header-anchor" href="#sunxi‐amp-注意事项" aria-hidden="true">#</a> Sunxi‑AMP 注意事项</h2><ol><li>注意多核通信时的数据 <code>Buffer</code> 的起始地址和长度，起始地址要求按照系统中最大的 <code>CacheLine（64B）</code>对齐，长度要求数据 <code>Buffer</code> 独占 <code>CacheLine</code>，不允许和其他数据共享 <code>CacheLine</code>。</li><li>如果在远程调用过程中，需要将内存数据传递给另外的 CPU 处理器，在执行远程函数调用前需要调用 <code>hal_dcache_clean</code> 将调用核的 <code>CPU Dcache</code> 数据刷回内存介质，可以参考 <code>lichee/rtos‑components/aw/amp/service/flashc/flashc_stub.c</code> 中的 <code>nor_write</code> 函数；如果需要从另外的处理器获取数据，在执行远程函数调用后，需要执行 <code>hal_dcache_invalidate</code> 将本地 <code>CPU Dcache</code>无效掉，以避免获取旧的历史数据，可以参考<code>lichee/rtos‑components/aw/amp/service/flashc/flashc_stub.c</code> 中的 <code>nor_read</code> 函数。</li><li>注意 <code>Cache</code> 的 <code>Dirty</code> 位。桩子函数 (<code>stub</code> 端) 需要先将传给服务函数 (<code>service</code> 端) 的 <code>buffer</code> 所对应的 <code>cacheline</code> 无效，重点在于清除 <code>dirty</code> 位，否则在 <code>cachelien</code> 颠簸换出的过程中，可能会导致运行桩子函数所在核将 <code>buffer</code> 对应的脏 <code>cacheline</code> 换出并回写，覆盖另外一个核刚写的数据。服务函数 (<code>service</code> 端) 需要将不再使用的 <code>buffer</code> 对应的 <code>cacheline</code> 无效掉或者刷回内存，重点在于清除 <code>dirty</code> 位，以预防在 <code>cahcline</code> 颠簸换出的过程中将 <code>buffer</code> 对应的脏 <code>cacheline</code> 中的数据回写，此时极有可能篡改另外一个核的数据。</li></ol><p>举例分析：在 <code>lichee/rtos‑components/aw/amp/service/flashc/flashc_stub.c</code> 中的 <code>nor_read</code> 函数中，核在调用 <code>func_stub(RPCCALL_FLASHC(nor_read), 1, ARRAY_SIZE(args), args);</code>之前，需要先调用 <code>hal_dcache_clean_invalidate((unsigned long)buffer, size);</code>接口清除 <code>buffer</code> 对应<code>cacheline</code> 的 <code>dirty</code> 位，否则在程序运行中，可能会导致 M33 核的服务函数刚将数据刷回内存，C906 核又因为 <code>cacheline</code> 的换出把 <code>buffer</code> 的数据给修改了。同理，在 <code>lichee/rtos‑components/aw/amp/service/flashc/flashc_ser.c</code> 的 <code>_nor_write</code> 函数中，M33 核在调用完 <code>nor_write</code> 之后，需要再一次调用 <code>hal_dcache_invalidate((unsigned long)buf, size);</code>，因为 <code>nor_write</code> 中可能存在修改 <code>buffer</code> 数据的可能性，这样的话 <code>buffer</code> 对应的 <code>cacheline</code> 在 M33核上就是脏的，在 M33 核运行的过程中，极有可能会将脏数据写入内存。而此时，<code>buffer</code> 在C906 上可能已被申请释放挪为他用，M33 核将脏数据写回内存就直接篡改了 C906 上运行的正常数据。</p><ol><li>当前支持的最大参数个数为 8 个。</li><li>64bit 数据在传输过程中一律被截断为 32bit 数据。</li><li>不可在中断函数中使用远程调用。</li><li>在 <code>sunxi_amp.h</code> 中添加 <code>#define AMP_DEBUG</code>，则会在关键节点中使能组件的调试信息输出，用于分析远程函数调用错误等问题。</li><li>在多个核之间传递同一个结构体时，该结构内部尽量不要使用指针类型，主要的原因在于因三个核位宽不一致，对指针类型的长度理解存在差异，那么就会导致结构体内的数据布局存在差异。当两个不同位宽的 CPU 通过同一个结构体指针指向的地址取值时，就会导致取值错误。如以下例子：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">test_t</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> offset<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">test_t</span> a<span class="token punctuation">;</span>
ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>                <span class="token comment">// ptr 为指向 struct test_t 结构体的指针，假设其地址为 0x4000000;</span>

<span class="token keyword">int</span> offset <span class="token operator">=</span> ptr‑<span class="token operator">&gt;</span>offset <span class="token comment">// 在 32bit 系统会去访问 0x4000004;</span>
<span class="token keyword">int</span> offset <span class="token operator">=</span> ptr‑<span class="token operator">&gt;</span>offset <span class="token comment">// 在 64bit 系统会去访问 0x4000008;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rpdata-核间通讯" tabindex="-1"><a class="header-anchor" href="#rpdata-核间通讯" aria-hidden="true">#</a> RPDATA 核间通讯</h2><p>为了不同核之间的通信交互，基于硬件 msgbox 功能，软件上提供了 AMP 通信机制，而在该机制上我们提供了 rpdata 接口，让用户可以较容易实现核间通信。</p><h3 id="rpdata-接口介绍" tabindex="-1"><a class="header-anchor" href="#rpdata-接口介绍" aria-hidden="true">#</a> rpdata 接口介绍</h3><h4 id="创建-rpdata" tabindex="-1"><a class="header-anchor" href="#创建-rpdata" aria-hidden="true">#</a> 创建 rpdata</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rpdata_t</span> <span class="token operator">*</span><span class="token function">rpdata_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> buf_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dir: 指定远端核。 1:M33; 2:RV; 3:DSP</li><li>type: 类型，传输数据类型，字符串可自定义,类型和名称一起构成唯一标识</li><li>name: 名称，传输数据名称，字符串可自定义,类型和名称一起构成唯一标识</li><li>buf_len: buffer大小，该buffer用于临时保存跨核传输数据</li></ul><p>返回值：</p><ul><li>成功则返回rpdata句柄，失败返回NULL。</li></ul><blockquote><p>type 和 name 用于标识唯一的传输通道, 可自行设定，长度不超过 16 个字节即可。可以通过 rpd ‑l 命令查看当前已经申请的 rpdata 以及对应的状态。rpdata_create 函数不会阻塞。在创建的时候，可以直接调用。</p></blockquote><h4 id="连接-rpdata" tabindex="-1"><a class="header-anchor" href="#连接-rpdata" aria-hidden="true">#</a> 连接 rpdata</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rpdata_t</span> <span class="token operator">*</span><span class="token function">rpdata_connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dir: 指定远端核。 1:M33; 2:RV; 3:DSP</li><li>type: 类型，传输数据类型，字符串可自定义,类型和名称一起构成唯一标识</li><li>name: 名称，传输数据名称，字符串可自定义,类型和名称一起构成唯一标识</li></ul><p>返回值：</p><ul><li>成功则返回rpdata句柄，失败返回NULL。</li></ul><blockquote><p>rpdata_create 和 rpdata_connect 作用是类似的，但是前者会创建用于传输数据的 buffer，后者不会。因此两核之间通信，必须分别使用这两个接口，而不能共同使用 rpdata_create 或者 rpdata_connect。rpdata_connect 函数会阻塞。如果远核没有调用 rpdata_create，那么就会一直阻塞线程。注意使用 rpdata_connect，如果 需要等待远端线程，请确认该线程是否可以阻塞，不行的话，需要使用线程单独等待。</p></blockquote><h4 id="得到-buffer-的值" tabindex="-1"><a class="header-anchor" href="#得到-buffer-的值" aria-hidden="true">#</a> 得到 buffer 的值</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li></ul><p>返回值：</p><ul><li>buff的值</li></ul><blockquote><p>该 buffer 地址可用于保存要传输交互的数据</p></blockquote><h4 id="判断-rpdata-是否为连接状态" tabindex="-1"><a class="header-anchor" href="#判断-rpdata-是否为连接状态" aria-hidden="true">#</a> 判断 rpdata 是否为连接状态</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_is_connect</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li></ul><p>返回值：</p><ul><li>返回0表示为连接状态，非0表示非连接状态</li></ul><h4 id="等待-rpdata-变成连接状态" tabindex="-1"><a class="header-anchor" href="#等待-rpdata-变成连接状态" aria-hidden="true">#</a> 等待 rpdata 变成连接状态</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><blockquote><p>需要判断等待 rpdata 为连接状态后，才可以开始数据传输。</p></blockquote><h4 id="跨核数据处理" tabindex="-1"><a class="header-anchor" href="#跨核数据处理" aria-hidden="true">#</a> 跨核数据处理</h4><p>用于发送数据到远端核，并且远端核把处理后数据填充到 buffer</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_process</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li><li>offset: 相对于buffer的偏移</li><li>data_len: 数据量,字节</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><blockquote><p>处理后的结果会存于 buffer 中，即 rpdata_buffer_addr 得到的地址。</p></blockquote><h4 id="跨核数据发送" tabindex="-1"><a class="header-anchor" href="#跨核数据发送" aria-hidden="true">#</a> 跨核数据发送</h4><p>仅用于发送数据到远端核</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li><li>offset: 相对于buffer的偏移</li><li>data_len: 数据量,字节</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><blockquote><p>rpdata_send 只是把 buffer 中数据发送到远端核，而 rpdata_process 会得到处理后数据</p></blockquote><h4 id="接受跨核传输的数据" tabindex="-1"><a class="header-anchor" href="#接受跨核传输的数据" aria-hidden="true">#</a> 接受跨核传输的数据</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_recv</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>offset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>data_len<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout_ms<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li><li>offset: 得到相对于buffer的偏移</li><li>data_len: 得到数据量,字节</li><li>timeout_ms: 等待超时时间</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><blockquote><p>使用该接口，需要增加 ringbuffer 模式，否则有可能会出现数据覆盖的现象。</p></blockquote><h4 id="设置数据接受回调" tabindex="-1"><a class="header-anchor" href="#设置数据接受回调" aria-hidden="true">#</a> 设置数据接受回调</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_set_recv_cb</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rpdata_cbs</span> <span class="token operator">*</span>cbs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li><li>cbs: 回到函数集，当前仅支持recv_cb，即接受回调</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><h4 id="数据接受回调函数" tabindex="-1"><a class="header-anchor" href="#数据接受回调函数" aria-hidden="true">#</a> 数据接受回调函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token class-name">recv_cb_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> rpd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意在该回调用把数据处理好，或者拷贝出来，否则有可能会被下次数据传输覆盖</p></blockquote><h4 id="销毁-rpdata" tabindex="-1"><a class="header-anchor" href="#销毁-rpdata" aria-hidden="true">#</a> 销毁 rpdata</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>rpd: rpdata句柄</li></ul><p>返回值：</p><ul><li>成功则返回0，失败返回非0。</li></ul><blockquote><p>只有两核都调用 rpdata_destroy 才会真正的销毁，但对调用顺序不做要求。</p></blockquote><h3 id="rpdata-使用流程" tabindex="-1"><a class="header-anchor" href="#rpdata-使用流程" aria-hidden="true">#</a> rpdata 使用流程</h3><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span> 
M33<span class="token arrow operator">-&gt;&gt;</span>+M33<span class="token operator">:</span> rpdata_create
M33<span class="token arrow operator">-&gt;&gt;</span>-RV<span class="token operator">:</span> notify  
RV<span class="token arrow operator">-&gt;&gt;</span>+RV<span class="token operator">:</span> rpdata_create
RV<span class="token arrow operator">-&gt;&gt;</span>-M33<span class="token operator">:</span> ack
RV<span class="token arrow operator">-&gt;&gt;</span>RV<span class="token operator">:</span> rpdata_set_recv_cb
<span class="token keyword">loop</span> 多次发送
<span class="token keyword">Note left of</span> M33<span class="token operator">:</span> rpdata_send
M33<span class="token arrow operator">-&gt;&gt;</span>RV<span class="token operator">:</span> send data
<span class="token keyword">Note right of</span> RV<span class="token operator">:</span> 触发 callback
<span class="token keyword">end</span> 
RV<span class="token arrow operator">-&gt;&gt;</span>M33<span class="token operator">:</span> notify
RV<span class="token arrow operator">-&gt;&gt;</span>RV<span class="token operator">:</span> rpdata_destory
M33<span class="token arrow operator">-&gt;&gt;</span>RV<span class="token operator">:</span> wait destory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>rpdata_create 和 rpdate_connect 的调用顺序不做要求，谁先执行都可以；但是 rpdata_data 是会创建用于数据交互的 buffer</li><li>接受数据端可以选择使用 rpdata_set_recv_cb 设置回调来处理数据，或者调用 rpdata_recv 阻塞等待接受互数据。</li><li>两个核的 rpdata_destroy 调用顺序也是不做要求的。</li></ol><h3 id="rpdata-示例" tabindex="-1"><a class="header-anchor" href="#rpdata-示例" aria-hidden="true">#</a> rpdata 示例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FreeRTOS.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;task.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;rpdata.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_thread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;md5.h&gt;</span></span>

<span class="token comment">//#define RECV_CALLBACK_TEST</span>

<span class="token comment">/* print md5 check result */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_rpd_verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configAPPLICATION_RPDATA_DEMO_PRIORITY</span>  <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span>configMAX_PRIORITIES <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">?</span> configMAX_PRIORITIES <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">:</span> configMAX_PRIORITIES <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_demo_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usgae: rpdata_demo [option]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-h,          rpdata help\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-m,          mode, 0-send; 1-recv; 2-recv+send\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-t,          type, type name\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-n,          name, id name\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             (type + name) specify unique data xfer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-c,          string, send string\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-i,          single test, do send or recv test once\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-d,          dir, remote processor, 1-cm33;2-c906;3-dsp\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-s,          src dir, valid in mode 2\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV -&gt; DSP\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 0 -d 3 -t RVtoDSP -n RVsendDSPrecv\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli dsp rpdata_demo -m 1 -d 2 -t RVtoDSP -n RVsendDSPrecv\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV -&gt; M33\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 0 -d 1 -t RVtoM33 -n RVsendM33recv\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli arm rpdata_demo -m 1 -d 2 -t RVtoM33 -n RVsendM33recv\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV &lt;- M33\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 1 -d 1 -t M33toRV -n RVrecvM33send\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli arm rpdata_demo -m 0 -d 2 -t M33toRV -n RVrecvM33send\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV -&gt; DSP -&gt; M33\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli dsp rpdata_demo -d 2 -t RVtoDSP -n DSPrecvRVsend -s 1 -t DSPtoM33 -n M33recvDSPsend\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli arm rpdata_demo -m 1 -d 3 -t DSPtoM33 -n M33recvDSPsend\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 0 -d 3 -t RVtoDSP -n DSPrecvRVsend\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV -&gt; DSP -&gt; M33 -&gt; DSP -&gt; RV\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli dsp rpdata_demo -d 2 -t RD -n rs -s 1 -t DM -n ds\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli arm rpdata_demo -d 3 -t DM -n ds -s 3 -t MD -n ms\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli dsp rpdata_demo -d 1 -t MD -n ms -s 2 -t DR -n ds\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 1 -d 3 -t DR -n ds\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -m 0 -d 3 -t RD -n rs\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RV-&gt;M33-&gt;RV process(M33 do aec process: input mic+ref, and output aec data to RV)\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpccli arm rpdata_demo -p -m 1 -d 2 -t ALGO -n AEC\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_demo -p -m 0 -d 1 -t ALGO -n AEC\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> type<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> dir<span class="token punctuation">;</span>
    <span class="token keyword">char</span> stype<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> sname<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sdir<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_rpdata_send_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> <span class="token operator">*</span>targ<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Cteate %s:%s.\\n&quot;</span><span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rpd <span class="token operator">=</span> <span class="token function">rpdata_create</span><span class="token punctuation">(</span>targ<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    buffer <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_rpdata_recv_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> <span class="token operator">*</span>targ<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>rx_buf<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    rx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rx_buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d alloc rx buffer fialed.\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;connect to %s:%s.\\n&quot;</span><span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rpd <span class="token operator">=</span> <span class="token function">rpdata_connect</span><span class="token punctuation">(</span>targ<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> targ<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">rpdata_recv</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata recv timeout \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        rx_buf<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s, len:%d\\n&quot;</span><span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token string">&quot;quit&quot;</span><span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span>
        <span class="token function">hal_free</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">data_fill</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> data_len <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">md5</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span>  buffer <span class="token operator">+</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">data_check</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> res<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> data_len <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token function">md5</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> data_len<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_auto_send</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ<span class="token punctuation">;</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>


    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpd <span class="token operator">=</span> <span class="token function">rpdata_create</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    buffer <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">data_fill</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">hal_msleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata auto send test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_demo_recv_cb</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check md5 failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_rpd_verbose<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">++</span> <span class="token operator">%</span> g_rpd_verbose <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check md5 ok(print interval %d)\\n&quot;</span><span class="token punctuation">,</span> g_rpd_verbose<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">rpdata_cbs</span> rpd_demo_cbs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>recv_cb <span class="token operator">=</span> rpd_demo_recv_cb<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_demo_process_cb</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>mic_data<span class="token punctuation">,</span> <span class="token operator">*</span>ref_data<span class="token punctuation">,</span> <span class="token operator">*</span>aec_data<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> mic_offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> ref_offset <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">640</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> aec_offset <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">640</span> <span class="token operator">+</span> <span class="token number">320</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> total_len <span class="token operator">=</span> <span class="token number">1408</span><span class="token punctuation">;</span>

    <span class="token comment">/* aec process
     * input:
     * params:
     * simulator: 128bytes
     * mic data: 2ch+16K+16bit, 10ms, 160*4=640
     * ref data: 1ch+16K+16bit, 10ms, 160*2=320
     * outout:
     * aec data: 1ch+16K+16bit, 10ms, 160*2=320
     *
     * total= 128 + 640 + 320 + 320 = 1408
     * 1408 is cacheline lenght
     */</span>

    mic_data <span class="token operator">=</span> buffer <span class="token operator">+</span> mic_offset<span class="token punctuation">;</span>
    ref_data <span class="token operator">=</span> buffer <span class="token operator">+</span> ref_offset<span class="token punctuation">;</span>
    aec_data <span class="token operator">=</span> buffer <span class="token operator">+</span> aec_offset<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data_len <span class="token operator">!=</span> total_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;expected len:%d but:%d\\n&quot;</span><span class="token punctuation">,</span> total_len<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>mic_data<span class="token punctuation">,</span> ref_data <span class="token operator">-</span> mic_data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check mic data md5 failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>ref_data<span class="token punctuation">,</span> aec_data <span class="token operator">-</span> ref_data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check ref data md5 failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">data_fill</span><span class="token punctuation">(</span>aec_data<span class="token punctuation">,</span> total_len <span class="token operator">-</span> aec_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">rpdata_cbs</span> rpd_demo_process_cbs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>recv_cb <span class="token operator">=</span> rpd_demo_process_cb<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_demo_recv_and_send_cb</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd_send <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d check md5 failed\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rpd_send <span class="token operator">=</span> <span class="token function">rpdata_get_private_data</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd_send<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    buffer <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_send failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">rpdata_cbs</span> rpd_demo_rs_cbs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>recv_cb <span class="token operator">=</span> rpd_demo_recv_and_send_cb<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_auto_recv</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ<span class="token punctuation">;</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpd <span class="token operator">=</span> <span class="token function">rpdata_connect</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    len <span class="token operator">=</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    rx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rx_buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_cb</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpd_demo_cbs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_msleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">rpdata_recv</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata recv timeout \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check md5 failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span>
        <span class="token function">hal_free</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata auto recv test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_auto_recv_and_send</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ<span class="token punctuation">;</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd_recv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>rpd_send <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf_recv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>buf_send <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;send dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>sdir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>stype<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>sname<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpd_send <span class="token operator">=</span> <span class="token function">rpdata_create</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>sdir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>stype<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>sname<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd_send<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    buf_send <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf_send<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    rpd_recv <span class="token operator">=</span> <span class="token function">rpdata_connect</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd_recv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    buf_recv <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf_recv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_private_data</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">,</span> rpd_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpdata_set_recv_cb</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpd_demo_rs_cbs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_msleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">rpdata_recv</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">,</span> buf_recv<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata recv timeout \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>buf_recv<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;check md5 failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>buf_send<span class="token punctuation">,</span> buf_recv<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata send failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf_recv<span class="token punctuation">)</span>
        <span class="token function">hal_free</span><span class="token punctuation">(</span>buf_recv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd_send<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd_recv<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd_recv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata auto recv_and_send test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_process_send</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ<span class="token punctuation">;</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token operator">*</span>mic_data<span class="token punctuation">,</span> <span class="token operator">*</span>ref_data<span class="token punctuation">,</span> <span class="token operator">*</span>aec_data<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> params_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> mic_offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> ref_offset <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">640</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> aec_offset <span class="token operator">=</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">640</span> <span class="token operator">+</span> <span class="token number">320</span><span class="token punctuation">;</span>

    <span class="token comment">/* aec process
     * input:
     * params:
     * simulator: 128bytes
     * mic data: 2ch+16K+16bit, 10ms, 160*4=640
     * ref data: 1ch+16K+16bit, 10ms, 160*2=320
     * outout:
     * aec data: 1ch+16K+16bit, 10ms, 160*2=320
     *
     * total= 128 + 640 + 320 + 320 = 1408
     * 1408 is cacheline lenght
     * */</span>
    len <span class="token operator">=</span> <span class="token number">1408</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpd <span class="token operator">=</span> <span class="token function">rpdata_connect</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    buffer <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    params <span class="token operator">=</span> buffer <span class="token operator">+</span> params_offset<span class="token punctuation">;</span>
    mic_data <span class="token operator">=</span> buffer <span class="token operator">+</span> mic_offset<span class="token punctuation">;</span>
    ref_data <span class="token operator">=</span> buffer <span class="token operator">+</span> ref_offset<span class="token punctuation">;</span>
    aec_data <span class="token operator">=</span> buffer <span class="token operator">+</span> aec_offset<span class="token punctuation">;</span>

    <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">data_fill</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> mic_offset <span class="token operator">-</span> params_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">data_fill</span><span class="token punctuation">(</span>mic_data<span class="token punctuation">,</span> ref_offset <span class="token operator">-</span> mic_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">data_fill</span><span class="token punctuation">(</span>ref_data<span class="token punctuation">,</span> aec_offset <span class="token operator">-</span> ref_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>aec_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> aec_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">rpdata_process</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">data_check</span><span class="token punctuation">(</span>aec_data<span class="token punctuation">,</span> len <span class="token operator">-</span> aec_offset<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aec data check failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aec data check ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpdata_process_recv</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ<span class="token punctuation">;</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>rx_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    <span class="token comment">/* aec process
     * input:
     * params:
     * simulator: 128bytes
     * mic data: 2ch+16K+16bit, 10ms, 160*4=640
     * ref data: 1ch+16K+16bit, 10ms, 160*2=320
     * outout:
     * aec data: 1ch+16K+16bit, 10ms, 160*2=320
     *
     * total= 128 + 640 + 320 + 320 = 1408
     * 1408 is cacheline lenght
     * */</span>
    len <span class="token operator">=</span> <span class="token number">1408</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span>
        targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rpd <span class="token operator">=</span> <span class="token function">rpdata_create</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> targ<span class="token punctuation">.</span>name<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    <span class="token function">rpdata_set_recv_ringbuffer</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">RECV_CALLBACK_TEST</span></span>
    rx_buf <span class="token operator">=</span> <span class="token function">hal_malloc</span><span class="token punctuation">(</span><span class="token function">rpdata_buffer_len</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rx_buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">rpdata_recv</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] : Timeout!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">rpd_demo_process_cb</span><span class="token punctuation">(</span>rpd<span class="token punctuation">,</span> rx_buf<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token function">rpdata_set_recv_cb</span><span class="token punctuation">(</span>rpd <span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpd_demo_process_cbs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
exit<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span>
        <span class="token function">hal_free</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rpd<span class="token punctuation">)</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata recv process finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_rpdata_process_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> <span class="token operator">*</span>targ<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_thread_t</span> handle<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>rpdata_process_send<span class="token punctuation">,</span> targ<span class="token punctuation">,</span>
                <span class="token string">&quot;rpd_send_process&quot;</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>rpdata_process_recv<span class="token punctuation">,</span> targ<span class="token punctuation">,</span>
                <span class="token string">&quot;rpd_recv_process&quot;</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_rpdata_auto_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> <span class="token operator">*</span>targ<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_thread_t</span> handle<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>rpdata_auto_send<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> <span class="token string">&quot;rpd_send_test&quot;</span><span class="token punctuation">,</span>
                <span class="token number">512</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>rpdata_auto_recv<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> <span class="token string">&quot;rpd_recv_test&quot;</span><span class="token punctuation">,</span>
                <span class="token number">512</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
        handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>rpdata_auto_recv_and_send<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> <span class="token string">&quot;rpd_rs_test&quot;</span><span class="token punctuation">,</span>
                <span class="token number">512</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">check_dir</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> RPDATA_DIR_CM33<span class="token operator">:</span>
    <span class="token keyword">case</span> RPDATA_DIR_RV<span class="token operator">:</span>
    <span class="token keyword">case</span> RPDATA_DIR_DSP<span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_rpdata_demo</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> c<span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> single_test <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> process_test <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> get_sdir_arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* string/data must be cache_line align */</span>
    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;rpdata test string&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">rpdata_arg_test</span> targ <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;RVtoDSP&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;DSPrecvRVsend&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>dir  <span class="token operator">=</span> RPDATA_DIR_DSP<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>stype <span class="token operator">=</span> <span class="token string">&quot;DSPtoM33&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sname <span class="token operator">=</span> <span class="token string">&quot;M33recvDSPsend&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sdir  <span class="token operator">=</span> RPDATA_DIR_CM33<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    optind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">&quot;hm:t:n:c:s:d:iv:p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;m&#39;</span><span class="token operator">:</span>
            mode <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_sdir_arg<span class="token punctuation">)</span>
                <span class="token function">strncpy</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>type<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token function">strncpy</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>stype<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>stype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;n&#39;</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_sdir_arg<span class="token punctuation">)</span>
                <span class="token function">strncpy</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>name<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token function">strncpy</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>sname<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>sname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;c&#39;</span><span class="token operator">:</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
            targ<span class="token punctuation">.</span>sdir <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            get_sdir_arg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
            targ<span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            get_sdir_arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;i&#39;</span><span class="token operator">:</span>
            single_test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;v&#39;</span><span class="token operator">:</span>
            g_rpd_verbose <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span>
            process_test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;h&#39;</span><span class="token operator">:</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">goto</span> usage<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> usage<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_dir</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>dir<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">check_dir</span><span class="token punctuation">(</span>targ<span class="token punctuation">.</span>sdir<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> usage<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>process_test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">do_rpdata_process_test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>single_test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">do_rpdata_auto_test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">do_rpdata_send_test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">do_rpdata_recv_test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>targ<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
usage<span class="token operator">:</span>
    <span class="token function">rpdata_demo_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_rpdata_demo<span class="token punctuation">,</span> rpdata_demo<span class="token punctuation">,</span> rpdata test demo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试例子：</p><ul><li>rv/dsp之间的收发</li></ul><p>rv接受，dsp发送</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpdata_demo ‑m 1 ‑d 3 ‑t DSPtoRV ‑n RVrecvDSPsend
rpccli dsp rpdata_demo ‑m 0 ‑d 2 ‑t DSPtoRV ‑n RVrecvDSPsend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>rv发送，dsp接受</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpdata_demo ‑m 0 ‑d 3 ‑t RVtoDSP ‑n RVsendDSPrecv
rpccli dsp rpdata_demo ‑m 1 ‑d 2 ‑t RVtoDSP ‑n RVsendDSPrecv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>rv/m33之间收发</li></ul><p>rv接受，m33发送</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpdata_demo ‑m 1 ‑d 1 ‑t M33toRV ‑n RVrecvM33send
rpccli arm rpdata_demo ‑m 0 ‑d 2 ‑t M33toRV ‑n RVrecvM33send
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>rv发送，m33接受</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpdata_demo ‑m 0 ‑d 1 ‑t RVtoM33 ‑n RVsendM33recv
rpccli arm rpdata_demo ‑m 1 ‑d 2 ‑t RVtoM33 ‑n RVsendM33recv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>m33/dsp之间收发</li></ul><p>m33接受，dsp发送</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpccli arm rpdata_demo ‑m 1 ‑d 3 ‑t DSPtoM33 ‑n M33recvDSPsend
rpccli dsp rpdata_demo ‑m 0 ‑d 1 ‑t DSPtoM33 ‑n M33recvDSPsend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>dsp接受，m33发送</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpccli dsp rpdata_demo ‑m 1 ‑d 1 ‑t M33toDSP ‑n DSPrecvM33send
rpccli arm rpdata_demo ‑m 0 ‑d 3 ‑t M33toDSP ‑n DSPrecvM33send
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，提供了 rpd 命令用于查看 rpdata 的运行情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>c906&gt;rpd ‑l
‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑
RPdata RV &lt;‑‑&gt; CM33
id type+name state
‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑
RPdata RV &lt;‑‑&gt; DSP
id type+name state
0x01 DSPtoRV
0x01 └─── RVrecvDSPsend CNXN


c906&gt;rpccli dsp rpd ‑l
‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑
RPdata DSP &lt;‑‑&gt; CM33
id type+name state
‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑
RPdata DSP &lt;‑‑&gt; RV
id type+name state
0x01 DSPtoRV
0x01 └─── RVrecvDSPsend CNXN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,242),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","chapter11.html.vue"]]);export{k as default};
