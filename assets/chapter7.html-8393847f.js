import{_ as p,r as e,o,c,a as n,b as s,d as i,e as a}from"./app-e85d5a28.js";const l={},u=a(`<h1 id="图像采集" tabindex="-1"><a class="header-anchor" href="#图像采集" aria-hidden="true">#</a> 图像采集</h1><h2 id="csi-dvp-图像采集" tabindex="-1"><a class="header-anchor" href="#csi-dvp-图像采集" aria-hidden="true">#</a> CSI（DVP） 图像采集</h2><h3 id="sensor-csi-通路" tabindex="-1"><a class="header-anchor" href="#sensor-csi-通路" aria-hidden="true">#</a> SENSOR -&gt; CSI 通路</h3><p>CSI （CMOS sensor interface）接口时序上可支持独立 SYNC 和嵌入 SYNC(CCIR656)。支持接收 YUV422 或 YUV420 数据。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter7/image1.png" alt=""></p><p>VSYNC 和HSYNC 的有效电平可以是正极性，也可以是负极性。在配置时，需要保证摄像头和 CSI 内部配置保持一致。</p><p>最常见的 YUV422 格式输入后，内部只能处理成 YUV420 格式，并输出到 memory 存以 NV12布局形式。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter7/image2.png" alt=""></p><h3 id="csi-jpeg-通路" tabindex="-1"><a class="header-anchor" href="#csi-jpeg-通路" aria-hidden="true">#</a> CSI -&gt; JPEG 通路</h3><h4 id="编码格式" tabindex="-1"><a class="header-anchor" href="#编码格式" aria-hidden="true">#</a> 编码格式</h4><p>JPEG 模块只支持 YUV420 格式的编码，因此 CSI 捕获的数据输出给 JPEG 模块编码的图像格式必须是 YUV420。若 CSI 输入 JPEG 模块是 JPEG 码流，JPEG 模块也能正常将其输出。</p><h4 id="编码模式" tabindex="-1"><a class="header-anchor" href="#编码模式" aria-hidden="true">#</a> 编码模式</h4><p>JPEG 模块支持 online 及 offline 模式编码。</p><ul><li>online 模式即在线模式，CSI 每接收到 16 行数据就自动进行 JPEG 编码，当前帧图像接收完，编码也随即完成。该模式 CSI 不会将接收的原始图像数据保存起来，只输出 JPEG 编码后的数据。编码数据输出的方式又有：整帧模式和分块模式。</li><li>offline 模式即离线模式，CSI 接收到的数据会先存到内存中，待一帧完整数据全部存储完成后，由软件启动 JPEG 编码。所以此时 JPEG 不是实时处理，可以对任何已经保存好的 YUV420 图像数据进行编码。</li></ul><h5 id="online-模式" tabindex="-1"><a class="header-anchor" href="#online-模式" aria-hidden="true">#</a> ONLINE 模式</h5><p>Online 模式的通路框图如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter7/image3.png" alt=""></p><p>Sensor(摄像头) 输出 YUV422 格式数据到 CSI，CSI 接收到 YUV422 后处理成 YUV420 格式，每接收到 16 行数据后，硬件会自动启动 JPEG encoder 进行一次编码操作，编码输出的码流通过总线直接写到设定好的内存中，故可认为 Online 模式下图像的接收和编码是同时进行的。在一帧数据接收完并编码结束后，JPEG encoder 会产生 ve finish(编码完成) 中断。因此，对图像分辨率的要求是行列数为 16 的整数倍，支持的最小分辨率为 32*32。</p><p>Online 分块模式与整帧模式的区别在于，分块模式可以在 JPEG 编码输出数据量达到设定值 (例如 2KB/4KB) 后产生中断，并且可以在一帧编码过程中循环使用编码输出空间，例如只分配 8KB的编码输出空间，而一帧图像编码数据有 20KB，则在第一次写满 8KB 后，JPEG 将会从这 8KB的首地址开始存储，循环使用，故需要软件配合将之前的数据读走，否则之前的数据会被覆盖。</p><h5 id="offline-模式" tabindex="-1"><a class="header-anchor" href="#offline-模式" aria-hidden="true">#</a> OFFLINE 模式</h5><p>Offline 模式的通路框图如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter7/image4.png" alt=""></p><p>Offline 模式下，CSI 会将 YUV420 的原始图像数据存储到 YUV memory 中，存放格式为NV12。一帧图像全部存完后，产生写回中断 (wb finish)，然后由软件启动 JPEG 开始编码， JPEG 编码器会读取 YUV memory 中的原始数据送给 Encoder 进行编码，编码后的数据写到JPEG memory 中。</p><h3 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h3><h4 id="menuconfig-配置说明" tabindex="-1"><a class="header-anchor" href="#menuconfig-配置说明" aria-hidden="true">#</a> menuconfig 配置说明</h4><p>其 menuconfig 的配置如下（以选择GC0308 摄像头为例）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        CSI Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi driver
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi camera driver
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> csi camera choice <span class="token operator">--</span><span class="token operator">-&gt;</span>
                <span class="token operator">--</span><span class="token operator">-</span> csi camera choice
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> csi camera GC0308
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable jpeg encoder
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi demo test command  <span class="token comment">// csi_jpeg模块测试用例Copy to clipboardErrorCopied</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="板级配置说明" tabindex="-1"><a class="header-anchor" href="#板级配置说明" aria-hidden="true">#</a> 板级配置说明</h4><p>请根据硬件原理图，进行CSI 模块引脚配置。具体配置举例如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment">;‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑</span>
<span class="token comment">;vip (video input port) configuration</span>
<span class="token comment">;vip_used: 0:disable 1:enable</span>
<span class="token comment">;‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">csi0</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">vip_used</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>
<span class="token key attr-name">vip_csi_hsync</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA18&lt;7&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_vsync</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA19&lt;7&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_pck</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA20&lt;7&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_mck</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA21&lt;7&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d0</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA22&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d1</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA23&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d2</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA27&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d3</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA26&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d4</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA29&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d5</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA25&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d6</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA24&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_csi_d7</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA28&lt;8&gt;&lt;0&gt;&lt;3&gt;&lt;default&gt;</span>
<span class="token key attr-name">vip_dev0_twi_id</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>
<span class="token key attr-name">vip_dev0_reset</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA10&lt;1&gt;&lt;0&gt;&lt;3&gt;&lt;0&gt;</span>
<span class="token key attr-name">vip_dev0_pwdn</span> <span class="token punctuation">=</span> <span class="token value attr-value">port:PA11&lt;1&gt;&lt;0&gt;&lt;3&gt;&lt;0&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h3><p>驱动位于 <code>rtos-hal/hal/source/drivers/hal/source/csi</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>csi<span class="token operator">/</span>
├── csi_camera<span class="token operator">/</span>         <span class="token punctuation">;</span>csi driver
│   ├── csi<span class="token punctuation">.</span>c
│   ├── csi<span class="token punctuation">.</span>h
│   ├── csi_reg<span class="token operator">/</span>
│   │   ├── csi_reg<span class="token punctuation">.</span>c
│   │   └── csi_reg<span class="token punctuation">.</span>h
│   └── sensor<span class="token operator">/</span>         <span class="token punctuation">;</span>cmos sensor driver
│   ├── drv_gc0308<span class="token punctuation">.</span>c
│   ├── sensor_helper<span class="token punctuation">.</span>c
│   └── sensor_helper<span class="token punctuation">.</span>h
├── hal_csi_jpeg<span class="token punctuation">.</span>c      <span class="token punctuation">;</span>csi_jpeg模块驱动实现主体
├── jpeg<span class="token operator">/</span>               <span class="token punctuation">;</span>jpeg driver
│   ├── hal_jpeg<span class="token punctuation">.</span>c
│   ├── hal_jpeg<span class="token punctuation">.</span>h
│   ├── jpegenc<span class="token punctuation">.</span>c
│   ├── jpegenc<span class="token punctuation">.</span>h
│   ├── jpeglib<span class="token punctuation">.</span>c
│   ├── jpeglib<span class="token punctuation">.</span>h
│   ├── jpeg_marker<span class="token punctuation">.</span>h
│   └── jpeg_reg<span class="token operator">/</span>
│   ├── jpeg_reg<span class="token punctuation">.</span>c
│   └── jpeg_reg<span class="token punctuation">.</span>h
└── utility
    ├── cj_board_cfg<span class="token punctuation">.</span>h
    ├── cj_platform_cfg<span class="token punctuation">.</span>h
    └── sensor<span class="token operator">/</span>
        ├── camera_sensor<span class="token punctuation">.</span>h
        └── drv_gc0308<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口使用说明" tabindex="-1"><a class="header-anchor" href="#接口使用说明" aria-hidden="true">#</a> 接口使用说明</h3>`,34),r={href:"https://yuzukihd.top/R128Module/#/sdk_module/csi?id=%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},k=a(`<h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h3><ul><li>画面看起来像油画效果，过渡渐变的地方有一圈一圈</li><li>一般是CSI 的data 线没有接好，或短路，或断路。</li><li>画面大体轮廓正常，颜色出现大片绿色和紫红色</li><li>一般可能是CSI 采样到的yuyv 顺序出现错位。确认camera 输出的yuyv 顺序的设置与camera 的spec 是否一致。</li><li>若camera 输出的yuyv 顺序没有问题，则可能是由于走线问题，导致pclk 采样data 时发生错位，此时可以调整pclk 的采样沿。具体做法如下：</li><li>在对应的camara 驱动源码，如drv_gc0308.c 里面，找到宏定义#define CLK_POL。此宏定义可以有两个值MBUS_PCLK_SAMPLE_RISING 和MBUS_PCLK_SAMPLE_FALLING。若原来是其中一个值，则修改成另外一个值，便可将PCLK 的采样沿做反相。</li><li>画面大体轮廓正常，但出现不规则的绿色紫色条纹</li><li>一般可能是pclk 驱动能力不足，导致某个时刻采样data 时发生错位。</li><li>若 pclk 走线上有串联电阻，尝试将电阻阻值减小。</li><li>增强 pclk 的驱动能力，需要设置camera 的内部寄存器。</li></ul><h2 id="uvc-usb-video-class-图像采集" tabindex="-1"><a class="header-anchor" href="#uvc-usb-video-class-图像采集" aria-hidden="true">#</a> UVC (USB Video Class) 图像采集</h2><p>FreeRTOS UVC 参考linux v4l2 框架，对接usb 驱动，实现对usb camera 的配置、使用。usb camera在FreeRTOS 应用端，与linux camera 应用类似，通过ioctl 操作进行分辨率配置、图像获取等操作。</p><h3 id="模块配置-1" tabindex="-1"><a class="header-anchor" href="#模块配置-1" aria-hidden="true">#</a> 模块配置</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>‑&gt; Drivers Options
    ‑&gt; soc related device drivers
        ‑&gt; USB Drivers
            ‑&gt; USB HOST
                [*]   Support usb host ehci0
                [*]   Support usb host ohci0
                [*]     UVC support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h3><p>当前支持的 ioctl 主要有：</p><table><thead><tr><th style="text-align:left;">ioctl</th><th style="text-align:left;">参数结构</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">VIDIOC_QUERYCAP</td><td style="text-align:left;">struct v4l2_capability</td><td style="text-align:left;">获取uvc driver 信息，实际使用可忽略该ioctl</td></tr><tr><td style="text-align:left;">VIDIOC_S_PARM</td><td style="text-align:left;">struct v4l2_streamparm</td><td style="text-align:left;">设置帧率</td></tr><tr><td style="text-align:left;">VIDIOC_S_FMT</td><td style="text-align:left;">struct v4l2_format</td><td style="text-align:left;">设置分辨率</td></tr><tr><td style="text-align:left;">VIDIOC_REQBUFS</td><td style="text-align:left;">struct v4l2_requestbuffers</td><td style="text-align:left;">申请接收buf</td></tr><tr><td style="text-align:left;">VIDIOC_QBUF</td><td style="text-align:left;">struct v4l2_buffer</td><td style="text-align:left;">将buf 添加到驱动待使用</td></tr><tr><td style="text-align:left;">VIDIOC_DQBUF</td><td style="text-align:left;">struct v4l2_buffer</td><td style="text-align:left;">从驱动获取填充了图像数据的buf</td></tr><tr><td style="text-align:left;">VIDIOC_STREAMON</td><td style="text-align:left;">enum v4l2_buf_type type</td><td style="text-align:left;">开始传输usb camera 数据</td></tr><tr><td style="text-align:left;">VIDIOC_STREAMOFF</td><td style="text-align:left;">enum v4l2_buf_type type</td><td style="text-align:left;">停止传输usb camera 数据</td></tr></tbody></table><h4 id="vidioc-querycap" tabindex="-1"><a class="header-anchor" href="#vidioc-querycap" aria-hidden="true">#</a> VIDIOC_QUERYCAP</h4><p>获取uvc driver 信息，可不调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_capability</span> cap<span class="token punctuation">;</span> <span class="token comment">/* Query device capabilities */</span>
<span class="token comment">/* Query device capabilities */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QUERYCAP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cap<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Query device capabilities fail!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Querey device capabilities succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.driver=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.card=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.bus_info=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>bus_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.version=0x%08x\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.capabilities=0x%08x\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-s-parm" tabindex="-1"><a class="header-anchor" href="#vidioc-s-parm" aria-hidden="true">#</a> VIDIOC_S_PARM</h4><p>usb camera 本身支持多帧率的，可以通过VIDIOC_S_PARM 配置输出的帧率。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_streamparm</span> parms<span class="token punctuation">;</span> <span class="token comment">/* set streaming parameters */</span>
<span class="token comment">/* set streaming parameters */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parms<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_streamparm</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parms<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>denominator <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">/* 通过denominator 配置帧率*/</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_PARM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>parms<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Setting streaming parameters failed, numerator:%d denominator:%d\\n&quot;</span><span class="token punctuation">,</span>
         parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>numerator<span class="token punctuation">,</span>
         parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-s-fmt" tabindex="-1"><a class="header-anchor" href="#vidioc-s-fmt" aria-hidden="true">#</a> VIDIOC_S_FMT</h4><p>配置分辨率和图像输出格式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span> fmt<span class="token punctuation">;</span> <span class="token comment">/* setting format */</span>
<span class="token comment">/* set the data format */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fmt<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">1920</span><span class="token punctuation">;</span>                     <span class="token comment">/* 分辨率的宽*/</span>
fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1080</span><span class="token punctuation">;</span>                    <span class="token comment">/* 分辨率的高*/</span>
fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>pixelformat <span class="token operator">=</span> V4L2_PIX_FMT_MJPEG<span class="token punctuation">;</span> <span class="token comment">/* 输出格式*/</span>
fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>field <span class="token operator">=</span> V4L2_FIELD_INTERLACED<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_FMT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fmt<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; setting the data format failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-reqbufs" tabindex="-1"><a class="header-anchor" href="#vidioc-reqbufs" aria-hidden="true">#</a> VIDIOC_REQBUFS</h4><p>底层需要有buf 接收usb camera 传输过来的数据，通过VIDIOC_REQBUFS 可以指定申请多少个buf 给驱动使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span> req<span class="token punctuation">;</span> <span class="token comment">/* Initiate Memory Mapping or User Pointer I/O */</span>
<span class="token comment">/* Initiate Memory Mapping or User Pointer I/O */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">/* 申请的buf个数，该数值需要大于或等于3，当count 为0时则是释放buf */</span>
req<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_REQBUFS failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-qbuf" tabindex="-1"><a class="header-anchor" href="#vidioc-qbuf" aria-hidden="true">#</a> VIDIOC_QBUF</h4><p>uvc 驱动需要知道当前有多少个空闲buf 可以使用，需要通过VIDIOC_QBUF 将空闲buf 添加给驱动使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> buf<span class="token punctuation">;</span> <span class="token comment">/* Query the status of a buffer */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token punctuation">.</span>index <span class="token operator">=</span> n_buffers<span class="token punctuation">;</span>
<span class="token comment">/* uvc驱动通过buf.index 获取得到相应的buf 信息，所以index */</span>
<span class="token comment">/* 不能超过VIDIOC_REQBUFS 申请的 buf数量，同时，VIDIOC_REQBUFS 申请得到buf */</span>
<span class="token comment">/* 之后应通过QBUF 添加到uvc 驱动。当VIDIOC_DQBUF 得到buf 使用 */</span>
<span class="token comment">/* 完之后也应该进行VIDIOC_QBUF。*/</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> ‑<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_QBUF error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-dqbuf" tabindex="-1"><a class="header-anchor" href="#vidioc-dqbuf" aria-hidden="true">#</a> VIDIOC_DQBUF</h4><p>获取uvc 驱动已经填充好图像数据的buf，该操作在uvc 驱动没有填充完成的buf 时会阻塞。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> buf<span class="token punctuation">;</span> <span class="token comment">/* Query the status of a buffer */</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_DQBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> ‑<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_DQBUF error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ‑<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在VIDIOC_DQBUF 操作成功返回之后， buf.mem_buf 指向的是保存图像数据的内存位置，而buf.length 则是图像数据的有效长度。</p><h4 id="vidioc-streamon" tabindex="-1"><a class="header-anchor" href="#vidioc-streamon" aria-hidden="true">#</a> VIDIOC_STREAMON</h4><p>在完成配置之后，通过VIDIOC_STREAMON 使能usb camera 输出图像数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>
<span class="token comment">/* streamon */</span>
type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token punctuation">)</span> <span class="token operator">==</span> ‑<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_STREAMON error! %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; stream on succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vidioc-streamoff" tabindex="-1"><a class="header-anchor" href="#vidioc-streamoff" aria-hidden="true">#</a> VIDIOC_STREAMOFF</h4><p>在完成配置之后，通过VIDIOC_STREAMON 使能usb camera 输出图像数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>
<span class="token comment">/* streamon */</span>
type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMOFF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token punctuation">)</span> <span class="token operator">==</span> ‑<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_STREAMOFF error! %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; stream off succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口使用流程" tabindex="-1"><a class="header-anchor" href="#接口使用流程" aria-hidden="true">#</a> 接口使用流程</h3><p>FreeRTOS uvc 应用流程需要先设置帧率、分辨率、格式等参数，然后申请buf，将buf 提供给驱动，然后开启传输。关闭传输之后，需要释放buf 再释放相应的句柄。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">/</span>dev<span class="token operator">/</span>video<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QUERYCAP<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_PARM<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//设置帧率</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_FMT<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//设置分辨率和格式</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//申请buf，count &gt;= 3</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token punctuation">)</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//将buf都提供给uvc驱动</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMON<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//开启流传输</span>
<span class="token keyword">while</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_DQBUF<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//获取填充好的buf数据</span>
app use buf<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//buf使用完之后还给uvc驱动</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMOFF<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//停止流传输</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token comment">//释放buf，count = 0</span>
<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token comment">//释放句柄</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FreeRTOS 目前仅支持单摄接收。</p><h3 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h3><p>前提条件：机器接上电源，并且机器的USB接口通过OTG线连接上USB摄像头</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;usb_test.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;uvcvideo.h&quot;</span></span>

<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">msleep</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> msecs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>uvc_thread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>file_thread <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">hal_mailbox_t</span> uvc_mailbox <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">save_frame_to_file</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// save more frames</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Open %s error\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fwrite</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Write file fail (%s)\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">usb_uvc_file_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>para<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> source_data_path<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> <span class="token operator">*</span>mailbuf<span class="token punctuation">;</span>
  <span class="token keyword">int</span> np <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_mailbox_recv</span><span class="token punctuation">(</span>uvc_mailbox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mailbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;np = %d\\n&quot;</span><span class="token punctuation">,</span> np<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">sprintf</span><span class="token punctuation">(</span>source_data_path<span class="token punctuation">,</span> <span class="token string">&quot;/data/source_frame_%d.jpg&quot;</span><span class="token punctuation">,</span> np<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">save_frame_to_file</span><span class="token punctuation">(</span>source_data_path<span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span>mailbuf<span class="token operator">-&gt;</span>mem_buf<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         mailbuf<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">int64_t</span><span class="token punctuation">)</span>mailbuf<span class="token operator">-&gt;</span>mem_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">free</span><span class="token punctuation">(</span>mailbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mailbuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">usb_uvc_test_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>para<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_capability</span> cap<span class="token punctuation">;</span>   <span class="token comment">/* Query device capabilities */</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_streamparm</span> parms<span class="token punctuation">;</span> <span class="token comment">/* set streaming parameters */</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span> fmt<span class="token punctuation">;</span>       <span class="token comment">/* try a format */</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span>
      req<span class="token punctuation">;</span>                <span class="token comment">/* Initiate Memory Mapping or User Pointer I/O */</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> buf<span class="token punctuation">;</span> <span class="token comment">/* Query the status of a buffer */</span>
  <span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span> <span class="token operator">*</span>mailbuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">enum</span> <span class="token class-name">v4l2_buf_type</span> type<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n_buffers<span class="token punctuation">;</span>
  <span class="token keyword">int</span> np<span class="token punctuation">;</span>

  <span class="token comment">/* 1.open /dev/videoX node */</span>
  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/video&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* 2.Query device capabilities */</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QUERYCAP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cap<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Query device capabilities fail!!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; Querey device capabilities succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.driver=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.card=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.bus_info=%s\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>bus_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.version=0x%08x\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; cap.capabilities=0x%08x\\n&quot;</span><span class="token punctuation">,</span> cap<span class="token punctuation">.</span>capabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 7.set streaming parameters */</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parms<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_streamparm</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  parms<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>denominator <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_PARM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>parms<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span>
        <span class="token string">&quot; Setting streaming parameters failed, numerator:%d denominator:%d\\n&quot;</span><span class="token punctuation">,</span>
        parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>numerator<span class="token punctuation">,</span>
        parms<span class="token punctuation">.</span>parm<span class="token punctuation">.</span>capture<span class="token punctuation">.</span>timeperframe<span class="token punctuation">.</span>denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 9.set the data format */</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_format</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fmt<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>field <span class="token operator">=</span> V4L2_FIELD_INTERLACED<span class="token punctuation">;</span>

  fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">;</span>
  fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">240</span><span class="token punctuation">;</span>
  fmt<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>pixelformat <span class="token operator">=</span> V4L2_PIX_FMT_MJPEG<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_S_FMT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fmt<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; setting the data format failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 10.Initiate Memory Mapping or User Pointer I/O */</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_REQBUFS failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 11.Exchange a buffer with the driver */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>n_buffers <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n_buffers <span class="token operator">&lt;</span> req<span class="token punctuation">.</span>count<span class="token punctuation">;</span> n_buffers<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    buf<span class="token punctuation">.</span>index <span class="token operator">=</span> n_buffers<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_QBUF error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* streamon */</span>
  type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_STREAMON error! %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; stream on succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  np <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; camera capture num is [%d]\\n&quot;</span><span class="token punctuation">,</span> np<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* wait uvc frame */</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_DQBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_DQBUF error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// printf(&quot;*****DQBUF[%d] FINISH*****\\n&quot;, buf.index);</span>
    <span class="token punctuation">}</span>
    mailbuf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailbuf<span class="token operator">-&gt;</span>mem_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mailbuf<span class="token operator">-&gt;</span>mem_buf <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>mailbuf<span class="token operator">-&gt;</span>mem_buf<span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span>mem_buf<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mailbuf<span class="token operator">-&gt;</span>length <span class="token operator">=</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_mailbox_send_wait</span><span class="token punctuation">(</span>uvc_mailbox<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>mailbuf<span class="token punctuation">,</span>
                                <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;uvc data send failed, data lost\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_QBUF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; VIDIOC_QBUF error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">goto</span> EXIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;************QBUF[%d] FINISH**************\\n\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    np<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n Capture thread finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

EXIT<span class="token operator">:</span>
  type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_STREAMOFF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">v4l2_requestbuffers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>type <span class="token operator">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>memory <span class="token operator">=</span> V4L2_MEMORY_MMAP<span class="token punctuation">;</span>
  <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VIDIOC_REQBUFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hal_is_queue_empty</span><span class="token punctuation">(</span>uvc_mailbox<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">msleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;close.......\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hal_mailbox_delete</span><span class="token punctuation">(</span>uvc_mailbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hal_thread_stop</span><span class="token punctuation">(</span>file_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hal_thread_stop</span><span class="token punctuation">(</span>uvc_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">usb_test_cmd_uvc</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  uvc_mailbox <span class="token operator">=</span> <span class="token function">hal_mailbox_create</span><span class="token punctuation">(</span><span class="token string">&quot;ucv_queue&quot;</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>uvc_mailbox <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;mailbox create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> fail_exit1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;uvc_mailbox create sucess!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// usb thread is HAL_THREAD_PRIORITY_SYS,must be lower than</span>
  <span class="token comment">// HAL_THREAD_PRIORITY_SYS</span>
  uvc_thread <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>usb_uvc_test_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;uvc_thread&quot;</span><span class="token punctuation">,</span>
                                 <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>HAL_THREAD_PRIORITY_APP <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>uvc_thread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usb_uvc_test_thread create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> fail_exit2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">hal_thread_start</span><span class="token punctuation">(</span>uvc_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  file_thread <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>usb_uvc_file_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;uvc_file_thread&quot;</span><span class="token punctuation">,</span>
                                  <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file_thread <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;uvc file thread create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> fail_exit3<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">hal_thread_start</span><span class="token punctuation">(</span>file_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
fail_exit3<span class="token operator">:</span>
  <span class="token function">hal_thread_stop</span><span class="token punctuation">(</span>uvc_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
fail_exit2<span class="token operator">:</span>
  <span class="token function">hal_mailbox_delete</span><span class="token punctuation">(</span>uvc_mailbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
fail_exit1<span class="token operator">:</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试命令：<code>usb uvc_test</code></p><p>测试结果：在小机端/data/目录下生成图像文件（source_frame_X.jpg）</p>`,43);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("详细说明见 "),n("a",r,[s("SDK HAL 模块开发指南 - CSI 模块接口说明"),i(t)])]),k])}const f=p(l,[["render",d],["__file","chapter7.html.vue"]]);export{f as default};
