import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const e={},t=p(`<h1 id="csi" tabindex="-1"><a class="header-anchor" href="#csi" aria-hidden="true">#</a> CSI</h1><p>介绍sunxi 平台RTOS 上CSI_JPEG 驱动hal 的一般使用方法及调试接口，为开发与调试提供参考。</p><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><h3 id="sensor-csi-通路" tabindex="-1"><a class="header-anchor" href="#sensor-csi-通路" aria-hidden="true">#</a> SENSOR -&gt; CSI 通路</h3><p>CSI （CMOS sensor interface）接口时序上可支持独立 SYNC 和嵌入 SYNC(CCIR656)。支持接收 YUV422 或 YUV420 数据。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter2/image1.jpg" alt="image1"></p><p>VSYNC 和HSYNC 的有效电平可以是正极性，也可以是负极性。在配置时，需要保证摄像头和 CSI 内部配置保持一致。</p><p>最常见的 YUV422 格式输入后，内部只能处理成 YUV420 格式，并输出到 memory 存以 NV12布局形式。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter2/image2.jpg" alt="image2"></p><h3 id="csi-jpeg-通路" tabindex="-1"><a class="header-anchor" href="#csi-jpeg-通路" aria-hidden="true">#</a> CSI -&gt; JPEG 通路</h3><h4 id="编码格式" tabindex="-1"><a class="header-anchor" href="#编码格式" aria-hidden="true">#</a> 编码格式</h4><p>JPEG 模块只支持 YUV420 格式的编码，因此 CSI 捕获的数据输出给 JPEG 模块编码的图像格式必须是 YUV420。若 CSI 输入 JPEG 模块是 JPEG 码流，JPEG 模块也能正常将其输出。</p><h4 id="编码模式" tabindex="-1"><a class="header-anchor" href="#编码模式" aria-hidden="true">#</a> 编码模式</h4><p>JPEG 模块支持 online 及 offline 模式编码。</p><ul><li>online 模式即在线模式，CSI 每接收到 16 行数据就自动进行 JPEG 编码，当前帧图像接收完，编码也随即完成。该模式 CSI 不会将接收的原始图像数据保存起来，只输出 JPEG 编码后的数据。编码数据输出的方式又有：整帧模式和分块模式。</li><li>offline 模式即离线模式，CSI 接收到的数据会先存到内存中，待一帧完整数据全部存储完成后，由软件启动 JPEG 编码。所以此时 JPEG 不是实时处理，可以对任何已经保存好的 YUV420 图像数据进行编码。</li></ul><h5 id="online-模式" tabindex="-1"><a class="header-anchor" href="#online-模式" aria-hidden="true">#</a> ONLINE 模式</h5><p>Online 模式的通路框图如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter2/image3.jpg" alt="image3"></p><p>Sensor(摄像头) 输出 YUV422 格式数据到 CSI，CSI 接收到 YUV422 后处理成 YUV420 格式，每接收到 16 行数据后，硬件会自动启动 JPEG encoder 进行一次编码操作，编码输出的码流通过总线直接写到设定好的内存中，故可认为 Online 模式下图像的接收和编码是同时进行的。在一帧数据接收完并编码结束后，JPEG encoder 会产生 ve finish(编码完成) 中断。因此，对图像分辨率的要求是行列数为 16 的整数倍，支持的最小分辨率为 32*32。</p><p>Online 分块模式与整帧模式的区别在于，分块模式可以在 JPEG 编码输出数据量达到设定值 (例如 2KB/4KB) 后产生中断，并且可以在一帧编码过程中循环使用编码输出空间，例如只分配 8KB的编码输出空间，而一帧图像编码数据有 20KB，则在第一次写满 8KB 后，JPEG 将会从这 8KB的首地址开始存储，循环使用，故需要软件配合将之前的数据读走，否则之前的数据会被覆盖。</p><h5 id="offline-模式" tabindex="-1"><a class="header-anchor" href="#offline-模式" aria-hidden="true">#</a> OFFLINE 模式</h5><p>Offline 模式的通路框图如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part2/chapter2/image4.jpg" alt="image4"></p><p>Offline 模式下，CSI 会将 YUV420 的原始图像数据存储到 YUV memory 中，存放格式为NV12。一帧图像全部存完后，产生写回中断 (wb finish)，然后由软件启动 JPEG 开始编码， JPEG 编码器会读取 YUV memory 中的原始数据送给 Encoder 进行编码，编码后的数据写到JPEG memory 中。</p><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>其menuconfig 的配置如下（以选择GC0308 摄像头为例）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        CSI Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi driver
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi camera driver
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> csi camera choice <span class="token operator">--</span><span class="token operator">-&gt;</span>
                <span class="token operator">--</span><span class="token operator">-</span> csi camera choice
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> csi camera GC0308
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable jpeg encoder
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable csi demo test command  <span class="token comment">// csi_jpeg模块测试用例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>驱动位于 <code>rtos-hal/hal/source/drivers/hal/source/csi</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>csi<span class="token operator">/</span>
├── csi_camera<span class="token operator">/</span>         <span class="token punctuation">;</span>csi driver
│   ├── csi<span class="token punctuation">.</span>c
│   ├── csi<span class="token punctuation">.</span>h
│   ├── csi_reg<span class="token operator">/</span>
│   │   ├── csi_reg<span class="token punctuation">.</span>c
│   │   └── csi_reg<span class="token punctuation">.</span>h
│   └── sensor<span class="token operator">/</span>         <span class="token punctuation">;</span>cmos sensor driver
│   ├── drv_gc0308<span class="token punctuation">.</span>c
│   ├── sensor_helper<span class="token punctuation">.</span>c
│   └── sensor_helper<span class="token punctuation">.</span>h
├── hal_csi_jpeg<span class="token punctuation">.</span>c      <span class="token punctuation">;</span>csi_jpeg模块驱动实现主体
├── jpeg<span class="token operator">/</span>               <span class="token punctuation">;</span>jpeg driver
│   ├── hal_jpeg<span class="token punctuation">.</span>c
│   ├── hal_jpeg<span class="token punctuation">.</span>h
│   ├── jpegenc<span class="token punctuation">.</span>c
│   ├── jpegenc<span class="token punctuation">.</span>h
│   ├── jpeglib<span class="token punctuation">.</span>c
│   ├── jpeglib<span class="token punctuation">.</span>h
│   ├── jpeg_marker<span class="token punctuation">.</span>h
│   └── jpeg_reg<span class="token operator">/</span>
│   ├── jpeg_reg<span class="token punctuation">.</span>c
│   └── jpeg_reg<span class="token punctuation">.</span>h
└── utility
    ├── cj_board_cfg<span class="token punctuation">.</span>h
    ├── cj_platform_cfg<span class="token punctuation">.</span>h
    └── sensor<span class="token operator">/</span>
        ├── camera_sensor<span class="token punctuation">.</span>h
        └── drv_gc0308<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><h4 id="csi-jpeg-fmt" tabindex="-1"><a class="header-anchor" href="#csi-jpeg-fmt" aria-hidden="true">#</a> <code>csi_jpeg_fmt</code></h4><p>作用：用于描述csi_jpeg 模块的属性参数</p><p>成员：</p><ul><li>line_mode：JPEG 的工作模式。</li><li>output_mode：CSI_JPEG 的输出图像格式。</li><li>cb：CSI/JPEG 的硬件中断的回调函数。可以用做实现JPEG 分块模式的数据提取功能。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">csi_jpeg_fmt</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">line_mode_t</span> line_mode<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">pix_output_fmt_mode_t</span> output_mode<span class="token punctuation">;</span>
    CapStatusCb cb<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> fps<span class="token punctuation">;</span> <span class="token comment">//reserve</span>
<span class="token punctuation">}</span>；

<span class="token comment">// 成员line_mode结构体</span>
<span class="token keyword">enum</span> <span class="token class-name">line_mode_t</span> <span class="token punctuation">{</span>
    OFFLINE_MODE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    ONLINE_MODE<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 成员output_mode结构体</span>
<span class="token keyword">enum</span> <span class="token class-name">pix_output_fmt_mode_t</span> <span class="token punctuation">{</span>
    PIX_FMT_OUT_NV12 <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">,</span>
    PIX_FMT_OUT_JPEG <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">,</span>
    PIX_FMT_OUT_MAX <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="csi-ipeg-mem" tabindex="-1"><a class="header-anchor" href="#csi-ipeg-mem" aria-hidden="true">#</a> <code>csi_ipeg_mem</code></h4><p>作用：用于描述 CSI/JPEG 模块所申请 buffer 相关的属性信息</p><p>成员：</p><ul><li>buf : 所申请的 buffer。</li><li>mpart_info : JPEG 分块模式的块属性信息。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> index<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_buf</span> buf<span class="token punctuation">;</span>
    jpeg_mpartbuffinfo mpart_info<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 成员buf结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_buf</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 成员mpart_info结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> buff_index<span class="token punctuation">;</span>   <span class="token comment">/* Indicate which buffer the currently encoded part jpeg is stored in */</span>
    <span class="token class-name">uint32_t</span> buff_offset<span class="token punctuation">;</span> <span class="token comment">/* Indicate the offset of the current part of jpeg in the buffer */</span>
    <span class="token class-name">uint8_t</span> tail<span class="token punctuation">;</span>         <span class="token comment">/* Indicates whether it is the last part of a jpeg image */</span>
    <span class="token class-name">uint32_t</span> size<span class="token punctuation">;</span>        <span class="token comment">/* Indicate the size of the current part of jpeg encoding */</span>
<span class="token punctuation">}</span> jpeg_mpartbuffinfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块加载初始化" tabindex="-1"><a class="header-anchor" href="#模块加载初始化" aria-hidden="true">#</a> 模块加载初始化</h3><p>csi_jpeg 模块的加载函数，主要是CSI/JPEG 模块的初始化、申请中断和clk 初始化等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">hal_csi_jpeg_probe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="模块去初始化" tabindex="-1"><a class="header-anchor" href="#模块去初始化" aria-hidden="true">#</a> 模块去初始化</h3><p>csi_jpeg 模块的移除函数，主要是CSI/JPEG 模块的反初始化、注销中断和clk 反初始化等。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>HAL_Status <span class="token function">hal_csi_jpeg_remove</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h3><p>设置csi_jpeg 模块的属性参数。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_csi_jpeg_set_fmt</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_jpeg_fmt</span> <span class="token operator">*</span>intput_fmt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>intput_fmt：指向csi_jpeg_fmt 结构体类型的配置参数。</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="申请图像buffer" tabindex="-1"><a class="header-anchor" href="#申请图像buffer" aria-hidden="true">#</a> 申请图像buffer</h3><p>CSI/JPEG 模块获取存放图像数据的buffer。多个缓存可以用于建立FIFO，来提高视频采集的效率。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_csi_jpeg_reqbuf</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>count: buffer 数目</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="释放图像buffer" tabindex="-1"><a class="header-anchor" href="#释放图像buffer" aria-hidden="true">#</a> 释放图像buffer</h3><p>CSI/JPEG 模块释放存放图像数据的buffer。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">hal_csi_jpeg_freebuf</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="配置流开关" tabindex="-1"><a class="header-anchor" href="#配置流开关" aria-hidden="true">#</a> 配置流开关</h3><p>csi_jpeg 模块的开流/关流函数，主要是CSI/JPEG 模块的配置和控制CSI 采集功能等。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_csi_jpeg_s_stream</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> on<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>on：“非0” 值代表开启，“0” 值代表关闭</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="csi-buffer-出列" tabindex="-1"><a class="header-anchor" href="#csi-buffer-出列" aria-hidden="true">#</a> CSI buffer 出列</h3><p>将CSI driver 已经填充好数据的 buffer 出列，供应用使用。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">hal_csi_dqbuf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>csi_mem<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout_msec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>csi_mem：CSI buffer，指向csi_ipeg_mem 结构体类型的配置参数。</li><li>timeout_msec：单位ms。</li></ul><p>返回值：</p><ul><li>正数代表成功，返回csi_mem</li><li>负数代表失败</li></ul><h3 id="csi-buffer-入队" tabindex="-1"><a class="header-anchor" href="#csi-buffer-入队" aria-hidden="true">#</a> CSI buffer 入队</h3><p>将 User 空间已经处理过的buffer，重新入队，移交给CSI driver，等待填充数据。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_csi_qbuf</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="jpeg-buffer-出列" tabindex="-1"><a class="header-anchor" href="#jpeg-buffer-出列" aria-hidden="true">#</a> JPEG buffer 出列</h3><p>将 JPEG driver 已经填充好数据的 buffer 出列，供应用使用。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">hal_jpeg_dqbuf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout_msec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>jpeg_mem：JPEG buffer，指向csi_ipeg_mem 结构体类型的配置参数。</li><li>timeout_msec：单位ms。</li></ul><p>返回值：</p><ul><li>正数代表成功，返回csi_mem</li><li>负数代表失败</li></ul><h3 id="jpeg-buffer-入队" tabindex="-1"><a class="header-anchor" href="#jpeg-buffer-入队" aria-hidden="true">#</a> JPEG buffer 入队</h3><p>将User 空间已经处理过的buffer，重新入队，移交给JPEG driver，等待填充数据。</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_jpeg_qbuf</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>无</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><h3 id="online-模式-1" tabindex="-1"><a class="header-anchor" href="#online-模式-1" aria-hidden="true">#</a> online 模式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;FreeRTOS/_os_semaphore.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;FreeRTOS/_os_time.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_hal_twi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_thread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_csi_jpeg.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;jpegenc.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cj_platform_cfg.h&quot;</span></span>

<span class="token comment">/* Macro JPEG_MPART_ENABLE defined in jpegenc.h */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">JPEG_MPART_ENABLE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JPEG_MPART_SIZE</span>         <span class="token expression"><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read_whole_jpg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">,</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s line: %d addr = 0x%08x size = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span>
                jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;/data/test_%d.jpg&quot;</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;open /data/test.jpg error %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    addr <span class="token operator">=</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr <span class="token operator">-</span> JPEG_HEADER_LEN<span class="token punctuation">;</span>
    size <span class="token operator">=</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size <span class="token operator">+</span> JPEG_HEADER_LEN<span class="token punctuation">;</span>

    res <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write fail(%d), line%d..\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write JPEG image ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read_part_jpg</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s line: %d addr = 0x%08x size = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;/data/test_%d.jpg&quot;</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;open /data/test.jpg error %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    res <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write fail(%d), line%d..\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write JPEG image ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">JPEG_MPART_ENABLE</span></span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> gmpartaddr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> gmpartsize<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jpeg_mpart_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">uint32_t</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean_invalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr <span class="token operator">+</span>
            jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>buff_offset<span class="token punctuation">,</span> jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* necessary operation */</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>gmpartaddr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> offset<span class="token punctuation">,</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr <span class="token operator">+</span> jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>buff_offset<span class="token punctuation">,</span>
            jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    offset <span class="token operator">+=</span> jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jpeg_mem<span class="token operator">-&gt;</span>mpart_info<span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*  encode one jpeg finish */</span>
        gmpartsize<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> offset<span class="token punctuation">;</span>
        offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_jpeg_fmt</span> fmt<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>csi_mem<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> test_count<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout_msec<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    fmt<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">640</span><span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>line_mode <span class="token operator">=</span> ONLINE_MODE<span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>output_mode <span class="token operator">=</span> PIX_FMT_OUT_MAX<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">JPEG_MPART_ENABLE</span></span>
    fmt<span class="token punctuation">.</span>cb <span class="token operator">=</span> <span class="token operator">&amp;</span>jpeg_mpart_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">hal_csi_jpeg_set_fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_csi_jpeg_reqbuf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    test_count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token function">hal_csi_jpeg_s_stream</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi stream on!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    timeout_msec <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">JPEG_MPART_ENABLE</span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        gmpartaddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>JPEG_MPART_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;jpeg pic addr = %x\\n&quot;</span><span class="token punctuation">,</span> gmpartaddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>gmpartaddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> JPEG_MPART_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>test_count<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jpeg_mem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">hal_jpeg_dqbuf</span><span class="token punctuation">(</span>jpeg_mem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> timeout_msec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">hal_jpeg_qbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> count<span class="token punctuation">)</span>
            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_disable_irq</span><span class="token punctuation">(</span>CSI_JPEG_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">JPEG_MPART_ENABLE</span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">read_part_jpg</span><span class="token punctuation">(</span>jpeg_mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr <span class="token operator">-</span> JPEG_HEADER_LEN<span class="token punctuation">,</span> JPEG_HEADER_LEN<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">read_part_jpg</span><span class="token punctuation">(</span>gmpartaddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> gmpartsize<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>gmpartaddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">read_whole_jpg</span><span class="token punctuation">(</span>jpeg_mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token function">hal_csi_jpeg_s_stream</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_csi_jpeg_freebuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi stream off!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_csi_jpeg_online_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi jpeg demo started\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_csi_jpeg_probe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">main_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_csi_jpeg_remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi jpeg demo over\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_csi_jpeg_online_test<span class="token punctuation">,</span> hal_csi_jpeg_online<span class="token punctuation">,</span> csi jpeg online encode test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offline-模式-1" tabindex="-1"><a class="header-anchor" href="#offline-模式-1" aria-hidden="true">#</a> offline 模式</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;FreeRTOS/_os_semaphore.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;FreeRTOS/_os_time.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sunxi_hal_twi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_thread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_csi_jpeg.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;jpegenc.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> out_fmt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CSI_JPEG_IRQn</span>   <span class="token expression"><span class="token number">109</span>  </span><span class="token comment">// rv</span></span>
<span class="token comment">//#define CSI_JPEG_IRQn 93  // arm</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read_frame</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>csi_mem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token punctuation">;</span>

    <span class="token function">hal_disable_irq</span><span class="token punctuation">(</span>CSI_JPEG_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// when write bin, close irq, r/w too slow</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s line: %d addr = 0x%08x size = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span>
                csi_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> csi_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;/data/nv12.bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;open /data/nv12.bin error %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    res <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>csi_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> csi_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write fail(%d), line%d..\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write YUV image ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_enable_irq</span><span class="token punctuation">(</span>CSI_JPEG_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// after write bin, open irq, r/w too slow</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read_jpg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">hal_disable_irq</span><span class="token punctuation">(</span>CSI_JPEG_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cfm when write bin, close irq</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s line: %d addr = 0x%08x size = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span>
                jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;/data/test.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;open /data/test_online.jpg error %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    addr <span class="token operator">=</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>addr <span class="token operator">-</span> JPEG_HEADER_LEN<span class="token punctuation">;</span>
    size <span class="token operator">=</span> jpeg_mem<span class="token operator">-&gt;</span>buf<span class="token punctuation">.</span>size <span class="token operator">+</span> JPEG_HEADER_LEN<span class="token punctuation">;</span>

    res <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write fail(%d), line%d..\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;write JPEG image ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_enable_irq</span><span class="token punctuation">(</span>CSI_JPEG_IRQn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cfm after write bin, open irq</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_jpeg_fmt</span> fmt<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>csi_mem<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">csi_ipeg_mem</span> <span class="token operator">*</span>jpeg_mem<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> test_count<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout_msec<span class="token punctuation">;</span>

    fmt<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">640</span><span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>line_mode <span class="token operator">=</span> OFFLINE_MODE<span class="token punctuation">;</span>
    fmt<span class="token punctuation">.</span>output_mode <span class="token operator">=</span> PIX_FMT_OUT_MAX<span class="token punctuation">;</span>
    <span class="token function">hal_csi_jpeg_set_fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_csi_jpeg_reqbuf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_csi_jpeg_s_stream</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi stream on!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    test_count <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    timeout_msec <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>  <span class="token comment">// recommend 2s, 10s for pm test</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out_fmt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>test_count<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;test count = %d\\n&quot;</span><span class="token punctuation">,</span> test_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            csi_mem <span class="token operator">=</span> <span class="token function">hal_csi_dqbuf</span><span class="token punctuation">(</span>csi_mem<span class="token punctuation">,</span> timeout_msec<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>test_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token function">read_frame</span><span class="token punctuation">(</span>csi_mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_csi_qbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>test_count<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;test count = %d\\n&quot;</span><span class="token punctuation">,</span> test_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            jpeg_mem <span class="token operator">=</span> <span class="token function">hal_jpeg_dqbuf</span><span class="token punctuation">(</span>jpeg_mem<span class="token punctuation">,</span> timeout_msec<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>test_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token function">read_jpg</span><span class="token punctuation">(</span>jpeg_mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">hal_jpeg_qbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_csi_jpeg_s_stream</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_csi_jpeg_freebuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi stream off!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">rt_thread</span> <span class="token operator">*</span>thread<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">csi_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi jpeg demo started\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_csi_jpeg_probe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">main_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_csi_jpeg_remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;csi jpeg demo over\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">kthread_stop</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_csi_jpeg_offline_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: hal_csi_jpeg_offline num. num: 0 is nv12, 1 is jpeg\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        out_fmt <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    thread <span class="token operator">=</span> <span class="token function">kthread_create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>csi_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;csi_thread&quot;</span><span class="token punctuation">,</span> <span class="token number">409600</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_SYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kthread_start</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_csi_jpeg_offline_test<span class="token punctuation">,</span> hal_csi_jpeg_offline<span class="token punctuation">,</span> csi jpeg offline encode test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,126),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","chapter2.html.vue"]]);export{r as default};
