import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="hifi5-语音算法部署" tabindex="-1"><a class="header-anchor" href="#hifi5-语音算法部署" aria-hidden="true">#</a> HiFi5 语音算法部署</h1><p>部署算法需要完成以下四个方面的功能：</p><ol><li>创建DSP算法组件目录及编写代码</li><li>在DSP上录音</li><li>使用算法加速库加速算法</li><li>核间通讯</li><li>DUMP 数据到PC</li></ol><h2 id="创建dsp算法组件目录" tabindex="-1"><a class="header-anchor" href="#创建dsp算法组件目录" aria-hidden="true">#</a> 创建DSP算法组件目录</h2><p>创建并进入目录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir -p lichee/rtos-components/thirdparty/my_dsp_asr/src
mkdir -p lichee/rtos-components/thirdparty/my_dsp_asr/inc
cd lichee/rtos-components/thirdparty/my_dsp_asr/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 <code>Kconfig</code> 文件：</p><div class="language-kconfig line-numbers-mode" data-ext="kconfig"><pre class="language-kconfig"><code>menu &quot;my dsp asr&quot;

config COMPONENTS_MY_DSP_ASR
    bool &quot;my dsp asr&quot;
    depends on ARCH_DSP
    default n
    help
        to do

endmenu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>Kconfig</code>后建议重新 <code>menuconfig</code></p><p>在 <code>lichee/rtos-components/thirdparty/Kconfig</code> 中追加：</p><div class="language-kconfig line-numbers-mode" data-ext="kconfig"><pre class="language-kconfig"><code>source &quot;components/common/thirdparty/my_dsp_asr/Kconfig&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写 <code>Makefile</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>obj-y += src/my_dsp_asr.o
#self
CFLAGS += -Icomponents/common/aw/asr_demo/inc/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>lichee/rtos-components/thirdparty/Makefile</code> 中追加：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>obj-$(CONFIG_COMPONENTS_MY_DSP_ASR) += my_dsp_asr/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="编写基础代码" tabindex="-1"><a class="header-anchor" href="#编写基础代码" aria-hidden="true">#</a> 编写基础代码</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FreeRTOS.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;task.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_dsp_asr_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> loop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s enter\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s exit\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>thread_name <span class="token operator">=</span> <span class="token string">&quot;my_dsp_asr_thread&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> stack_size <span class="token operator">=</span> <span class="token number">0x4000</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> thread_priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cmd_my_dsp_asr</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> loop <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    TaskHandle_t handle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s enter\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span>my_dsp_asr_thread<span class="token punctuation">,</span> thread_name<span class="token punctuation">,</span> stack_size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>loop<span class="token punctuation">,</span> thread_priority<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span> <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;xTaskCreate %s failed!\\n&quot;</span><span class="token punctuation">,</span> thread_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s exit\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_my_dsp_asr<span class="token punctuation">,</span> my_dsp_asr<span class="token punctuation">,</span> my dsp asr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./build.sh menuconfig</code>，选择以下配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONFIG_COMPONENTS_MY_DSP_ASR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（会根据 <code>Kconfig</code> 的 <code>select</code> 字段自动选上依赖的组件）</p><p>检查是否编译进固件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>grep -r cmd_my_dsp_asr ./out/ --include=*.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lichee/dsp$ grep -r cmd_my_dsp_asr ./out/ --include=*.bin
Binary file ./out/r128s3/evb1/r128s2_dsp0_evb1.bin matches
Binary file ./out/r128s3/evb1/r128s2_dsp0_evb1_raw.bin matches
Binary file ./out/r128s3/evb1/r128s2_dsp0_evb1_xcc.bin matches
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>烧录固件即可在串口终端输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rpccli dsp my_dsp_asr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后期可以添加开机自启：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>diff --git a/arch/sun20iw2/init-sun20iw2.c b/arch/sun20iw2/init-sun20iw2.c
index cfb2d45d..9b5c2a5d 100644
<span class="token coord">--- a/arch/sun20iw2/init-sun20iw2.c</span>
<span class="token coord">+++ b/arch/sun20iw2/init-sun20iw2.c</span>
@@ -160,5 +160,10 @@ void app_init(void)
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       rpdata_ctrl_init();
</span><span class="token prefix unchanged"> </span><span class="token line">#endif
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">#ifdef CONFIG_COMPONENTS_MY_DSP_ASR
</span><span class="token prefix inserted">+</span><span class="token line">       int cmd_my_dsp_asr(int argc, char *argv[]);
</span><span class="token prefix inserted">+</span><span class="token line">       cmd_my_dsp_asr(0, NULL);
</span><span class="token prefix inserted">+</span><span class="token line">#endif
</span><span class="token prefix inserted">+</span><span class="token line">
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在dsp上录音" tabindex="-1"><a class="header-anchor" href="#在dsp上录音" aria-hidden="true">#</a> 在DSP上录音</h2><p>在Kconfig中添加：</p><div class="language-patch line-numbers-mode" data-ext="patch"><pre class="language-patch"><code>     bool &quot;my dsp asr&quot;
     depends on ARCH_DSP
+    select COMPONENTS_AW_AUDIO_SYSTEM
     default n
     help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Makefile中添加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#audio system
CFLAGS += -Icomponents/common/aw/AudioSystem/include/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参考代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AudioRecord.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MS_PER_FRAME</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RECORD_RATE</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token number">16000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RECORD_NAME</span> <span class="token string">&quot;capture&quot;</span></span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">size_t</span> record_time_ms <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> rate <span class="token operator">=</span> RECORD_RATE<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> channels <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> bitwidth <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">int16_t</span> record_buffer<span class="token punctuation">[</span>RECORD_RATE <span class="token operator">*</span> MS_PER_FRAME <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_record_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tAudioRecord <span class="token operator">*</span>pAudioRecord <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> time_ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s enter\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pAudioRecord <span class="token operator">=</span> <span class="token function">AudioRecordCreate</span><span class="token punctuation">(</span>RECORD_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pAudioRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">AudioRecordSetup</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bitwidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>time_ms <span class="token operator">&lt;</span> record_time_ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">AudioRecordRead</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">,</span> record_buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>record_buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// TODO</span>
        <span class="token punctuation">}</span>
        time_ms <span class="token operator">+=</span> MS_PER_FRAME<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ums: read %d\\n&quot;</span><span class="token punctuation">,</span> time_ms<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">AudioRecordStop</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">AudioRecordDestroy</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s exit\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用算法加速库" tabindex="-1"><a class="header-anchor" href="#使用算法加速库" aria-hidden="true">#</a> 使用算法加速库</h2><p><strong>本节只是代码演示，对于有HIFI5授权的客户可以向 Candence 获取 NatureDSP_Signal 和 xa_nnlib_api 的源码包，其中包含api的说明文档：</strong></p><ul><li><code>libxa_nnlib/doc/HiFi5-NNLib-ProgrammersGuide-API.pdf</code></li><li><code>hifi5_library/doc/NatureDSP_Signal_Library_Reference_HiFi5.pdf</code></li></ul><p>在Kconfig中添加：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>     bool &quot;my dsp asr&quot;
     depends on ARCH_DSP
     select COMPONENTS_AW_AUDIO_SYSTEM
+    select COMPONENTS_XTENSA_HIFI5_NNLIB_LIBRARY
+    select COMPONENTS_XTENSA_HIFI5_VFPU_LIBRARY
     default n
     help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Makefile中添加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CFLAGS +=  -I components/thirdparty/xtensa/hifi5_nn_v170_library/include
CFLAGS +=  -I components/thirdparty/xtensa/hifi5_vfpu_v200_library/include
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（链接加速库的动作已经在 <code>lichee/dsp/Makefile</code> 中添加，无需重复添加）</p><p>FFT 参考代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;NatureDSP_Signal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xa_nnlib_api.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">PI</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span>             <span class="token expression"><span class="token punctuation">(</span><span class="token number">3.141592653f</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> r<span class="token punctuation">;</span>
    <span class="token keyword">float</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">make_src_cplxf_from_record_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token class-name">int16_t</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> chs<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> ch_index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> input<span class="token punctuation">[</span>i <span class="token operator">*</span> chs <span class="token operator">+</span> ch_index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// N*3/4 *twdstep</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">make_twd_cplxf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> twdstep<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token punctuation">(</span>twdstep <span class="token operator">*</span> N<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">float</span> phi <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token punctuation">(</span>twdstep <span class="token operator">*</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
            output<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> m<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">cosf</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            output<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> m<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token function">sinf</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>input_cplxf<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">float</span> max <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">float</span> cur <span class="token operator">=</span> input_cplxf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">*</span> input_cplxf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> input_cplxf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">*</span> input_cplxf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> cur<span class="token punctuation">;</span>
            index <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FFT_SIZE</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> g_tmp_cplxf<span class="token punctuation">[</span>FFT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">record_data_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>output_cplxf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>input_cplxf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> <span class="token operator">*</span>twd_cplxf<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">!=</span> FFT_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s incorrect data length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>g_tmp_cplxf<span class="token punctuation">,</span> input_cplxf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_tmp_cplxf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fft_cplxf_ie</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>complex_float <span class="token operator">*</span><span class="token punctuation">)</span>output_cplxf<span class="token punctuation">,</span>
        <span class="token punctuation">(</span>complex_float <span class="token operator">*</span><span class="token punctuation">)</span>g_tmp_cplxf<span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token keyword">const</span> complex_float <span class="token operator">*</span><span class="token punctuation">)</span>twd_cplxf<span class="token punctuation">,</span>
        <span class="token number">1</span><span class="token punctuation">,</span>
        FFT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在录音代码中添加：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>     ret <span class="token operator">=</span> <span class="token function">AudioRecordSetup</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bitwidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// TODO</span>
     <span class="token punctuation">}</span>

<span class="token operator">+</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> g_input_cplxf<span class="token punctuation">[</span>FFT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> g_output_cplxf<span class="token punctuation">[</span>FFT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cplxf_t</span> g_twd_cplxf<span class="token punctuation">[</span>FFT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> rate <span class="token operator">*</span> MS_PER_FRAME <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token keyword">int</span> twdstep <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token keyword">int</span> max_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token function">make_twd_cplxf</span><span class="token punctuation">(</span>g_twd_cplxf<span class="token punctuation">,</span> N<span class="token punctuation">,</span> twdstep<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">while</span> <span class="token punctuation">(</span>time_ms <span class="token operator">&lt;</span> record_time_ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         ret <span class="token operator">=</span> <span class="token function">AudioRecordRead</span><span class="token punctuation">(</span>pAudioRecord<span class="token punctuation">,</span> record_buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>record_buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment">// TODO</span>
         <span class="token punctuation">}</span>
         time_ms <span class="token operator">+=</span> MS_PER_FRAME<span class="token punctuation">;</span>
<span class="token operator">+</span>        max_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span>        <span class="token function">make_src_cplxf_from_record_buffer</span><span class="token punctuation">(</span>g_input_cplxf<span class="token punctuation">,</span> record_buffer<span class="token punctuation">,</span> N<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">record_data_handler</span><span class="token punctuation">(</span>g_output_cplxf<span class="token punctuation">,</span> g_input_cplxf<span class="token punctuation">,</span> g_twd_cplxf<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>            max_index <span class="token operator">=</span> <span class="token function">get_max</span><span class="token punctuation">(</span>g_output_cplxf<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>        <span class="token punctuation">}</span>
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ums: read %d, max: %d\\n&quot;</span><span class="token punctuation">,</span> time_ms<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> max_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核间通讯" tabindex="-1"><a class="header-anchor" href="#核间通讯" aria-hidden="true">#</a> 核间通讯</h2><p><strong>代码仅供参考，不包含实际业务代码</strong></p><p>在Kconfig中添加：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>     bool &quot;my dsp asr&quot;
     depends on ARCH_DSP
     select COMPONENTS_AW_AUDIO_SYSTEM
+    select COMPONENTS_RPDATA
     select COMPONENTS_XTENSA_HIFI5_NNLIB_LIBRARY
     select COMPONENTS_XTENSA_HIFI5_VFPU_LIBRARY
     default n
     help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Makefile中添加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#rpdata
CFLAGS += -Icomponents/common/aw/rpdata/include/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>由于核间通讯需要RV核配合，故还需编写RV端控制及接收数据的组件，可以参照编写DSP算法组件的方法编写：</strong> Kconfig：</p><div class="language-kconfig line-numbers-mode" data-ext="kconfig"><pre class="language-kconfig"><code>menu &quot;my rv asr&quot;

config COMPONENTS_MY_RV_ASR
    bool &quot;my RV asr&quot;
    depends on !ARCH_DSP
    select COMPONENTS_RPDATA
    default n
    help
        to do

endmenu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(注意是 <code>!ARCH_DSP</code>)</p><p>其它修改类似第一节内容，不再重复说明； rv 端 menuconfig命令为 <code>mrtos_menuconfig</code> rv端执行代码不需要&quot;rpccli dsp&quot;；</p><p>通用代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;rpdata.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token punctuation">{</span>
    <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">;</span> <span class="token comment">// both</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment">// both</span>
    <span class="token class-name">size_t</span> buf_len<span class="token punctuation">;</span> <span class="token comment">// send</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>cb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// recv</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">;</span> <span class="token comment">// recv</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> dir<span class="token punctuation">;</span> <span class="token comment">// both</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">// both</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// both</span>
    <span class="token class-name">size_t</span> buf_len<span class="token punctuation">;</span> <span class="token comment">// send</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>cb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// recv</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">;</span> <span class="token comment">// recv</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span>hdl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd <span class="token operator">=</span> hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">;</span>
        hdl<span class="token operator">-&gt;</span>cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        hdl<span class="token operator">-&gt;</span>priv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        hdl<span class="token operator">-&gt;</span>buf_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        hdl<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        hdl<span class="token operator">-&gt;</span>rpd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">rpdata_destroy</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_recv_ch_callback</span><span class="token punctuation">(</span><span class="token class-name">rpdata_t</span> <span class="token operator">*</span>rpd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span>hdl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rpdata_get_private_data</span><span class="token punctuation">(</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>cb<span class="token punctuation">)</span>
        hdl<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>priv<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">rpdata_cbs</span> rpd_recv_cb <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>recv_cb <span class="token operator">=</span> rpd_recv_ch_callback<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_recv_ch_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span>hdl<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv rpd dir:%d, type:%s, name:%s\\n&quot;</span><span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    hdl<span class="token operator">-&gt;</span>rpd <span class="token operator">=</span> <span class="token function">rpdata_connect</span><span class="token punctuation">(</span>cfg<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_connect failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hdl<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hdl<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_buffer_addr failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span>hdl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hdl<span class="token operator">-&gt;</span>cb <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>cb<span class="token punctuation">;</span>
    hdl<span class="token operator">-&gt;</span>priv <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>priv<span class="token punctuation">;</span>

    <span class="token function">rpdata_set_private_data</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">,</span> hdl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpdata_set_recv_cb</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rpd_recv_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_send_ch_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span>hdl<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> <span class="token operator">*</span>cfg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;send rpd dir:%d, type:%s, name:%s, buf_len:%u\\n&quot;</span><span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>buf_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    hdl<span class="token operator">-&gt;</span>rpd <span class="token operator">=</span> <span class="token function">rpdata_create</span><span class="token punctuation">(</span>cfg<span class="token operator">-&gt;</span>dir<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> cfg<span class="token operator">-&gt;</span>buf_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_create failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hdl<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> <span class="token function">rpdata_buffer_addr</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hdl<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rpdata_buffer_addr failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hdl<span class="token operator">-&gt;</span>buf_len <span class="token operator">=</span> cfg<span class="token operator">-&gt;</span>buf_len<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span>hdl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rpd_send</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> <span class="token operator">*</span>hdl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> data<span class="token punctuation">,</span> hdl<span class="token operator">-&gt;</span>buf_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">rpdata_wait_connect</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">rpdata_send</span><span class="token punctuation">(</span>hdl<span class="token operator">-&gt;</span>rpd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hdl<span class="token operator">-&gt;</span>buf_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// RV to DSP 控制通道</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_CTL_TYPE</span>                <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">&quot;RVtoDSPCtl&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_CTL_NAME</span>                <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">&quot;RVtoDSPCtlCh&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_CTL_SIZE</span>                <span class="token expression"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>

<span class="token comment">// DSP to RV 数据通道</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_DATA_TYPE</span>               <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">&quot;DSPtoRVData&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_DATA_NAME</span>               <span class="token expression"><span class="token punctuation">(</span></span><span class="token string">&quot;DSPtoRVDataCh&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RPD_DATA_SIZE</span>               <span class="token expression"><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DSP端代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> g_run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_rpd_dsp_recv_cb</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s recv:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_run<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_run<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_rpd_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> send_ch<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> send_cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>type <span class="token operator">=</span> RPD_DATA_TYPE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> RPD_DATA_NAME<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>buf_len <span class="token operator">=</span> RPD_DATA_SIZE<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> recv_ch<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> recv_cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>type <span class="token operator">=</span> RPD_CTL_TYPE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> RPD_CTL_NAME<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>cb <span class="token operator">=</span> my_rpd_dsp_recv_cb<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>priv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span>RPD_DATA_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RPD_DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    g_run  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s start\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rpd_send_ch_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>send_cfg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rpd_recv_ch_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>recv_cfg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>g_run<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rpd_send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s exit\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RV端代码：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> g_run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_rpd_rv_recv_cb</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s recv:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">my_rpd_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> send_ch<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> send_cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>type <span class="token operator">=</span> RPD_CTL_TYPE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> RPD_CTL_NAME<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>buf_len <span class="token operator">=</span> RPD_CTL_SIZE<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_t</span> recv_ch<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">my_rpd_cfg_t</span> recv_cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>type <span class="token operator">=</span> RPD_DATA_TYPE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> RPD_DATA_NAME<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>cb <span class="token operator">=</span> my_rpd_rv_recv_cb<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>priv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    g_run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s start\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rpd_send_ch_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>send_cfg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rpd_recv_ch_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>recv_cfg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%u error!\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> run <span class="token operator">=</span> g_run<span class="token punctuation">;</span>
        <span class="token function">rpd_send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>run<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recv_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rpd_ch_deinit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>send_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s exit\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RV 端和 DSP 端各自创建处理线程；</p><p>DSP 定时将数据发给 RV，RV 定时将运行标志发给 DSP；</p><p>RV 端修改 g_run 的值为 0，RV 将 g_run 的值发送给 DSP 后退出，DSP 收到 g_run 也将退出；</p><h2 id="dump-数据到pc" tabindex="-1"><a class="header-anchor" href="#dump-数据到pc" aria-hidden="true">#</a> DUMP 数据到PC</h2><p><strong>DSP 端没有文件系统，所以数据需要先通过核间通讯发送给 RV 核，再由 RV 核通过某种方式保存或发送；</strong></p><p>在 <strong>RV核上</strong> 可以使用 <code>adb forward</code> 实时将数据传输到 <code>PC</code>，或者也可以保存数据到 <code>flash</code>，然后使用 <code>adb pull</code> 到 PC；</p><p><strong>本节的代码都是跑在RV核上的</strong>；</p><p>可以使用现有封装接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// file_path和port只需指定一个即可，另一个填NULL或0</span>
<span class="token comment">// 指定file_path表示保存数据到flash，指定port表示提供adb传输数据到PC</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">data_save_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file_path<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">data_save_destroy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>_hdl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">data_save_request</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>_hdl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout_ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 需要保存后续数据到另一文件时调用，用于分割音频数据</span>
<span class="token keyword">int</span> <span class="token function">data_save_flush</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>_hdl<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout_ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以复制 <code>lichee/rtos-components/aw/asr_demo/inc/data_save.h</code> 和 <code>lichee/rtos-components/aw/asr_demo/src/data_save.c</code> 到自己的组件中使用，或者选上 <code>CONFIG_COMPONENTS_ASR_DEMO</code> 时可以直接使用；</p><ol><li>通过标准文件操作接口保存到<code>flash</code>或<code>data_save</code>组件指定文件路径保存到 <code>flash</code></li><li>按以下步骤通过 <code>adb forward</code> 传输数据到 <code>PC</code>：</li></ol><p>① 设备端：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>reboot(重启设备)
（等待设备重启完成）
adb shell af -p [代码中填写的port] -r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② PC端：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>adb forward tcp:11112 tcp:[代码中填写的port]
adb_record.py（或adb_record_3.py，2个文件都在lichee/rtos-components/aw/asr_demo/tools/，接收到的数据会保存在脚本执行目录下）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 设备端开始调用<code>data_save</code>接口创建通道并发送数据（可以参照第一节添加start和stop传输的命令）</p>`,79),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter3.html.vue"]]);export{r as default};
