import{_ as p,r as e,o,c,a as n,b as s,d as l,e as a}from"./app-e85d5a28.js";const i={},u=a(`<h1 id="crypto-engine" tabindex="-1"><a class="header-anchor" href="#crypto-engine" aria-hidden="true">#</a> Crypto Engine</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>CE 模块主要支持对称算法、非对称算法、摘要算法进行数据的加密和解密功能。</p><p>CE 模块主要支持的算法如下：</p><ul><li>AES 算法 ECB/CBC/CTR/CTS/OFB/CFB/CBC-MAC/XTS 等模式.</li><li>HASH 算法 MD5/SHA1/SHA224/SHA256/SHA384/SHA512/HMAC-SHA1/HMAC-SHA256.</li><li>非对称算法 RSA512/1024/2048/3072/4096.</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>其menuconfig 的配置如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Kernel Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
    Drivers Setup <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SoC HAL Drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
            CE devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enable ce driver
                <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> enbale ce hal APIs Test command
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>CE 驱动位于 <code>source/drivers/hal/source/ce/</code> 目录下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>hal<span class="token operator">/</span>
├── source
│ ├── ce
│ │ ├── ce_common<span class="token punctuation">.</span>c    # CE公用操作接口函数文件
│ │ ├── ce_common<span class="token punctuation">.</span>h    # CE操作接口函数头文件
│ │ ├── hal_ce<span class="token punctuation">.</span>c       # CE底层驱动文件
│ │ ├── hal_ce<span class="token punctuation">.</span>h       # CE底层驱动头文件
│ │ ├── Makefile
│ │ └── platform<span class="token punctuation">.</span>h     # 平台配置头文件
<span class="token operator">|</span> ├── platform
│ └── ce_sun20iw2<span class="token punctuation">.</span>h    # 具体的平台配置头文件
├── include<span class="token operator">/</span>hal
  └── sunxi_hal_ce<span class="token punctuation">.</span>h   # CE公用操作接口函数头文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_ce.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ce-初始化接口" tabindex="-1"><a class="header-anchor" href="#ce-初始化接口" aria-hidden="true">#</a> CE 初始化接口</h3><p>CE 模块初始化，主要申请中断、clk 初始化等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_ce_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="ce-去初始化接口" tabindex="-1"><a class="header-anchor" href="#ce-去初始化接口" aria-hidden="true">#</a> CE 去初始化接口</h3><p>CE 模块去初始化，主要注销中断等</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_ce_uninit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="aes-算法加解密接口" tabindex="-1"><a class="header-anchor" href="#aes-算法加解密接口" aria-hidden="true">#</a> AES 算法加解密接口</h3><p>主要实现对 AES 算法进行加解密</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_aes_crypto</span><span class="token punctuation">(</span><span class="token class-name">crypto_aes_req_ctx_t</span> <span class="token operator">*</span>req_ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>req_ctx: 为 AES 算法上下文的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>src_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> src_length<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dst_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dst_length<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>iv<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>iv_next<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> key_length<span class="token punctuation">;</span>
    <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> padding<span class="token punctuation">[</span>AES_BLOCK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> padding_len<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dir<span class="token punctuation">;</span>           <span class="token comment">/*0--加密，1--解密*/</span>
    <span class="token class-name">uint32_t</span> mode<span class="token punctuation">;</span>          <span class="token comment">/*AES算法的模式*/</span>
    <span class="token class-name">uint32_t</span> bitwidth<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">crypto_aes_req_ctx_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hash-算法运算接口" tabindex="-1"><a class="header-anchor" href="#hash-算法运算接口" aria-hidden="true">#</a> HASH 算法运算接口</h3><p>主要实现对HASH 算法进行运算</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_hash_crypto</span><span class="token punctuation">(</span><span class="token class-name">crypto_hash_req_ctx_t</span> <span class="token operator">*</span>req_ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>req_ctx: 为HASH 算法上下文的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>src_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> src_length<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dst_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dst_length<span class="token punctuation">;</span>
    <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> md<span class="token punctuation">[</span>SHA_MAX_DIGEST_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> md_size<span class="token punctuation">;</span>
    <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> padding<span class="token punctuation">[</span>SHA512_BLOCK_SIZE <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> padding_len<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> type<span class="token punctuation">;</span>          <span class="token comment">/*hash算法的模式*/</span>
    <span class="token class-name">uint32_t</span> dir<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> padding_mode<span class="token punctuation">;</span>  <span class="token comment">/*hash算法的填充模式*/</span>
<span class="token punctuation">}</span> <span class="token class-name">crypto_hash_req_ctx_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rsa-算法运算接口" tabindex="-1"><a class="header-anchor" href="#rsa-算法运算接口" aria-hidden="true">#</a> RSA 算法运算接口</h3><p>主要实现对RSA 算法进行加解密</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span> <span class="token operator">*</span>req_ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>req_ctx: 为 RSA算法上下文的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key_n<span class="token punctuation">;</span>    <span class="token comment">/*公钥模数*/</span>
    <span class="token class-name">uint32_t</span> n_len<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key_e<span class="token punctuation">;</span>    <span class="token comment">/*公钥指数*/</span>
    <span class="token class-name">uint32_t</span> e_len<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key_d<span class="token punctuation">;</span>    <span class="token comment">/*私钥*/</span>
    <span class="token class-name">uint32_t</span> d_len<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>src_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> src_length<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dst_buffer<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dst_length<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dir<span class="token punctuation">;</span>      <span class="token comment">/*0--加密，1--解密*/</span>
    <span class="token class-name">uint32_t</span> type<span class="token punctuation">;</span>     <span class="token comment">/*RSA算法的模式*/</span>
    <span class="token class-name">uint32_t</span> bitwidth<span class="token punctuation">;</span> <span class="token comment">/*RSA算法位宽*/</span>
<span class="token punctuation">}</span> <span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rng-算法运算接口" tabindex="-1"><a class="header-anchor" href="#rng-算法运算接口" aria-hidden="true">#</a> RNG 算法运算接口</h3><p>主要实现随机数的生成</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_rng_gen</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span> <span class="token operator">*</span>req_ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>req_ctx: 为 RNG 算法上下文的结构体</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rng_buf<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> rng_len<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> mode<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> key_len<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">crypto_rng_req_ctx_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2>`,67),k={href:"https://r128.docs.aw-ol.com/sdk_module/ce/sdk_module/assets/demo/ce/test_ce.h",target:"_blank",rel:"noopener noreferrer"},r=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_ce.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;test_ce.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_ECB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_CBC</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_CTR</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_CTS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_OFB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_MODE_CFB</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_DIR_ENCRYPT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AES_DIR_DECRYPT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_MD5</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_SHA1</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_SHA224</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_SHA256</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_SHA384</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASH_METHOD_SHA512</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> align<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%s: &quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> align<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0x08%x: &quot;</span><span class="token punctuation">,</span> data <span class="token operator">+</span> i <span class="token operator">*</span> align<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">aes_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> <span class="token operator">*</span>enc_buffer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> enc_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> blk_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> iv_next<span class="token punctuation">[</span>AES_BLOCK_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>aes_enc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>aes_ecb<span class="token punctuation">,</span> aes_cbc<span class="token punctuation">,</span> aes_ctr<span class="token punctuation">,</span>
                              aes_cbc<span class="token punctuation">,</span> aes_ofb<span class="token punctuation">,</span> aes_cfb8<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">crypto_aes_req_ctx_t</span> <span class="token operator">*</span>aes_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  aes_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">crypto_aes_req_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_aes_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>aes_ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc data buffer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>aes_ctx<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_aes_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  aes_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span>
      <span class="token punctuation">(</span>u8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc dest buffer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> AES_MODE_ECB<span class="token punctuation">;</span> m <span class="token operator">&lt;</span> AES_MODE_CFB <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>aes_key_len<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>aes_key_len<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>aes_src<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>aes_src<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* aes encrypt */</span>
        aes_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> aes_src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>key <span class="token operator">=</span> aes_key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>key_length <span class="token operator">=</span> aes_key_len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_ECB<span class="token punctuation">)</span>
          aes_ctx<span class="token operator">-&gt;</span>iv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
          aes_ctx<span class="token operator">-&gt;</span>iv <span class="token operator">=</span> aes_iv<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_CTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">memset</span><span class="token punctuation">(</span>iv_next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> AES_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
          aes_ctx<span class="token operator">-&gt;</span>iv_next <span class="token operator">=</span> iv_next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
          aes_ctx<span class="token operator">-&gt;</span>iv_next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_CFB<span class="token punctuation">)</span>
          aes_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
          aes_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>mode <span class="token operator">=</span> m<span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> AES_DIR_ENCRYPT<span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> <span class="token function">CE_ROUND_UP</span><span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>src_length<span class="token punctuation">,</span> AES_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span>
            <span class="token string">&quot;###############AES, mode: %d, ksize %d, src len %d, &quot;</span>
            <span class="token string">&quot;begin###############\\n&quot;</span><span class="token punctuation">,</span>
            m<span class="token punctuation">,</span> aes_key_len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">do_aes_crypto</span><span class="token punctuation">(</span>aes_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aes encrypt fail %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// for ecb/cbc/cts, enc data len should be 16 bytes aligned</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_ECB <span class="token operator">||</span> m <span class="token operator">==</span> AES_MODE_CBC <span class="token operator">||</span> m <span class="token operator">==</span> AES_MODE_CTS<span class="token punctuation">)</span>
          enc_len <span class="token operator">=</span> aes_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
          enc_len <span class="token operator">=</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// openssl enc do not support cts, so create enc data manually.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_CTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          enc_buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>
              enc_len<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>enc_buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc ctr buffer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          blk_num <span class="token operator">=</span> enc_len <span class="token operator">/</span> AES_BLOCK_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>blk_num <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>blk_num <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
              <span class="token function">memcpy</span><span class="token punctuation">(</span>enc_buffer<span class="token punctuation">,</span> aes_enc<span class="token punctuation">[</span>m <span class="token operator">-</span> AES_MODE_ECB<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>
                     <span class="token punctuation">(</span>blk_num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> AES_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>enc_buffer <span class="token operator">+</span> <span class="token punctuation">(</span>blk_num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> AES_BLOCK_SIZE<span class="token punctuation">,</span>
                   aes_enc<span class="token punctuation">[</span>m <span class="token operator">-</span> AES_MODE_ECB<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span>
                       <span class="token punctuation">(</span>blk_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> AES_BLOCK_SIZE<span class="token punctuation">,</span>
                   AES_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>enc_buffer <span class="token operator">+</span> <span class="token punctuation">(</span>blk_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> AES_BLOCK_SIZE<span class="token punctuation">,</span>
                   aes_enc<span class="token punctuation">[</span>m <span class="token operator">-</span> AES_MODE_ECB<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span>
                       <span class="token punctuation">(</span>blk_num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> AES_BLOCK_SIZE<span class="token punctuation">,</span>
                   AES_BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>enc_buffer<span class="token punctuation">,</span> aes_enc<span class="token punctuation">[</span>m <span class="token operator">-</span> AES_MODE_ECB<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> enc_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>
          enc_buffer <span class="token operator">=</span> aes_enc<span class="token punctuation">[</span>m <span class="token operator">-</span> AES_MODE_ECB<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> enc_buffer<span class="token punctuation">,</span> enc_len<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> enc_buffer<span class="token punctuation">,</span> enc_len<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> enc_len<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span>
              <span class="token string">&quot;###############AES ENC, mode: %d, ksize %d, src len %d, &quot;</span>
              <span class="token string">&quot;fail###############\\n&quot;</span><span class="token punctuation">,</span>
              m<span class="token punctuation">,</span> aes_key_len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* aes decrypt */</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> aes_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> AES_DIR_DECRYPT<span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> enc_buffer<span class="token punctuation">;</span>
        aes_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> enc_len<span class="token punctuation">;</span>

        ret <span class="token operator">=</span> <span class="token function">do_aes_crypto</span><span class="token punctuation">(</span>aes_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aes decrypt fail %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> aes_src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> aes_src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">printf</span><span class="token punctuation">(</span>
              <span class="token string">&quot;###############AES DEC, mode: %d, ksize %d, src len %d, &quot;</span>
              <span class="token string">&quot;fail###############\\n&quot;</span><span class="token punctuation">,</span>
              m<span class="token punctuation">,</span> aes_key_len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_CTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>enc_buffer<span class="token punctuation">)</span> <span class="token function">hal_free_align</span><span class="token punctuation">(</span>enc_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">printf</span><span class="token punctuation">(</span>
            <span class="token string">&quot;###############AES, mode: %d, ksize %d, src len %d, &quot;</span>
            <span class="token string">&quot;pass###############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
            m<span class="token punctuation">,</span> aes_key_len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> aes_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

out<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_free_align</span><span class="token punctuation">(</span>aes_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> AES_MODE_CTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enc_buffer<span class="token punctuation">)</span> <span class="token function">hal_free_align</span><span class="token punctuation">(</span>enc_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hal_free_align</span><span class="token punctuation">(</span>aes_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">hash_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> <span class="token operator">*</span>dst_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token comment">// uint32_t data_size = 512; SHA_MAX_DIGEST_SIZE</span>
  <span class="token class-name">uint32_t</span> data_size <span class="token operator">=</span> SHA_MAX_DIGEST_SIZE<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> hash_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>hash_digest<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>hash_md5<span class="token punctuation">,</span>    hash_sha1<span class="token punctuation">,</span>   hash_sha224<span class="token punctuation">,</span>
                               hash_sha256<span class="token punctuation">,</span> hash_sha384<span class="token punctuation">,</span> hash_sha512<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">crypto_hash_req_ctx_t</span> <span class="token operator">*</span>hash_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  hash_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">crypto_hash_req_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_hash_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash_ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc hash_ctx fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/*malloc dst buf*/</span>
  dst_data <span class="token operator">=</span>
      <span class="token punctuation">(</span>u8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>data_size<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dst_data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc dst buffer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> HASH_METHOD_MD5<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASH_METHOD_SHA512 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash_src_len<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash_src_len<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">memset</span><span class="token punctuation">(</span>hash_ctx<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_hash_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      hash_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> hash_src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      hash_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> hash_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">memset</span><span class="token punctuation">(</span>dst_data<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> data_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
      hash_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_data<span class="token punctuation">;</span>
      hash_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> i<span class="token punctuation">;</span>
      hash_ctx<span class="token operator">-&gt;</span>md_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> HASH_METHOD_MD5<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> MD5_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> MD5_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> HASH_METHOD_SHA1<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> SHA1_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> SHA1_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> HASH_METHOD_SHA224<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> SHA256_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> SHA224_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> HASH_METHOD_SHA256<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> SHA256_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> SHA256_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> HASH_METHOD_SHA384<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> SHA512_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> SHA384_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> HASH_METHOD_SHA512<span class="token operator">:</span>
          hash_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> SHA512_DIGEST_SIZE<span class="token punctuation">;</span>
          hash_length <span class="token operator">=</span> SHA512_DIGEST_SIZE<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############hash type: %d, src len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>
             hash_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ret <span class="token operator">=</span> <span class="token function">do_hash_crypto</span><span class="token punctuation">(</span>hash_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do_hash_crypto fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>hash_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> hash_digest<span class="token punctuation">[</span>i <span class="token operator">-</span> HASH_METHOD_MD5<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>
                 hash_length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>
            <span class="token string">&quot;############hash type: %d, src len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
            i<span class="token punctuation">,</span> hash_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want digest: &quot;</span><span class="token punctuation">,</span> hash_digest<span class="token punctuation">[</span>i <span class="token operator">-</span> HASH_METHOD_MD5<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>
                hash_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc digest: &quot;</span><span class="token punctuation">,</span> hash_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> hash_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>
            <span class="token string">&quot;############hash type: %d, src len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
            i<span class="token punctuation">,</span> hash_src_len<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

out<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash_ctx <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_free_align</span><span class="token punctuation">(</span>hash_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>dst_data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hal_free_align</span><span class="token punctuation">(</span>dst_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_ARCH_SUN20IW2</span></span>
<span class="token keyword">int</span> <span class="token function">rng_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rng_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> rng_size<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">8100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> key<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span>
      <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> key_len <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
  <span class="token class-name">crypto_rng_req_ctx_t</span> <span class="token operator">*</span>rng_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  rng_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">crypto_rng_req_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rng_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc rng ctx fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/*malloc trng buf*/</span>
  rng_buf <span class="token operator">=</span> <span class="token punctuation">(</span>u8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc rng buffer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CE_FPGA_TEST</span></span>
  <span class="token comment">/* FPGA do not support TRNG, so enable CE_FPGA_TEST when do CE FPGA
   * verification */</span>
  <span class="token comment">/*TRNG test*/</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rng_size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############TRNG, len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rng_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>rng_buf <span class="token operator">=</span> rng_buf<span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>rng_len <span class="token operator">=</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>mode <span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_TRNG*/</span>
    rng_ctx<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>key_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">do_rng_gen</span><span class="token punctuation">(</span>rng_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############TRNG, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;trng:&quot;</span><span class="token punctuation">,</span> rng_buf<span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############TRNG, len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token comment">/*PRNG test*/</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rng_size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############PRNG, len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rng_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>rng_buf <span class="token operator">=</span> rng_buf<span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>rng_len <span class="token operator">=</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>mode <span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_PRNG*/</span>
    rng_ctx<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    rng_ctx<span class="token operator">-&gt;</span>key_len <span class="token operator">=</span> key_len<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">do_rng_gen</span><span class="token punctuation">(</span>rng_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############PRNG, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;prng:&quot;</span><span class="token punctuation">,</span> rng_buf<span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############PRNG, len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span> rng_size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

out<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_ctx<span class="token punctuation">)</span> <span class="token function">hal_free_align</span><span class="token punctuation">(</span>rng_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>rng_buf<span class="token punctuation">)</span> <span class="token function">hal_free_align</span><span class="token punctuation">(</span>rng_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">int</span> <span class="token function">rng_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sun20iw2 crypto engine do not support rng, please use hal_trng.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span> <span class="token function">rsa_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">__aligned</span><span class="token punctuation">(</span>CACHELINE_LEN<span class="token punctuation">)</span> <span class="token class-name">uint8_t</span> dst_buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">crypto_rsa_req_ctx_t</span> <span class="token operator">*</span>rsa_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  rsa_ctx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">hal_malloc_align</span><span class="token punctuation">(</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>CE_ALIGN_SIZE<span class="token punctuation">,</span> CACHELINE_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rsa_ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; malloc rsa ctx fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/*rsa enc and dec*/</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* enc with public key*/</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA ENC/DEC, len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span>
           rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> rsa_keye<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa encrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA ENC, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* dec with private key */</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> rsa_keyd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa decrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA DEC, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA ENC/DEC, len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
           rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* rsa sign/verify sha256 value */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* sign with private key */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN/VERIFY SHA256, len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span>
           rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> rsa_keyd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_sha256_raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_sha256_sign<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa encrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_sha256_sign<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN SHA256, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// goto out;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* verify with public key */</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> rsa_keye<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_sha256_sign<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_sha256<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa decrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_sha256<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA VERIFY SHA256, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN/VERIFY SHA256, len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* rsa sign/verify */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rsa_bitwidth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* sign with private key */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN/VERIFY, len: %d, begin#############\\n&quot;</span><span class="token punctuation">,</span>
           rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> rsa_keyd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_sign_raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_signature<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa encrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_signature<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// goto out;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* verify with public key */</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dst_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">crypto_rsa_req_ctx_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>key_n <span class="token operator">=</span> rsa_keyn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>n_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_e <span class="token operator">=</span> rsa_keye<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>e_len <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>key_d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>d_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>src_buffer <span class="token operator">=</span> rsa_signature<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>src_length <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_buffer <span class="token operator">=</span> dst_buffer<span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>dst_length <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>

    rsa_ctx<span class="token operator">-&gt;</span>dir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rsa_ctx<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">/*CE_METHOD_RSA*/</span>
    rsa_ctx<span class="token operator">-&gt;</span>bitwidth <span class="token operator">=</span> rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">do_rsa_crypto</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;do rsa crypto failed: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_sha256<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rsa decrypt failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;want data: &quot;</span><span class="token punctuation">,</span> rsa_sha256<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ce_dump</span><span class="token punctuation">(</span><span class="token string">&quot;calc data: &quot;</span><span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_buffer<span class="token punctuation">,</span> rsa_ctx<span class="token operator">-&gt;</span>dst_length<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA VERIFY, len: %d, fail#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
             rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;############RSA SIGN/VERIFY, len: %d, pass#############\\n\\n\\n&quot;</span><span class="token punctuation">,</span>
           rsa_bitwidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

out<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span> <span class="token function">hal_free_align</span><span class="token punctuation">(</span>rsa_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">configAPPLICATION_NORMAL_PRIORITY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configAPPLICATION_NORMAL_PRIORITY</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">aes_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">aes_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: aes test failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hash_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">hash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: hash test failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rsa_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">rsa_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: rsa test failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rng_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">rng_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: rng test failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_test_ce</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Parameter number Error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: hal_ce &lt;aes|hash|rsa|rng&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">sunxi_ce_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;aes&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">aes_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">hash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;rsa&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">rsa_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;rng&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">rng_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TaskHandle_t task0<span class="token punctuation">,</span> task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">;</span>
    portBASE_TYPE ret0<span class="token punctuation">,</span> ret1<span class="token punctuation">,</span> ret2<span class="token punctuation">,</span> ret3<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;******************************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* NOTE: please enable CE_NO_IRQ when doing this test *\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;******************************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret0 <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>aes_task<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;aes test&quot;</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                       configAPPLICATION_NORMAL_PRIORITY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret0 <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create aes task failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ret1 <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>hash_task<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;hash test&quot;</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                       configAPPLICATION_NORMAL_PRIORITY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret1 <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create hash task failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ret2 <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>rsa_task<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;rsa test&quot;</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                       configAPPLICATION_NORMAL_PRIORITY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret2 <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create rsa task failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ret3 <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>rng_task<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;rng test&quot;</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                       configAPPLICATION_NORMAL_PRIORITY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret3 <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;create rng task failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Parameter Error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: hal_ce &lt;aes|hash|rsa|rng|all&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sunxi_ce_uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_ce<span class="token punctuation">,</span> hal_ce<span class="token punctuation">,</span> tina rtos ce test demo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("由于测试用例较大，所以将其拆分进入一个头文件内，可以从这里下载："),n("a",k,[s("test_ce.h"),l(t)])]),r])}const _=p(i,[["render",d],["__file","chapter1.html.vue"]]);export{_ as default};
