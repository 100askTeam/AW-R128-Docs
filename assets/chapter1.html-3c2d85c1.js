import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="rtos-多媒体解码" tabindex="-1"><a class="header-anchor" href="#rtos-多媒体解码" aria-hidden="true">#</a> RTOS 多媒体解码</h1><p>介绍 FreeRTOS 下如何使用 rtplayer 的接口来开发播放器应用程序，方便播放器开发人员快速正确地开发，以及播放器测试人员如何根据该文档对 rtplayer 播放器进行验证测试。</p><h3 id="rtplayer-状态图" tabindex="-1"><a class="header-anchor" href="#rtplayer-状态图" aria-hidden="true">#</a> rtplayer 状态图</h3><p>这张状态转换图清晰地描述了 rtlayer 的各个状态，也列举了主要的方法的调用时序，每种方法只能在一些特定的状态下使用，否则会出错。另外，只有在 Prepared、Started、Paused、Play‑backCompleted 这四种状态下可以进行 seekTo() 操作，并且 seekTo() 之后，状态不变。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter1/image1.png" alt=""></p><h4 id="idle-状态" tabindex="-1"><a class="header-anchor" href="#idle-状态" aria-hidden="true">#</a> Idle 状态</h4><p>Idle 状态：当调用 player_init() 创建一个 rtplayer 或者调用了其 reset() 方法时，rtplayer 处于 idle状态。</p><h4 id="initialized-状态" tabindex="-1"><a class="header-anchor" href="#initialized-状态" aria-hidden="true">#</a> Initialized 状态</h4><p>这个状态比较简单，调用 setDateSource_url() 方法就进入 Initialized 状态，表示此时要播放的文件已经设置好了</p><h4 id="preparing-状态" tabindex="-1"><a class="header-anchor" href="#preparing-状态" aria-hidden="true">#</a> Preparing 状态</h4><p>调用 prepare() 函数还没返回或者是调用 prepareAsync() 并且还没收到 RTPLAYER_NOTIFY_PREPARED 这个回调消息的时候就处于 Preparing 状态</p><h4 id="prepared-状态" tabindex="-1"><a class="header-anchor" href="#prepared-状态" aria-hidden="true">#</a> Prepared 状态</h4><p>调用 prepare() 函数已经返回或者是调用 prepareAsync() 并且已经收到 RTPLAYER_NOTIFY_PREPARED 这个回调消息之后的状态就处于 Prepared 状态。在这个状态下说明所有的资源都已经就绪了，调用 start() 函数就可以播放了。</p><h4 id="started-状态" tabindex="-1"><a class="header-anchor" href="#started-状态" aria-hidden="true">#</a> Started 状态</h4><p>rtplayer 一旦 prepare 完成，就可以调用 start() 方法，这样 rtplayer 就处于 Started 状态，这表明 rtplayer 正在播放文件过程中。可以使用 XPlayerIsPlaying() 测试 rtplayer 是否处于了 Started 状态。如果播放完毕，而又设置了循环播放，则 rtplayer 仍然会处于 Started 状态。</p><h4 id="paused-状态" tabindex="-1"><a class="header-anchor" href="#paused-状态" aria-hidden="true">#</a> Paused 状态</h4><p>Started 状态下可以调用 pause_l() 方法暂停 rtplayer，从而进入 Paused 状态，rtplayer 暂停后再次调用 start() 则可以继续 TPlayer 的播放，转到 Started 状态。</p><h4 id="stopped-状态" tabindex="-1"><a class="header-anchor" href="#stopped-状态" aria-hidden="true">#</a> Stopped 状态</h4><p>Started 或者 Paused 状态下均可调用 stop() 停止 rtplayer，而处于 Stop 状态的 rtplayer 要想重新播放，需要通过 prepareAsync() 和 prepare() 回到先前的 Prepared 状态重新开始才可以。</p><h4 id="playbackcompleted-状态" tabindex="-1"><a class="header-anchor" href="#playbackcompleted-状态" aria-hidden="true">#</a> PlaybackCompleted 状态</h4><p>文件正常播放完毕，而又没有设置循环播放的话就进入该状态，并且会通过 RTPLAYER_NOTIFY_PLAYBACK_COMPLETE 这个消息回调给应用。此时可以调用 start() 方法重新从头播放文件，也可以 stop() 停止 rtplayer，或者也可以 seekTo() 来重新定位播放位置。</p><h4 id="error-状态" tabindex="-1"><a class="header-anchor" href="#error-状态" aria-hidden="true">#</a> Error 状态</h4><p>由于某种原因 rtplayer 出现了错误，就会进入该状态，并且会通过 RTPLAYER_NOTIFY_MEDIA_ERROR 这个消息回调给应用。如果 rtplayer 进入了 Error 状态，可以通过调用 reset() 来恢复，使得 rtplayer 重新返回到 Idle 状态。</p><h4 id="end-状态" tabindex="-1"><a class="header-anchor" href="#end-状态" aria-hidden="true">#</a> End 状态</h4><p>通过 plater_deinit() 的方法可以进入 End 状态，只要 rtplayer 不再被使用，就应当尽快将其 destroy 掉。</p><h2 id="rtplayer-层接口" tabindex="-1"><a class="header-anchor" href="#rtplayer-层接口" aria-hidden="true">#</a> rtplayer 层接口</h2><h3 id="创建一个-rtplayer" tabindex="-1"><a class="header-anchor" href="#创建一个-rtplayer" aria-hidden="true">#</a> 创建一个 rtplayer</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">player_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>成功返回 rtplayer 的指针，失败返回 NULL</li></ul><h3 id="销毁一个-rtplayer" tabindex="-1"><a class="header-anchor" href="#销毁一个-rtplayer" aria-hidden="true">#</a> 销毁一个 rtplayer</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">player_deinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="设置-rtplayer-的消息回调函数" tabindex="-1"><a class="header-anchor" href="#设置-rtplayer-的消息回调函数" aria-hidden="true">#</a> 设置 rtplayer 的消息回调函数</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">registerCallback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> userData<span class="token punctuation">,</span> <span class="token class-name">player_callback_t</span> fn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针</li><li>userData: 回调消息处理对象</li><li>fn: 回调消息处理函数指针，需要由应用实现</li></ul><p>返回值：</p><ul><li>无</li></ul><blockquote><p>创建完 rtplayer 播放器之后，就要调用该函数设置回调消息处理函数。</p></blockquote><h3 id="设置播放文件的-url" tabindex="-1"><a class="header-anchor" href="#设置播放文件的-url" aria-hidden="true">#</a> 设置播放文件的 url</h3><p>可以是本地文件也可以是网络源</p><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">setDataSource_url</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> userData<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> url<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针</li><li>userData: 回调消息处理对象</li><li>url: 需要播放的文件的 url</li><li>id: 回调时使用的播放索引, 为 0 即可</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1 或错误码</li></ul><h3 id="解析文件头部信息-获取元数据" tabindex="-1"><a class="header-anchor" href="#解析文件头部信息-获取元数据" aria-hidden="true">#</a> 解析文件头部信息，获取元数据</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1 或错误码</li></ul><h3 id="异步解析文件头部信息-获取元数据" tabindex="-1"><a class="header-anchor" href="#异步解析文件头部信息-获取元数据" aria-hidden="true">#</a> 异步解析文件头部信息，获取元数据</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">prepareAsync</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><blockquote><p>该函数是非阻塞函数，需要等到 RTPLAYER_NOTIFY_P‑ REPARED 消息回调之后才能调 start() 函数进行播放，而且 start() 函数不能在回调函数中调用</p></blockquote><h3 id="开始播放" tabindex="-1"><a class="header-anchor" href="#开始播放" aria-hidden="true">#</a> 开始播放</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h3 id="暂停播放" tabindex="-1"><a class="header-anchor" href="#暂停播放" aria-hidden="true">#</a> 暂停播放</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token class-name">status_t</span> <span class="token function">pause_l</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h3 id="停止播放" tabindex="-1"><a class="header-anchor" href="#停止播放" aria-hidden="true">#</a> 停止播放</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token class-name">status_t</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h3 id="重置播放器" tabindex="-1"><a class="header-anchor" href="#重置播放器" aria-hidden="true">#</a> 重置播放器</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><blockquote><p>在任何状态下都可以调用该函数，每次播放不同的音频之前，都需要调用该函数重置播放器，另外，一般收到 RTPLAYER_NOTIFY_MEDIA_ERROR 这个消息的时候，也需要通过调用该函数来重置播放器。但是不能在回调函数中调用该函数，否则会出现死锁</p></blockquote><h3 id="跳播" tabindex="-1"><a class="header-anchor" href="#跳播" aria-hidden="true">#</a> 跳播</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">seekTo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">int</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针</li><li>sec: 跳播的位置，单位是：s</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h3 id="获取当前播放的位置" tabindex="-1"><a class="header-anchor" href="#获取当前播放的位置" aria-hidden="true">#</a> 获取当前播放的位置</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">getCurrentPosition</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li><li>sec: 存放当前播放的位置值，单位：s</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h3 id="获取播放的文件总时长" tabindex="-1"><a class="header-anchor" href="#获取播放的文件总时长" aria-hidden="true">#</a> 获取播放的文件总时长</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">getDuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li><li>sec: 存储文件总时长，单位：s</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><blockquote><p>需要在 prepared 状态之后才可以调用该函数</p></blockquote><h3 id="获取播放的文件信息" tabindex="-1"><a class="header-anchor" href="#获取播放的文件信息" aria-hidden="true">#</a> 获取播放的文件信息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>MediaInfo<span class="token operator">*</span> <span class="token function">getMediaInfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><blockquote><p>需要在 prepared 状态之后才可以调用该函数</p></blockquote><h3 id="设置循环播放模式" tabindex="-1"><a class="header-anchor" href="#设置循环播放模式" aria-hidden="true">#</a> 设置循环播放模式</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">status_t</span> <span class="token function">setLooping</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">int</span> loop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>handle: 通过 player_init() 函数创建的 rtplayer 指针;</li><li>loop:1 表示单曲循环，0 表示不会单曲循环</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1</li></ul><h2 id="xplayer-层播放接口" tabindex="-1"><a class="header-anchor" href="#xplayer-层播放接口" aria-hidden="true">#</a> XPlayer 层播放接口</h2><h3 id="创建一个-xplayer" tabindex="-1"><a class="header-anchor" href="#创建一个-xplayer" aria-hidden="true">#</a> 创建一个 XPlayer</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>XPlayer<span class="token operator">*</span> <span class="token function">XPlayerCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>成功: XPlayer 指针; 失败: NULL</li></ul><h3 id="设置-xplayer-的回调通知" tabindex="-1"><a class="header-anchor" href="#设置-xplayer-的回调通知" aria-hidden="true">#</a> 设置 XPlayer 的回调通知</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerSetNotifyCallback</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> XPlayerNotifyCallback notifier<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> pUserData<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>P：通过 XPlayerCreate 创建的 Xplayer 指针</li><li>notifier：回调通知</li><li>pUserData：应用程序传下来的自定义数据</li></ul><p>返回值：</p><ul><li>成功：XPlayer 指针；失败：NULL</li></ul><blockquote><p>Xplayer 将接收来自下层的回调通知，进行相应的操作</p></blockquote><h3 id="创建指向音频播放设备管理模块的指针-用于播放音频" tabindex="-1"><a class="header-anchor" href="#创建指向音频播放设备管理模块的指针-用于播放音频" aria-hidden="true">#</a> 创建指向音频播放设备管理模块的指针，用于播放音频</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>SoundCtrl<span class="token operator">*</span> <span class="token function">RTSoundDeviceCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> card<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>card:声卡序号0：default;1：sw:audio1;2:sw:audio2;3:sw:audio3;4:sw:audio4;5:sw:audio5</li></ul><p>返回值：</p><ul><li>成功：音频播放设备管理模块的指针；失败：NULL</li></ul><h3 id="创建指向音频播放设备管理模块的指针-用于播放音频-1" tabindex="-1"><a class="header-anchor" href="#创建指向音频播放设备管理模块的指针-用于播放音频-1" aria-hidden="true">#</a> 创建指向音频播放设备管理模块的指针，用于播放音频</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerSetDataSourceUrl</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pUrl<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> httpService<span class="token punctuation">,</span> <span class="token keyword">const</span> CdxKeyedVectorT<span class="token operator">*</span> pHeaders<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>pUrl：url 地址</li><li>httpService：服务器信息</li><li>pHeaders：头文件信息</li></ul><p>返回值：</p><ul><li>返回值: 成功：0；失败：‑1 或线程响应设置数据源命令的返回值或线程响应 xplayer prepare 命令的返回值</li></ul><blockquote><p>调用说明: 发送 SetDataSource 命令，获取需要播放的音频数据内容</p></blockquote><h3 id="将-xplayer-置为准备状态-解析头部信息-获取元数据" tabindex="-1"><a class="header-anchor" href="#将-xplayer-置为准备状态-解析头部信息-获取元数据" aria-hidden="true">#</a> 将 XPlayer 置为准备状态, 解析头部信息，获取元数据</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerPrepare</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 Xplayer 指针</li></ul><p>返回值：</p><ul><li>成功：线程响应异步 Prepare 命令的返回值；失败：NULL</li></ul><blockquote><p>该函数是阻塞函数，调用完返回之后就进入了 Prepared 状态，此时可调 XPlayerStart() 函数进行播放</p></blockquote><h3 id="将-xplayer-置为异步准备状态" tabindex="-1"><a class="header-anchor" href="#将-xplayer-置为异步准备状态" aria-hidden="true">#</a> 将 XPlayer 置为异步准备状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerPrepareAsync</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功：线程响应异步 Prepare 命令的返回值；失败：NULL</li></ul><blockquote><p>网络播放源一般采用 PrepareAsync，而不是 Prepare 命令，PrepareAsync 命令的返回值为 0 时说明响应成功，播放器准备工作已经完成可以开始播放，为‑1 时说明响应失败</p></blockquote><h3 id="将-xplayer-置为启动状态" tabindex="-1"><a class="header-anchor" href="#将-xplayer-置为启动状态" aria-hidden="true">#</a> 将 XPlayer 置为启动状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerStart</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功：线程响应 start 命令的返回值；失败：NULL</li></ul><blockquote><p>Start 命令的返回值为 0 时说明响应成功，为‑1 时说明响应失败</p></blockquote><h3 id="将-xplayer-置为暂停状态" tabindex="-1"><a class="header-anchor" href="#将-xplayer-置为暂停状态" aria-hidden="true">#</a> 将 XPlayer 置为暂停状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerPause</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功：线程响应 pause 命令的返回值；失败：NULL</li></ul><blockquote><p>在 XPlayer 处于 start 状态时可调用此接口，Pause 命令的返回值为 0 时说明响应成功，为‑1 时说明响应失败</p></blockquote><h3 id="将-xplayer-置为停止状态" tabindex="-1"><a class="header-anchor" href="#将-xplayer-置为停止状态" aria-hidden="true">#</a> 将 XPlayer 置为停止状态</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerStop</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功：返回 0；失败：返回‑1</li></ul><h3 id="重置-xplayer" tabindex="-1"><a class="header-anchor" href="#重置-xplayer" aria-hidden="true">#</a> 重置 XPlayer</h3><p>将相关变量复位，并销毁各模块，如音频解码模块、音频解码数据接收模块等</p><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerReset</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功：线程响应 Reset 命令的返回值；失败：NULL</li></ul><blockquote><p>Reset 命令的返回值为 0 时说明响应成功，为‑1 时说明响应失败</p></blockquote><h3 id="获取节目时长" tabindex="-1"><a class="header-anchor" href="#获取节目时长" aria-hidden="true">#</a> 获取节目时长</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerGetDuration</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>msec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 Xplayer 指针</li><li>msec：保存节目时长</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><blockquote><p>在 XPlayer 处于 PREPARED、STARTED、PAUSED、STOPPED 或 COMPLETE 状态下才可调用此接口，否则操作无效</p></blockquote><h3 id="seek-到给定的时间点" tabindex="-1"><a class="header-anchor" href="#seek-到给定的时间点" aria-hidden="true">#</a> Seek 到给定的时间点</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerSeekTo</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> nSeekTimeMs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 Xplayer 指针</li><li>nSeekTimeMs：跳转的时间点</li></ul><p>返回值：</p><ul><li>成功：线程响应 Seek 命令的返回值；失败：NULL</li></ul><blockquote><p>如果跳转前播放处于暂停状态，则跳转后将保持在暂停状态</p></blockquote><h3 id="获取媒体文件的总时长" tabindex="-1"><a class="header-anchor" href="#获取媒体文件的总时长" aria-hidden="true">#</a> 获取媒体文件的总时长</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerGetDuration</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>msec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li><li>msec：保存媒体文件的总时长</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><blockquote><p>需要在 prepared 状态之后才可以调用该函数</p></blockquote><h3 id="获取当前的播放时间点-即播放位置" tabindex="-1"><a class="header-anchor" href="#获取当前的播放时间点-即播放位置" aria-hidden="true">#</a> 获取当前的播放时间点（即播放位置）</h3><p>在 XPlayer 处于 PREPARED、STARTED、PAUSED、STOPPED 或 COMPLETE 状态下才可调用此接口，否则操作无效，在 complete 状态下，可能会调用 prepare 方法并更改媒体信息，获取的播放时间以 ms 为单位</p><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerGetCurrentPosition</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> msec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li><li>msec：保存当前的播放时间</li></ul><p>返回值：</p><ul><li>成功：0；失败：‑1</li></ul><h3 id="获取媒体信息" tabindex="-1"><a class="header-anchor" href="#获取媒体信息" aria-hidden="true">#</a> 获取媒体信息</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>MediaInfo<span class="token operator">*</span> <span class="token function">XPlayerGetMediaInfo</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>成功返回 0，失败返回‑1。如果失败，则 mediaInfo 指针为 NULL</li></ul><blockquote><p>需要在 prepared 状态之后才可以调用该函数</p></blockquote><h3 id="设置循环播放模式-1" tabindex="-1"><a class="header-anchor" href="#设置循环播放模式-1" aria-hidden="true">#</a> 设置循环播放模式</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerSetLooping</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> loop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li><li>loop: 1: 表示单曲循环模式；0：表示不会循环</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="查询是否正在播放" tabindex="-1"><a class="header-anchor" href="#查询是否正在播放" aria-hidden="true">#</a> 查询是否正在播放</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">XPlayerIsPlaying</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>1：正在播放；0：未播放</li></ul><h3 id="销毁一个-xplayer" tabindex="-1"><a class="header-anchor" href="#销毁一个-xplayer" aria-hidden="true">#</a> 销毁一个 XPlayer</h3><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">XPlayerDestroy</span><span class="token punctuation">(</span>XPlayer<span class="token operator">*</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>p：通过 XPlayerCreate 创建的 XPlayer 指针</li></ul><p>返回值：</p><ul><li>无</li></ul><h2 id="播放器开发示例" tabindex="-1"><a class="header-anchor" href="#播放器开发示例" aria-hidden="true">#</a> 播放器开发示例</h2><ol><li>player_init() 创建一个播放器</li><li>registerCallback() 设置消息回调函数</li><li>setDataSource_url() 设置 url</li><li>prepare() 或 prepareAsync() 解析头部信息，获取元数据，并根据元数据的信息初始化对应的解码器</li><li>start() 播放 (注: 如果是用 prepareAsync() 函数，则需要等到 RTPLAYER_NOTIFY_PREPARED 消息回调之后才可以调用 start() 函数进行播放)</li><li>如果需要跳播，则可以调用 seekTo() 函数</li><li>如果需要暂停，则调用 pause_l() 函数进行暂停</li><li>如果需要停止，则可以调用 stop() 或 reset() 函数进行停止 (注：建议用 reset() 函数进行停止，因为任何状态下都可以调用 reset() 函数)</li><li>如果需要播放下一个或其他的，则可以先调用 reset() 函数使播放器进入 idle 状态，然后再重复 (3)(4)(5) 的步骤</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FreeRTOS.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;task.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;portable.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mqueue.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;FreeRTOS_POSIX/utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;rtplayer.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xplayer.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAUSE_CMD</span>           <span class="token char">&#39;P&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PING_CMD</span>            <span class="token char">&#39;p&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STOP_CMD</span>            <span class="token char">&#39;S&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEEK_TO_CMD</span>         <span class="token char">&#39;s&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEEK_TO_CMD2</span>        <span class="token char">&#39;j&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BACKGROUND_CMD</span>      <span class="token char">&#39;b&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_BUFFER_CMD</span>     <span class="token char">&#39;B&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUIT_CMD</span>            <span class="token char">&#39;q&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOOP_CMD</span>            <span class="token char">&#39;l&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_DURATION_CMD</span>    <span class="token char">&#39;G&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GET_POSITION_CMD</span>    <span class="token char">&#39;g&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HELP_CMD</span>            <span class="token char">&#39;h&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INFO_CMD</span>            <span class="token char">&#39;i&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">REPLAY_CMD</span>          <span class="token char">&#39;r&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RETRY_CMD</span>           <span class="token expression"><span class="token number">256</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USE_PREPARE_ASYNC</span> <span class="token expression"><span class="token number">0</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGD</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      </span><span class="token comment">//printf(&quot;[PLAYER_DBG] &lt;%s : %d&gt; &quot; msg &quot;\\n&quot;, __func__, __LINE__, ##arg)</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGI</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      </span><span class="token comment">//printf(&quot;[PLAYER_INFO] &lt;%s : %d&gt; &quot; msg &quot;\\n&quot;, __func__, __LINE__, ##arg)</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGW</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[PLAYER_WRN] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGE</span><span class="token expression"><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> arg<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">&quot;[PLAYER_ERR] &lt;%s : %d&gt; &quot;</span> <span class="token expression">msg </span><span class="token string">&quot;\\n&quot;</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">arg<span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DemoPlayerContext</span>
<span class="token punctuation">{</span>
    RTPlayer<span class="token operator">*</span> mRTplayer<span class="token punctuation">;</span>
    <span class="token class-name">sem_t</span> mPreparedSem<span class="token punctuation">;</span>
    <span class="token class-name">mqd_t</span> mRTplayerMq<span class="token punctuation">;</span>
    <span class="token class-name">pthread_t</span> mThreadId<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pUrl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mSeekable<span class="token punctuation">;</span>
    <span class="token keyword">char</span> isPlayingFlag<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mError<span class="token punctuation">;</span>
    <span class="token keyword">int</span> inputMode<span class="token punctuation">;</span>
    <span class="token keyword">int</span> isSetLoop<span class="token punctuation">;</span>
    <span class="token keyword">char</span> quitFlag<span class="token punctuation">;</span><span class="token comment">//no_shell_input mode quitFlag</span>
    <span class="token keyword">int</span> testMode<span class="token punctuation">;</span>
    MediaInfo<span class="token operator">*</span> mMediaInfo<span class="token punctuation">;</span>
    <span class="token keyword">int</span> SoundCard<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DemoPlayerContext<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DemoPlayerMsg</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DemoPlayerMsg<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INVALID_MQD</span>     <span class="token expression"><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token class-name">mqd_t</span> <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MODE</span>    <span class="token expression"><span class="token number">0600</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcRTplayerMqName <span class="token operator">=</span> <span class="token string">&quot;/rtplayerMq&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">mqd_t</span> mRTplayerMq <span class="token operator">=</span> INVALID_MQD<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> mRTplayerUserInput <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mq_attr</span> xRTplayerMqAttr <span class="token operator">=</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>mq_flags   <span class="token operator">=</span>   <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mq_maxmsg  <span class="token operator">=</span>   <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mq_msgsize <span class="token operator">=</span>   <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DemoPlayerMsg<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mq_curmsgs <span class="token operator">=</span>   <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* This is a simple audio player, when it is started, you can input commands to tell\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* what you want it to do.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* Usage: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   tplayer_demo /data/test.mp3  : this means play test.mp3\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   P  :this will Pause if in playing status,or Play in paused status \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   S  :this means Stop \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   s  :this means seek to 10s \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   B  :show buffer \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   b  :this means player will run in the background \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   q  :this means quit the player \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   l  :this means loop play \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   G :this means Get  duration \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   g :this means get  position \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   i :this means show media info \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   h :this means show the help information \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*   r : replay the current audio\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rtplayer_clear_cmd</span><span class="token punctuation">(</span><span class="token class-name">mqd_t</span> mq<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> cur<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> abstime<span class="token punctuation">;</span>
    <span class="token function">clock_gettime</span><span class="token punctuation">(</span> CLOCK_REALTIME<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cur <span class="token punctuation">)</span><span class="token punctuation">;</span>
    delay<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    delay<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token function">UTILS_TimespecAdd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cur<span class="token punctuation">,</span> <span class="token operator">&amp;</span>delay<span class="token punctuation">,</span> <span class="token operator">&amp;</span>abstime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DemoPlayerMsg msg<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">mq_timedreceive</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>abstime<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rtplayer_send_cmd</span><span class="token punctuation">(</span><span class="token class-name">mqd_t</span> mq<span class="token punctuation">,</span> <span class="token keyword">int</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    DemoPlayerMsg pmsg <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">,</span> data<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> tsn<span class="token punctuation">,</span> ts<span class="token punctuation">;</span>
    <span class="token function">clock_gettime</span><span class="token punctuation">(</span>CLOCK_REALTIME<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tsn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UTILS_TimespecAddNanoseconds</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tsn<span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token function">mq_timedsend</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pmsg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pmsg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;send cmd %c,%d failed!&quot;</span><span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">rtplayer_send_cmd_force</span><span class="token punctuation">(</span><span class="token class-name">mqd_t</span> mq<span class="token punctuation">,</span> <span class="token keyword">int</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> try_times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    DemoPlayerMsg pmsg <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">,</span> data<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> tsn<span class="token punctuation">,</span> ts<span class="token punctuation">;</span>
    <span class="token keyword">int</span> status<span class="token punctuation">;</span>
try_send<span class="token operator">:</span>
    <span class="token function">clock_gettime</span><span class="token punctuation">(</span>CLOCK_REALTIME<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tsn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UTILS_TimespecAddNanoseconds</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tsn<span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    status <span class="token operator">=</span> <span class="token function">mq_timedsend</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pmsg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pmsg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>
        try_times<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>try_times<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;send cmd %c,%d failed, retry...&quot;</span><span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> try_send<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>try_times<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            DemoPlayerMsg tmp<span class="token punctuation">;</span>
            <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;send cmd %c,%d failed, retry...&quot;</span><span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">clock_gettime</span><span class="token punctuation">(</span>CLOCK_REALTIME<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tsn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">UTILS_TimespecAddNanoseconds</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tsn<span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
            status <span class="token operator">=</span> <span class="token function">mq_timedreceive</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;mq_receive fail %d&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> fail_exit<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">LOGW</span><span class="token punctuation">(</span><span class="token string">&quot;drop: %c, %d&quot;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> try_send<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">goto</span> fail_exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
fail_exit<span class="token operator">:</span>
    <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;send cmd %c,%d failed!\\n&quot;</span><span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> pmsg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">callbackFromRTplayer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> userData<span class="token punctuation">,</span><span class="token keyword">int</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> ext1<span class="token punctuation">,</span> <span class="token keyword">int</span> ext2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">RTplayerThread</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    DemoPlayerContext<span class="token operator">*</span> demoPlayer <span class="token operator">=</span> <span class="token punctuation">(</span>DemoPlayerContext<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
    <span class="token keyword">char</span> quitFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>inputMode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>quitFlag<span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;player finsh, quit the rtplayer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mRTplayerMq <span class="token operator">=</span> INVALID_MQD<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC</span></span>
            <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token function">player_deinit</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>quitFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> cRxed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        DemoPlayerMsg msg<span class="token punctuation">;</span>
        <span class="token class-name">ssize_t</span> status<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token operator">!=</span>INVALID_MQD<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ssize_t</span> status <span class="token operator">=</span> <span class="token function">mq_receive</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token operator">&lt;=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;mq_receive fail %d&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;receive %c,%d\\n&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cRxed <span class="token operator">=</span> msg<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>
            data <span class="token operator">=</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            cRxed <span class="token operator">=</span> QUIT_CMD<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>cRxed<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> PAUSE_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pause the rtplayer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">pause_l</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;play the rtplayer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">start</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> STOP_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stop the rtplayer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">stop</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> SEEK_TO_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rtplayer seek to 10 second\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">seekTo</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> SEEK_TO_CMD2<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rtplayer seek to %d second\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">seekTo</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> QUIT_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;quit the rtplayer\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mRTplayerMq <span class="token operator">=</span> INVALID_MQD<span class="token punctuation">;</span>
                <span class="token comment">//mq_close(demoPlayer-&gt;mRTplayerMq);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC</span></span>
                <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
                <span class="token function">player_deinit</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                quitFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> LOOP_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;let the rtplayer loop play\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                demoPlayer<span class="token operator">-&gt;</span>isSetLoop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">setLooping</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> GET_DURATION_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get the audio duration\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> duration<span class="token punctuation">;</span>
                <span class="token function">getDuration</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token operator">&amp;</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;duration:%d s\\n&quot;</span><span class="token punctuation">,</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> GET_POSITION_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;get the current position\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> position<span class="token punctuation">;</span>
                <span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token operator">&amp;</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;current position:%d s\\n&quot;</span><span class="token punctuation">,</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> HELP_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;show the help information\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> INFO_CMD<span class="token operator">:</span>
        <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* show media information:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MediaInfo<span class="token operator">*</span> mi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        demoPlayer<span class="token operator">-&gt;</span>mMediaInfo <span class="token operator">=</span> <span class="token function">getMediaInfo</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mMediaInfo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        mi <span class="token operator">=</span> demoPlayer<span class="token operator">-&gt;</span>mMediaInfo<span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* file size = %lld KB\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>nFileSize<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* duration = %lld ms\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>nDurationMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* bitrate = %d Kbps\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>nBitrate<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* container type = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>eContainerType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* audio stream num = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>nAudioStreamNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>mi<span class="token operator">-&gt;</span>pAudioStreamInfo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* audio codec tpye = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>pAudioStreamInfo<span class="token operator">-&gt;</span>eCodecFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* audio channel num = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>pAudioStreamInfo<span class="token operator">-&gt;</span>nChannelNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* audio BitsPerSample = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>pAudioStreamInfo<span class="token operator">-&gt;</span>nBitsPerSample<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* audio sample rate  = %d\\n&quot;</span><span class="token punctuation">,</span>mi<span class="token operator">-&gt;</span>pAudioStreamInfo<span class="token operator">-&gt;</span>nSampleRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SHOW_BUFFER_CMD<span class="token operator">:</span>
        <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;* show buffer information:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">player_show_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
            <span class="token keyword">case</span> REPLAY_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;replay %s\\n&quot;</span><span class="token punctuation">,</span> demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>testMode<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test mode: destroy &amp; create instead of reset\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">player_deinit</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    demoPlayer<span class="token operator">-&gt;</span>mRTplayer <span class="token operator">=</span> <span class="token punctuation">(</span>RTPlayer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">player_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;demoPlayer.mRTplayer = %p\\n&quot;</span><span class="token punctuation">,</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;init rtplayer fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        quitFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token function">registerCallback</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">,</span> callbackFromRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                    <span class="token function">reset</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ret <span class="token operator">=</span> <span class="token function">setDataSource_url</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">,</span> demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;setDataSource_url failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                ret <span class="token operator">=</span> <span class="token function">prepare</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;prepare failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">start</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>isSetLoop<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                    <span class="token function">setLooping</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> RETRY_CMD<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> position <span class="token operator">=</span> data<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token operator">&amp;</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;retry %s\\n&quot;</span><span class="token punctuation">,</span> demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>testMode<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test mode: destroy &amp; create instead of reset\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">player_deinit</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    demoPlayer<span class="token operator">-&gt;</span>mRTplayer <span class="token operator">=</span> <span class="token punctuation">(</span>RTPlayer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">player_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;demoPlayer.mRTplayer = %p\\n&quot;</span><span class="token punctuation">,</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;init rtplayer fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        quitFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token function">registerCallback</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">,</span> callbackFromRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                    <span class="token function">reset</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ret <span class="token operator">=</span> <span class="token function">setDataSource_url</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">,</span> demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;setDataSource_url failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">rtplayer_send_cmd_force</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">,</span> RETRY_CMD<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                ret <span class="token operator">=</span> <span class="token function">prepare</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;prepare failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">rtplayer_send_cmd_force</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">,</span> RETRY_CMD<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">start</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">//seekTo(demoPlayer-&gt;mRTplayer, position);</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>isSetLoop<span class="token punctuation">)</span>
                    <span class="token function">setLooping</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token function">LOGW</span><span class="token punctuation">(</span><span class="token string">&quot;warning: unknown command,cmd = %d&quot;</span><span class="token punctuation">,</span>cRxed<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>quitFlag<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">callbackFromRTplayer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> userData<span class="token punctuation">,</span><span class="token keyword">int</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> ext1<span class="token punctuation">,</span> <span class="token keyword">int</span> ext2<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;call back from RTplayer,msg = %d,id = %d,ext1 = %d,ext2 = %d\\n&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>id<span class="token punctuation">,</span>ext1<span class="token punctuation">,</span>ext2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    DemoPlayerContext<span class="token operator">*</span> pDemoPlayer <span class="token operator">=</span> <span class="token punctuation">(</span>DemoPlayerContext<span class="token operator">*</span><span class="token punctuation">)</span>userData<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_PREPARED<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RTPLAYER_NOTIFY_PREPARED:has prepared.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC           </span></span>
            <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pDemoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pDemoPlayer<span class="token operator">-&gt;</span>mPreparedFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_PLAYBACK_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RTPLAYER_NOTIFY_PLAYBACK_COMPLETE:play complete\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pDemoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pDemoPlayer<span class="token operator">-&gt;</span>inputMode<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        pDemoPlayer<span class="token operator">-&gt;</span>quitFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_SEEK_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RTPLAYER_NOTIFY_SEEK_COMPLETE:seek ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_MEDIA_ERROR<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ext1<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> RTPLAYER_MEDIA_ERROR_UNKNOWN<span class="token operator">:</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erro type:TPLAYER_MEDIA_ERROR_UNKNOWN\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> RTPLAYER_MEDIA_ERROR_UNSUPPORTED<span class="token operator">:</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erro type:TPLAYER_MEDIA_ERROR_UNSUPPORTED\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> RTPLAYER_MEDIA_ERROR_IO<span class="token operator">:</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;erro type:TPLAYER_MEDIA_ERROR_IO\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RTPLAYER_NOTIFY_MEDIA_ERROR\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pDemoPlayer<span class="token operator">-&gt;</span>mError <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC            </span></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pDemoPlayer<span class="token operator">-&gt;</span>mPreparedFlag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recive err when preparing\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pDemoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> pDemoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token operator">!=</span>INVALID_MQD <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">rtplayer_send_cmd_force</span><span class="token punctuation">(</span>pDemoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">,</span> RETRY_CMD<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;io error, mqueue not exist\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_NOT_SEEKABLE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            pDemoPlayer<span class="token operator">-&gt;</span>mSeekable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;info: media source is unseekable.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> RTPLAYER_NOTIFY_DETAIL_INFO<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>ext2<span class="token punctuation">;</span>
            <span class="token comment">//printf(&quot;detail info: %d\\n&quot;, flag);</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;warning: unknown callback from RTplayer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">cmd_rtplayer_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> inputMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> testMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/*
    printf(&quot;argc = %d\\n&quot;,argc);
    for(int i=0; i &lt; argc;i++){
        printf(&quot;argv[%d]=%s\\n&quot;,i,argv[i]);
    }
    */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rtplayer source:%s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">&quot;no_shell_input&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;no_shell_input&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            argc<span class="token operator">--</span><span class="token punctuation">;</span>
            inputMode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token string">&quot;test_mode&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">&quot;test_mode&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            argc<span class="token operator">--</span><span class="token punctuation">;</span>
            testMode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGW</span><span class="token punctuation">(</span><span class="token string">&quot;the parameter is error,usage is as following:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">showHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC</span></span>
    <span class="token keyword">int</span> waitErr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    DemoPlayerContext<span class="token operator">*</span> demoPlayer <span class="token operator">=</span> <span class="token punctuation">(</span>DemoPlayerContext<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DemoPlayerContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;malloc DemoPlayerContext fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DemoPlayerContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>mSeekable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq <span class="token operator">=</span> INVALID_MQD<span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>inputMode <span class="token operator">=</span> inputMode<span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>testMode <span class="token operator">=</span> testMode<span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>quitFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>mMediaInfo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;url error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_url_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    demoPlayer<span class="token operator">-&gt;</span>pUrl <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;pUrl malloc fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_url_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC    </span></span>
     <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    demoPlayer<span class="token operator">-&gt;</span>mRTplayer <span class="token operator">=</span> <span class="token punctuation">(</span>RTPlayer<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">player_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">&quot;demoPlayer.mRTplayer = %p&quot;</span><span class="token punctuation">,</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;init rtplayer fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_init_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">registerCallback</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">,</span> callbackFromRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">status_t</span> ret <span class="token operator">=</span> <span class="token function">setDataSource_url</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">,</span>demoPlayer<span class="token punctuation">,</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;set DataSource url fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_prepare_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC</span></span>
    demoPlayer<span class="token operator">-&gt;</span>mPreparedFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">prepareAsync</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;TPlayerPrepareAsync() return fail.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;preparing...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> t<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    waitErr <span class="token operator">=</span> <span class="token function">sem_timedwait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>waitErr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;prepare timeout,has wait %d s\\n&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>tv_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_prepare_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">.</span>mError <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;prepare fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_prepare_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;prepared ok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    ret <span class="token operator">=</span> <span class="token function">prepare</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;prepare fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> rtp_prepare_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">start</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    demoPlayer<span class="token operator">-&gt;</span>isPlayingFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> mRTplayerMq<span class="token operator">==</span>INVALID_MQD <span class="token punctuation">)</span><span class="token punctuation">{</span>
        mRTplayerMq <span class="token operator">=</span> <span class="token function">mq_open</span><span class="token punctuation">(</span> pcRTplayerMqName<span class="token punctuation">,</span> O_CREAT <span class="token operator">|</span> O_RDWR<span class="token punctuation">,</span> DEFAULT_MODE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>xRTplayerMqAttr <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mRTplayerMq<span class="token operator">==</span>INVALID_MQD<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;mq_open fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq <span class="token operator">=</span> mRTplayerMq<span class="token punctuation">;</span>
    <span class="token function">rtplayer_clear_cmd</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span>
    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sched_param</span> sched<span class="token punctuation">;</span>
    sched<span class="token punctuation">.</span>sched_priority <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">pthread_attr_setschedparam</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sched<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> PTHREAD_CREATE_DETACHED<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mThreadId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> RTplayerThread<span class="token punctuation">,</span> demoPlayer<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">&quot;pthread_create failed, quit the rtplayer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mRTplayerMq <span class="token operator">=</span> INVALID_MQD<span class="token punctuation">;</span>
        <span class="token comment">//mq_close(demoPlayer-&gt;mRTplayerMq);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">USE_PREPARE_ASYNC</span></span>
        <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>demoPlayer<span class="token operator">-&gt;</span>mPreparedSem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token keyword">goto</span> rtp_prepare_failed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">pthread_setname_np</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mThreadId<span class="token punctuation">,</span> <span class="token string">&quot;RTplayerThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>inputMode<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> rtp_succeed<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">char</span> cRxed <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cRxed<span class="token operator">==</span>BACKGROUND_CMD<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;shell input exit, rtplayer will run in the background\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">rtplayer_send_cmd</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayerMq<span class="token punctuation">,</span> cRxed<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cRxed<span class="token operator">==</span>QUIT_CMD<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
rtp_succeed<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
rtp_prepare_failed<span class="token operator">:</span>
    <span class="token function">player_deinit</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>mRTplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
rtp_init_failed<span class="token operator">:</span>
    <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token operator">-&gt;</span>pUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
rtp_url_failed<span class="token operator">:</span>
    <span class="token function">free</span><span class="token punctuation">(</span>demoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
rtp_failed<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_rtplayer_test<span class="token punctuation">,</span> rtplayer_test<span class="token punctuation">,</span> test the rtplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_rtplayer_controller</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mRTplayerMq<span class="token operator">==</span>INVALID_MQD<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;mRTplayerMq = INVALID_MQD!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usage:rtpc &lt;cmd&gt; [data]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rtplayer_send_cmd</span><span class="token punctuation">(</span>mRTplayerMq<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_rtplayer_controller<span class="token punctuation">,</span> rtpc<span class="token punctuation">,</span> control the rtplayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li>目前 rtplayer/xplayer 仅支持音频解码，且不支持对视频文件进行解封装，因此 rtplayer 播放器应用只支持音频文件的播放。</li><li><code>void registerCallback(void* handle, void* userData, player_callback_t fn)</code> 函数必须要调用，而且 fn 不能为 NULL。</li><li>回调函数中不能调用 rtplayer 的任何一个接口，如：reset、stop、start 等这些接口不能在回调函数中调用。</li><li>播放本地文件的情况下，set url 时，XPlayer 会进行一次同步 prepare，用于提前获取信息给 parser，因此异步 prepare 前，应对 XPlayerSetDataSourceUrl 的返回值进行判断。</li><li>改变播放器的状态，应满足状态图中的对应的函数调用流程，如播放结束后需要播放下一首歌，应调用 reset 清空信息，进入 idle 状态，再调用 setDataSource_Url 进行填充下一首歌到播放器中</li><li>采取异步 prepare 时（prepareAsync），应注意添加信号量进行同步。</li></ul>`,282),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter1.html.vue"]]);export{r as default};
