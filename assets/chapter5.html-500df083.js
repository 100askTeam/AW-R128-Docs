import{_ as l,r as d,o as c,c as t,a as n,b as e,d as a,e as i}from"./app-e85d5a28.js";const o={},p=i(`<h1 id="spi-lcd-显示驱动" tabindex="-1"><a class="header-anchor" href="#spi-lcd-显示驱动" aria-hidden="true">#</a> SPI LCD 显示驱动</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>R128 平台提供了 SPI DBI 的 SPI TFT 接口，具有如下特点：</p><ul><li>Supports DBI Type C 3 Line/4 Line Interface Mode</li><li>Supports 2 Data Lane Interface Mode</li><li>Supports data source from CPU or DMA</li><li>Supports RGB111/444/565/666/888 video format</li><li>Maximum resolution of RGB666 240 x 320@30Hz with single data lane</li><li>Maximum resolution of RGB888 240 x 320@60Hz or 320 x 480@30Hz with dual data lane</li><li>Supports tearing effect</li><li>Supports software flexible control video frame rate</li></ul><p>同时，提供了SPILCD驱动框架以供 SPI 屏幕使用。</p><h2 id="模块驱动" tabindex="-1"><a class="header-anchor" href="#模块驱动" aria-hidden="true">#</a> 模块驱动</h2><h3 id="menuconfig配置说明" tabindex="-1"><a class="header-anchor" href="#menuconfig配置说明" aria-hidden="true">#</a> menuconfig配置说明</h3><p>SPILCD 模块 menuconfig 的配置如下（以选择kld2844b屏为例）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options  ---&gt;
    soc related device drivers  ---&gt;
        SPILCD Devices  ---&gt;
            [*] DISP Driver Support(spi_lcd)
            [*]   spilcd hal APIs test           //spilcd模块测试用例
            LCD_FB panels select  ---&gt;           //spilcd屏驱动配置
                [*] LCD support kld2844B panel
                [ ] LCD support kld35512 panel
            Board select  ---&gt;
                [ ] board kld2844b support       //板级显示使用显示驱动私有方式的配置项，而使用sys_config.fex方式不用配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外可能需依赖的配置项有：</p><ul><li>DRIVERS_SPI</li><li>DRIVERS_DBI</li><li>DRIVERS_PWM</li></ul><h3 id="源码结构介绍" tabindex="-1"><a class="header-anchor" href="#源码结构介绍" aria-hidden="true">#</a> 源码结构介绍</h3><p>源码结构及主要驱动文件如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spilcd/
├── lcd_fb/
│   ├── dev_lcd_fb.c                # spilcd driver 层
│   ├── disp_display.c
│   ├── disp_lcd.c
│   ├── lcd_fb_intf.c
│   └── panels/                     # lcd驱动相关
│       ├── kld2844b.c
│       ├── lcd_source.c
│       ├── panels.c
│       └── panels.h
└── soc/
    ├── disp_board_config.c         # 板级配置解析
    └── kld2844b_config.c           # 显示私有方式的板级配置文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块参数配置" tabindex="-1"><a class="header-anchor" href="#模块参数配置" aria-hidden="true">#</a> 模块参数配置</h2><p>当前板级显示支持两种配置方法，一是使用 <code>sys_config.fex</code> 的方式进行配置，二是在不支持<code>sys_config.fex</code> 情况下，可以通过显示驱动私有的方式进行配置。下面分别对两种方式进行说明。</p><h3 id="使用-sys-config-fex-的方式进行配置" tabindex="-1"><a class="header-anchor" href="#使用-sys-config-fex-的方式进行配置" aria-hidden="true">#</a> 使用 sys_config.fex 的方式进行配置</h3><p>FreeRTOS系统路径：<code>board/芯片名/方案名/configs/sys_config.fex</code></p><blockquote><p>配置文件具体要看芯片方案所实际使用的，也可能使用的配置文件名称为sys_config_xxx.fex（xx是存储方案的标识，例如sys_config_nor.cfg、sys_config_nand.cfg）</p></blockquote><p>具体配置举例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>;----------------------------------------------------------------------------------
;lcd_fb0 configuration
;----------------------------------------------------------------------------------
[lcd_fb0]
lcd_used            = 1              ; 使用显示屏
lcd_model_name      = &quot;spilcd&quot;       ; 模型：spilcd
lcd_driver_name     = &quot;jlt35031c&quot;    ; 屏幕驱动：jlt35031c
lcd_x               = 320            ; 屏幕宽分辨率
lcd_y               = 480            ; 屏幕高分辨率
lcd_width           = 49             ; 屏幕物理宽度
lcd_height          = 74             ; 屏幕物理高度
lcd_data_speed      = 60             ; SPI 驱动频率 60MHz
lcd_pwm_used        = 1              ; lcd使用pwm背光
lcd_pwm_ch          = 1              ; lcd使用pwm背光通道1
lcd_pwm_freq        = 5000           ; lcd使用pwm背光频率5000Hz
lcd_pwm_pol         = 0              ; lcd使用pwm背光相位0
lcd_if              = 0              ; lcd使用spi接口，0-spi, 1-dbi
lcd_pixel_fmt       = 11             
lcd_dbi_fmt         = 2
lcd_dbi_clk_mode    = 1
lcd_dbi_te          = 1
fb_buffer_num       = 2
lcd_dbi_if          = 4
lcd_rgb_order       = 0
lcd_fps             = 60
lcd_spi_bus_num     = 1
lcd_frm             = 2
lcd_gamma_en        = 1
lcd_backlight       = 100

lcd_power_num       = 0
lcd_gpio_regu_num   = 0
lcd_bl_percent_num  = 0

lcd_spi_dc_pin      = port:PA19&lt;1&gt;&lt;0&gt;&lt;3&gt;&lt;0&gt; ; DC脚
;RESET Pin
lcd_gpio_0          = port:PA20&lt;1&gt;&lt;0&gt;&lt;2&gt;&lt;0&gt; ; 复位脚
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lcd-driver-name" tabindex="-1"><a class="header-anchor" href="#lcd-driver-name" aria-hidden="true">#</a> lcd_driver_name</h4><p>Lcd屏驱动的名字（字符串），必须与屏驱动中<code>strcut __lcd_panel</code>变量的<code>name</code>成员一致。</p><h4 id="lcd-model-name" tabindex="-1"><a class="header-anchor" href="#lcd-model-name" aria-hidden="true">#</a> lcd_model_name</h4><p>Lcd屏模型名字，非必须，可以用于同个屏驱动中进一步区分不同屏。</p><h4 id="lcd-if" tabindex="-1"><a class="header-anchor" href="#lcd-if" aria-hidden="true">#</a> lcd_if</h4><p>Lcd Interface</p><p>设置相应值的对应含义为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0：spi接口
1：dbi接口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>spi</code>接口就是俗称的4线模式，这是因为发送数据时需要额外借助<code>DC</code>线来区分命令和数据，与<code>sclk</code>，<code>cs</code>和<code>sda</code>共四线。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image1.png" alt=""></p><p>如果设置了<code>dbi</code>接口，那么还需要进一步区分<code>dbi</code>接口，需要设置 <code>lcd_dbi_if</code></p><h4 id="lcd-dbi-if" tabindex="-1"><a class="header-anchor" href="#lcd-dbi-if" aria-hidden="true">#</a> lcd_dbi_if</h4><p>Lcd dbi 接口设置。</p><p>这个参数只有在<code>lcd_if=1</code>时才有效。</p><p>设置相应值的对应含义为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0：L3I1
1：L3I2
2：L4I1
3：L4I2
4：D2LI
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有模式在发送数据时每个周期的比特数量根据不同像素格式不同而不同。</p><p><code>L3I1</code>和<code>L3I2</code>是三线模式（不需要<code>DC</code>脚），区别是读时序，也就是是否需要额外脚来读寄存器。读写时序图如下：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image2.png" alt=""></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image3.png" alt=""></p><p><code>L4I1</code>和<code>L4I2</code>是四线模式，与spi接口协议一样，区别是DC脚的控制是否自动化控制，另外I2和I1的区别是读时序，也就是否需要额外脚来读取寄存器。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image4.png" alt=""></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image5.png" alt=""></p><p><code>D2LI</code>是两data lane模式。发送命令部分时序与读时序与<code>L3I1</code>一致，下图是发送数据时的时序，不同像素格式时钟周期数量不一样。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image6.png" alt=""></p><h4 id="lcd-dbi-fmt" tabindex="-1"><a class="header-anchor" href="#lcd-dbi-fmt" aria-hidden="true">#</a> lcd_dbi_fmt</h4><p><code>DBI</code>接口像素格式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0：RGB111
1：RGB444
2：RGB565
3：RGB666
4：RGB888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择的依据是接收端屏<code>Driver IC</code>的支持情况，请查看<code>Driver IC</code>手册或询问屏厂。</p><p>然后必须配合<code>lcd_pixel_fmt</code>的选择，比如说选RGB565时，<code>lcd_pixel_fmt</code>也要选565格式。</p><h4 id="lcd-dbi-te" tabindex="-1"><a class="header-anchor" href="#lcd-dbi-te" aria-hidden="true">#</a> lcd_dbi_te</h4><p>使能te触发。</p><p>te即（Tearing effect），也就是撕裂的意思，由于读写不同导致撕裂现象，te脚的功能就是用于同步读写，te脚的频率也就是屏的刷新率，所以te脚也可以看做vsync脚（垂直同步脚）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0: 禁止te
1: 下降沿触发
2: 上升沿触发
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),r={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#%E5%B8%A6te%E8%84%9A%E7%9A%84%E5%B1%8F",target:"_blank",rel:"noopener noreferrer"},u=i(`<h4 id="lcd-dbi-clk-mode" tabindex="-1"><a class="header-anchor" href="#lcd-dbi-clk-mode" aria-hidden="true">#</a> lcd_dbi_clk_mode</h4><p>选择dbi时钟的行为模式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0:自动停止。有数据就有时钟，没发数据就没有
1:一直保持。无论发不发数据都有时钟
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的选项关系屏兼容性。</p><h4 id="lcd-rgb-order" tabindex="-1"><a class="header-anchor" href="#lcd-rgb-order" aria-hidden="true">#</a> lcd_rgb_order</h4><p>输入图像数据rgb顺序识别设置，仅当lcd_if=1时有效。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0:RGB
1:RBG
2:GRB
3:GBR
4:BRG
5:BGR
6:G_1RBG_0
7:G_0RBG_1
8:G_1BRG_0
9:G_0BRG_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非RGB565格式用0到5即可。</p><p>针对rgb565格式说明如下：</p><p>rgb565格式会遇到大小端问题，arm平台和PC平台存储都是小端(little endian，低字节放在低地址，高字节放在高地址），但是许多spi屏都是默认大端（Big Endian）。</p><p>也就是存储的字节顺序和发送的字节顺序不对应。</p><p>这个时候选择6以下，DBI接口就会自动将小端转成大端。</p><p>如果遇到默认是小端的spi屏，则需要选择6以上，DBI接口会自动用回小端方式。</p><p>6以上格式这样解释：</p><p>R是5比特，G是6比特，B是5比特，再把G拆成高3位(G_1)和低3位(G_0) 所以以下两种顺序：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image7.png" alt=""></p><ol><li>R-G_1-G_0-B，大端。</li><li>G_0-B-R-G_1，对应上面的9，小端。</li></ol><h4 id="lcd-x" tabindex="-1"><a class="header-anchor" href="#lcd-x" aria-hidden="true">#</a> lcd_x</h4><p>显示屏的水平像素数量，注意如果屏支持横竖旋转，那么lcd_x和lcd_y也要对调。</p><h4 id="lcd-y" tabindex="-1"><a class="header-anchor" href="#lcd-y" aria-hidden="true">#</a> lcd_y</h4><p>显示屏的行数，注意如果屏支持横竖旋转，那么lcd_x和lcd_y也要对调。</p><h4 id="lcd-data-speed" tabindex="-1"><a class="header-anchor" href="#lcd-data-speed" aria-hidden="true">#</a> lcd_data_speed</h4><p>用于设置spi/dbi接口时钟的速率，单位MHz。</p><ol><li>发送端（SOC)的最大限制是100MHz。</li><li>接收端（屏Driver IC）的限制，请查看对应Driver IC手册或者询问屏厂支持。</li><li>超出以上限制都有可能导致显示异常。</li></ol><h4 id="lcd-fps" tabindex="-1"><a class="header-anchor" href="#lcd-fps" aria-hidden="true">#</a> lcd_fps</h4>`,25),_={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_te",target:"_blank",rel:"noopener noreferrer"},h=i(`<h4 id="lcd-pwm-used" tabindex="-1"><a class="header-anchor" href="#lcd-pwm-used" aria-hidden="true">#</a> lcd_pwm_used</h4><p>是否使用pwm。</p><p>此参数标识是否使用pwm用以背光亮度的控制。</p><h4 id="lcd-pwm-ch" tabindex="-1"><a class="header-anchor" href="#lcd-pwm-ch" aria-hidden="true">#</a> lcd_pwm_ch</h4><p>Pwm channel used</p><p>此参数标识使用的Pwm通道。</p><h4 id="lcd-pwm-freq" tabindex="-1"><a class="header-anchor" href="#lcd-pwm-freq" aria-hidden="true">#</a> lcd_pwm_freq</h4><p>Lcd backlight PWM Frequency</p><p>这个参数配置PWM信号的频率，单位为Hz。</p><h4 id="lcd-pwm-pol" tabindex="-1"><a class="header-anchor" href="#lcd-pwm-pol" aria-hidden="true">#</a> lcd_pwm_pol</h4><p>Lcd backlight PWM Polarity</p><p>这个参数配置PWM信号的占空比的极性。设置相应值对应含义为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0：active high
1：active low
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lcd-pwm-max-limit" tabindex="-1"><a class="header-anchor" href="#lcd-pwm-max-limit" aria-hidden="true">#</a> lcd_pwm_max_limit</h4><p>Lcd backlight PWM</p><p>最高限制，以亮度值表示。</p><p>比如150，则表示背光最高只能调到150，0～255范围内的亮度值将会被线性映射到0～150范围内。用于控制最高背光亮度，节省功耗。</p><h4 id="lcd-backlight" tabindex="-1"><a class="header-anchor" href="#lcd-backlight" aria-hidden="true">#</a> lcd_backlight</h4><p>默认背光值，取值范围0到255，值越大越亮。</p><h4 id="lcd-bl-en" tabindex="-1"><a class="header-anchor" href="#lcd-bl-en" aria-hidden="true">#</a> lcd_bl_en</h4><p>背光使能脚定义</p><h4 id="lcd-spi-dc-pin" tabindex="-1"><a class="header-anchor" href="#lcd-spi-dc-pin" aria-hidden="true">#</a> lcd_spi_dc_pin</h4><p>指定作为DC的管脚，用于spi接口时。</p><h4 id="lcd-gpio-x" tabindex="-1"><a class="header-anchor" href="#lcd-gpio-x" aria-hidden="true">#</a> lcd_gpio_x</h4><p>x表示数字。如果有多个gpio脚需要控制，则定义lcd_gpio_0，lcd_gpio_1等。</p><h4 id="lcd-spi-bus-num" tabindex="-1"><a class="header-anchor" href="#lcd-spi-bus-num" aria-hidden="true">#</a> lcd_spi_bus_num</h4><p>选择spi总线id，只有spi1支持DBI协议，所以这里一般选择1。</p><p>取值范围：0到1。</p><h4 id="lcd-pixel-fmt" tabindex="-1"><a class="header-anchor" href="#lcd-pixel-fmt" aria-hidden="true">#</a> lcd_pixel_fmt</h4><p>选择传输数据的像素格式。</p><p>可选值如下，当你更换RGB分量顺序的时候，也得相应修改lcd_rgb_order，或者修改屏驱动的rgb分量顺序（一般是3Ah寄存器）。</p><p>DBI接口只支持RGB32和RGB16的情况。</p><p>SPI接口只支持RGB16的情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        enum lcdfb_pixel_format {
            LCDFB_FORMAT_ARGB_8888 = 0x00,  // MSB  A-R-G-B  LSB
            LCDFB_FORMAT_ABGR_8888 = 0x01,
            LCDFB_FORMAT_RGBA_8888 = 0x02,
            LCDFB_FORMAT_BGRA_8888 = 0x03,
            LCDFB_FORMAT_XRGB_8888 = 0x04,
            LCDFB_FORMAT_XBGR_8888 = 0x05,
            LCDFB_FORMAT_RGBX_8888 = 0x06,
            LCDFB_FORMAT_BGRX_8888 = 0x07,
            LCDFB_FORMAT_RGB_888 = 0x08,
            LCDFB_FORMAT_BGR_888 = 0x09,
            LCDFB_FORMAT_RGB_565 = 0x0a,
            LCDFB_FORMAT_BGR_565 = 0x0b,
            LCDFB_FORMAT_ARGB_4444 = 0x0c,
            LCDFB_FORMAT_ABGR_4444 = 0x0d,
            LCDFB_FORMAT_RGBA_4444 = 0x0e,
            LCDFB_FORMAT_BGRA_4444 = 0x0f,
            LCDFB_FORMAT_ARGB_1555 = 0x10,
            LCDFB_FORMAT_ABGR_1555 = 0x11,
            LCDFB_FORMAT_RGBA_5551 = 0x12,
            LCDFB_FORMAT_BGRA_5551 = 0x13,
        };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fb-buffer-num" tabindex="-1"><a class="header-anchor" href="#fb-buffer-num" aria-hidden="true">#</a> fb_buffer_num</h4><p>显示framebuffer数量，为了平滑显示，这里一般是2个，为了省内存也可以改成1。</p><h3 id="模块-sys-config-fex-配置案例" tabindex="-1"><a class="header-anchor" href="#模块-sys-config-fex-配置案例" aria-hidden="true">#</a> 模块 sys_config.fex 配置案例</h3><h4 id="典型2-data-lane配置" tabindex="-1"><a class="header-anchor" href="#典型2-data-lane配置" aria-hidden="true">#</a> 典型2 data lane配置</h4><p>一些屏支持双数据线传输以加快数据传输速度，此时需要走DBI协议，典型配置如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[lcd_fb0]
lcd_used          = 1
lcd_driver_name   = &quot;kld2844b&quot;
lcd_if            = 1
lcd_dbi_if        = 4
lcd_data_speed    = 60
lcd_spi_bus_num   = 1
lcd_x             = 320
lcd_y             = 240
lcd_pwm_used      = 1
lcd_pwm_ch        = 4
lcd_pwm_freq      = 5000
lcd_pwm_pol       = 0
lcd_pixel_fmt     = 0
lcd_dbi_fmt       = 3
lcd_rgb_order     = 0
fb_buffer_num     = 2
lcd_backlight     = 200
lcd_fps           = 60
lcd_dbi_te        = 0
lcd_bl_en         = port:PB04&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
lcd_gpio_0        = port:PB02&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),v=n("li",null,"硬件连接上，第二根数据脚连接到原来1 data lane的DC脚，可以这样理解：2数据线在传输数据时就自带D/C(Data/Commend)信息了，所以原来的DC脚就可以空出来作为第二根数据线了。",-1),b=n("li",null,"屏驱动上，需要使能2 data lane模式，具体寄存器查看对应driverIC手册或者询问屏厂。",-1),m={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_if",target:"_blank",rel:"noopener noreferrer"},k={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_if",target:"_blank",rel:"noopener noreferrer"},f={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_fmt",target:"_blank",rel:"noopener noreferrer"},g={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_spi_bus_num",target:"_blank",rel:"noopener noreferrer"},x={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_x",target:"_blank",rel:"noopener noreferrer"},w={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_y",target:"_blank",rel:"noopener noreferrer"},B={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_pwm_used",target:"_blank",rel:"noopener noreferrer"},D={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_backlight",target:"_blank",rel:"noopener noreferrer"},C={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_bl_en",target:"_blank",rel:"noopener noreferrer"},R={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_pixel_fmt",target:"_blank",rel:"noopener noreferrer"},y={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#fb_buffer_num",target:"_blank",rel:"noopener noreferrer"},L={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_gpio_x",target:"_blank",rel:"noopener noreferrer"},I={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_fps",target:"_blank",rel:"noopener noreferrer"},G={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_te",target:"_blank",rel:"noopener noreferrer"},P=n("h4",{id:"原spi接口屏配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原spi接口屏配置","aria-hidden":"true"},"#"),e(" 原SPI接口屏配置")],-1),F=n("p",null,"如果IC支持DBI接口，那么就没有必要用SPI接口，DBI接口其协议能覆盖所有情况。",-1),O={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_if",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"不支持2 data lane。",-1),S={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_spi_dc_pin",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,"只支持rgb565的像素格式。由于只有单data lane，速度过慢，rgb565以上格式都不现实。",-1),T=i(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[lcd_fb0]
lcd_used          = 1
lcd_driver_name   = &quot;kld2844b&quot;
lcd_if            = 0
lcd_data_speed    = 60
lcd_spi_bus_num   = 1
lcd_x             = 320
lcd_y             = 240
lcd_pwm_used      = 1
lcd_pwm_ch        = 4
lcd_pwm_freq      = 5000
lcd_pwm_pol       = 0
lcd_pixel_fmt     = 10
lcd_rgb_order     = 0
fb_buffer_num     = 2
lcd_backlight     = 200
lcd_fps           = 60
lcd_dbi_te        = 0
lcd_bl_en         = port:PB04&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
lcd_gpio_0        = port:PB02&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
lcd_spi_dc_pin    = port:PA19&lt;1&gt;&lt;0&gt;&lt;3&gt;&lt;1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带te脚的屏" tabindex="-1"><a class="header-anchor" href="#带te脚的屏" aria-hidden="true">#</a> 带te脚的屏</h4><p>te即（Tearing effect），也就是撕裂的意思，是由于读写不同步导致撕裂现象，te脚的功能就是用于同步读写，te脚的频率也就是屏的刷新率，所以te脚也可以看做vsync脚（垂直同步脚）。</p>`,3),M=n("li",null,"硬件设计阶段，需要将屏的te脚连接到IC的DBI接口的te脚。",-1),q=n("li",null,"配置上接口使用dbi接口。",-1),N={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_te",target:"_blank",rel:"noopener noreferrer"},z=n("li",null,"屏驱动使能te功能，寄存器一般是35h，详情看屏对应的driver IC手册。",-1),U=n("li",null,"屏驱动设置帧率，根据屏能接受的传输速度选择合理的帧率（比如ST7789H2里面是通过c6h来设置te频率）。",-1),V=i(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[lcd_fb0]
lcd_used          = 1
lcd_driver_name   = &quot;kld2844b&quot;
lcd_if            = 1
lcd_dbi_if        = 4
lcd_data_speed    = 60
lcd_spi_bus_num   = 1
lcd_x             = 320
lcd_y             = 240
lcd_pwm_used      = 1
lcd_pwm_ch        = 4
lcd_pwm_freq      = 5000
lcd_pwm_pol       = 0
lcd_pixel_fmt     = 0
lcd_dbi_fmt       = 3
lcd_rgb_order     = 0
fb_buffer_num     = 2
lcd_backlight     = 200
lcd_fps           = 60
lcd_dbi_te        = 1
lcd_bl_en         = port:PB04&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
lcd_gpio_0        = port:PB02&lt;1&gt;&lt;0&gt;&lt;default&gt;&lt;1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="横竖屏旋转" tabindex="-1"><a class="header-anchor" href="#横竖屏旋转" aria-hidden="true">#</a> 横竖屏旋转</h4><ol><li>平台没有硬件旋转功能，软件旋转太慢而且耗费CPU。</li><li>不少spi屏支持内部旋转，需要在屏驱动初始化的时候进行设置，一般是<strong>36h</strong>寄存器。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 转成横屏
sunxi_lcd_cmd_write(sel, 0x36);
sunxi_lcd_para_write(sel, 0xa0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),H={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_x",target:"_blank",rel:"noopener noreferrer"},X={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_y",target:"_blank",rel:"noopener noreferrer"},W=n("li",null,"屏内部旋转出图效果可能会变差，建议选屏的时候直接选好方向。",-1),j=n("h4",{id:"帧率控制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#帧率控制","aria-hidden":"true"},"#"),e(" 帧率控制")],-1),K=n("p",null,"屏的刷新率受限于多方面：",-1),Y={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_data_speed",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,"屏driver IC接收能力。Driver IC手册中会提到屏的能接受的最大sclk周期。",-1),J={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#%E5%85%B8%E5%9E%8B2_data_lane%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},Z=n("li",null,"像素格式。像素格式决定需要传输的数据量，颜色数量越小的像素格式，帧率越高，但是效果越差。",-1),$={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#%E5%B8%A6te%E8%84%9A%E7%9A%84%E5%B1%8F",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_fps",target:"_blank",rel:"noopener noreferrer"},en=n("h4",{id:"背光控制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背光控制","aria-hidden":"true"},"#"),e(" 背光控制")],-1),sn=n("li",null,"硬件需要支持pwm背光电路。",-1),an={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_pwm_used",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_backlight",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_bl_en",target:"_blank",rel:"noopener noreferrer"},cn=n("h4",{id:"像素格式相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#像素格式相关","aria-hidden":"true"},"#"),e(" 像素格式相关")],-1),tn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_pixel_fmt",target:"_blank",rel:"noopener noreferrer"},on={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_fmt",target:"_blank",rel:"noopener noreferrer"},pn=n("p",null,"SPI/DBI发送数据的时候没有必要发送alpha通道，但是应用层却有对应的alpha通道，比如ARGB8888格式。",-1),rn=n("p",null,"这个时候硬件会自动帮我们处理好alpha通道，所以lcd_pixel_fmt选择有alpha通道的格式时，lcd_dbi_fmt可以选rgb666或者rgb888，不用和它一样。",-1),un=n("h4",{id:"电源配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#电源配置","aria-hidden":"true"},"#"),e(" 电源配置")],-1),_n={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_power_enable",target:"_blank",rel:"noopener noreferrer"},hn=n("h4",{id:"gpio配置说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gpio配置说明","aria-hidden":"true"},"#"),e(" GPIO配置说明")],-1),vn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_bl_en",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_spi_dc_pin",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_gpio_x",target:"_blank",rel:"noopener noreferrer"},kn=i(`<p>下面以lcd_spi_dc_pin为例，具体说明GPIO属性的参数值含义：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lcd_spi_dc_pin   = port:PA19&lt;1&gt;&lt;0&gt;&lt;3&gt;&lt;1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>引脚说明：port: 端口 &lt; 复用功能 &gt;&lt; 上下拉 &gt;&lt; 驱动能力 &gt;&lt; 输出值 &gt;</p><p>等式右边的从左到右5个字段代表的具体含义如下：</p><ul><li><code>PA19</code>：端口，表示GPIO管脚。<code>PA</code>表示PA组管脚，<code>19</code>表示第19根管脚；即PA19管脚。</li><li><code>&lt;1&gt;</code>：复用功能，表示GPIO复用类型。1表示将PA19选择为通用GPIO功能，0为输入，1为输出。</li><li><code>&lt;0&gt;</code>：上下拉，表示内置电阻。使用0的话，表示内部电阻高阻态，如果是1则是内部电阻上拉，2就代表内部电阻下拉。其它数据无效。</li><li><code>&lt;3&gt;</code>：表示驱动能力。1是默认等级，数字越大驱动能力越强，最大是3。</li><li><code>&lt;1&gt;</code>：表示默认输出电平值。0为低电平，1为高电平。</li></ul><h4 id="多个显示" tabindex="-1"><a class="header-anchor" href="#多个显示" aria-hidden="true">#</a> 多个显示</h4>`,6),fn=n("li",null,"确定硬件有没有多余的spi/dbi接口。",-1),gn=n("code",null,"g_lcd1_config",-1),xn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_spi_bus_num",target:"_blank",rel:"noopener noreferrer"},wn=i(`<h4 id="依赖驱动配置" tabindex="-1"><a class="header-anchor" href="#依赖驱动配置" aria-hidden="true">#</a> 依赖驱动配置</h4><p>spilcd模块依赖spi，dbi，pwm等驱动。</p><h3 id="使用显示私有方式进行配置" tabindex="-1"><a class="header-anchor" href="#使用显示私有方式进行配置" aria-hidden="true">#</a> 使用显示私有方式进行配置</h3><p>路径：<code>rtos-hal/hal/source/spilcd/soc/</code></p><p>具体板级显示配置文件可参考该路径下的 <code>kld2844b_config.c</code> 配置文件。</p><p>该文件模仿 <code>sys_config.fex</code>来配置一些板级相关的资源，源文件中需要定义4个全局变量：<code>g_lcd0_config</code>、<code>g_lcd1_config</code>、<code>g_lcd0_config_len</code>和<code>g_lcd1_config_len</code>，且变量名字固定，不能修改。</p><p>具体说明如下：</p><ol><li><code>g_lcd0_config</code>：第一个屏的配置变量，<code>struct property_t</code>数据类型。</li><li><code>g_lcd1_config</code>：第二个屏的配置变量，<code>struct property_t</code>数据类型。</li><li><code>g_lcd0_config_len</code>和<code>g_lcd1_config_len</code>是对应上面两个数组变量的长度，照搬即可。</li></ol><p><code>struct property_t</code>数据类型，用于定义一个属性的信息：</p><ol><li>属性名字。对应其成员<code>name</code>，字符串。</li><li>属性类型。对应其成员<code>type</code>，看<code>enum proerty_type</code>的定义，共有整型，字符串，GPIO，专用pin和电源。</li><li>属性值。根据上面的属性类型来选择<code>union</code>中成员来赋值。</li></ol><p>对于上述常用的属性类型举例如下：</p><p>整型：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    {
        .name = &quot;lcd_used&quot;,
        .type = PROPERTY_INTGER,
        .v.value = 1,
    },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    {
        .name = &quot;lcd_driver_name&quot;,
        .type = PROPERTY_STRING,
        .v.str = &quot;kld2844b&quot;,
    },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GPIO：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    {
        .name = &quot;lcd_spi_dc_pin&quot;,
        .type = PROPERTY_GPIO,
        .v.gpio_list = {
            .gpio = GPIOA(19),
            .mul_sel = GPIO_DIRECTION_OUTPUT,
            .pull = 0,
            .drv_level = 3,
            .data = 1,
        },
    },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>g_lcd0_config的含义与前述的使用sys_config.fex方式中的lcd_fb0一致。</p><h2 id="编写屏驱动" tabindex="-1"><a class="header-anchor" href="#编写屏驱动" aria-hidden="true">#</a> 编写屏驱动</h2><p>屏驱动源码位置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rtos-hal/hal/source/spilcd/lcd_fb/panels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>在屏驱动源码位置下拷贝现有一个屏驱动，包括头文件和源文件，然后将文件名改成有意义的名字，比如屏型号。</li><li>修改源文件中的<code>strcut __lcd_panel</code>变量的名字，以及这个变量成员<code>name</code>的名字，这个名字必须和 <code>sys_config.fex</code> 中 <code>[lcd_fb0]</code>（或板级配置文件中<code>g_lcd0_config</code>）的<code>lcd_driver_name</code>一致。</li><li>在屏驱动目录下修改<code>panel.c</code>和<code>panel.h</code>。在全局结构体变量<code>panel_array</code>中新增刚才添加<code>strcut __lcd_panel</code>的变量指针。<code>panel.h</code>中新增<code>strcut __lcd_panel</code>的声明。并用宏括起来。</li><li>修改<code>rtos-hal/hal/source/spilcd/lcd_fb/panels/Kconfig</code>，新增一个config，与第三点提到的宏对应。</li><li>修改<code>rtos-hal/hal/source/spilcd/lcd_fb/</code>路径下的Makefile文件。给lcd_fb-obj变量新增刚才加入的源文件对应<code>.o</code>。</li><li>根据本手册以及屏手册，Driver IC手册修改sys_config.fex中的[lcd_fb0]节点（或显示私有方式的板级配置文件中的<code>g_lcd0_config</code>配置变量）下面的属性</li><li>实现屏源文件中的<code>LCD_open_flow</code>，<code>LCD_close_flow</code>，<code>LCD_panel_init</code>，<code>LCD_power_on</code>等函数</li></ol><h3 id="开关屏流程函数解析" tabindex="-1"><a class="header-anchor" href="#开关屏流程函数解析" aria-hidden="true">#</a> 开关屏流程函数解析</h3><p>开关屏的操作流程如下图所示。</p><p>其中，LCD_open_flow和LCD_close_flow称为开关屏流程函数，该函数利用LCD_OPEN_FUNC进行注册回调函数，先注册先执行，可以注册多个，不限制数量。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image8.png" alt=""></p><h4 id="lcd-open-flow" tabindex="-1"><a class="header-anchor" href="#lcd-open-flow" aria-hidden="true">#</a> LCD_open_flow</h4><p>功能：初始化开屏的步骤流程。</p><p>原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __s32 <span class="token function">LCD_open_flow</span><span class="token punctuation">(</span>__u32 sel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数常用内容为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __s32 <span class="token function">LCD_open_flow</span><span class="token punctuation">(</span>__u32 sel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_OPEN_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_power_on<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_OPEN_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_panel_init<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_OPEN_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> lcd_fb_black_screen<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">LCD_OPEN_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_bl_open<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，初始化整个开屏的流程步骤为四个：</p><ol><li>打开LCD电源，再延迟10ms。</li><li>初始化屏，再延迟50ms；（不需要初始化的屏，可省掉此步骤）。</li><li>向屏发送全黑的数据。这一步骤是必须的，而且需要在开背光之前。</li><li>打开背光，再延迟0ms。</li></ol><p><code>LCD_open_flow</code> 函数只会系统初始化的时候调用一次，执行每个 <code>LCD_OPEN_FUNC</code> 即是把对应的开屏步骤函数进行注册，<strong>并没有立即执行该开屏步骤函数</strong>。LCD_open_flow函数的内容必须统一用 <code>LCD_OPEN_FUNC(sel, function, delay_time)</code> 进行函数注册的形式，确保正常注册到开屏步骤中。</p><p>LCD_OPEN_FUNC的第二个参数是前后两个步骤的延时长度，单位ms，注意这里的数值请按照屏手册规定去填，乱填可能导致屏初始化异常或者开关屏时间过长，影响用户体验。</p><h4 id="lcd-close-flow" tabindex="-1"><a class="header-anchor" href="#lcd-close-flow" aria-hidden="true">#</a> LCD_close_flow</h4><p>功能：初始化关屏的步骤流程。</p><p>原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __s32 <span class="token function">LCD_close_flow</span><span class="token punctuation">(</span>__u32 sel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数常用内容为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __s32 <span class="token function">LCD_close_flow</span><span class="token punctuation">(</span>__u32 sel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCD_CLOSE_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_bl_close<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_CLOSE_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_panel_exit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_CLOSE_FUNC</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> LCD_power_off<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>LCD_bl_close，是关背光，关完背光在处理其它事情，不会影响用户视觉。</li><li>LCD_panel_exit，发送命令让屏退出工作状态。</li><li>关电复位，让屏彻底关闭。</li></ol><h4 id="lcd-open-func" tabindex="-1"><a class="header-anchor" href="#lcd-open-func" aria-hidden="true">#</a> LCD_OPEN_FUNC</h4><p>功能：注册开屏步骤函数到开屏流程中，记住这里是注册不是执行！</p><p>原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">LCD_OPEN_FUNC</span><span class="token punctuation">(</span>__u32 sel<span class="token punctuation">,</span> LCD_FUNC func<span class="token punctuation">,</span> __u32 delay<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><p>func是一个函数指针，其类型是：<code>void (*LCD_FUNC) (__u32 sel)</code>，用户自己定义的函数必须也要用统一的形式。比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void user_defined_func(__u32 sel)
{
    //do something
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>delay是执行该步骤后，再延迟的时间，时间单位是毫秒。</p><h4 id="lcd-power-on" tabindex="-1"><a class="header-anchor" href="#lcd-power-on" aria-hidden="true">#</a> LCD_power_on</h4>`,52),Bn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_gpio_set_value",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_power_enable",target:"_blank",rel:"noopener noreferrer"},Cn=n("p",null,"参考屏手册里面的上电时序（Power on sequence）。",-1),Rn=n("h4",{id:"lcd-panel-init",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcd-panel-init","aria-hidden":"true"},"#"),e(" LCD_panel_init")],-1),yn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_cmd_write",target:"_blank",rel:"noopener noreferrer"},Ln=n("p",null,"请向屏厂索要初始化寄存器代码或者自行研究屏Driver IC手册。",-1),In=n("h4",{id:"lcd-fb-black-screen",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcd-fb-black-screen","aria-hidden":"true"},"#"),e(" lcd_fb_black_screen")],-1),Gn=n("p",null,"向屏传输全黑数据的接口，是必须的，否则打开背光后，呈现的将是雪花屏。",-1),Pn=n("h4",{id:"lcd-bl-open",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcd-bl-open","aria-hidden":"true"},"#"),e(" LCD_bl_open")],-1),Fn=n("p",null,"这是背光使能，固定调用。",-1),On={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_backlight_enable",target:"_blank",rel:"noopener noreferrer"},An={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_pwm_enable",target:"_blank",rel:"noopener noreferrer"},Sn=n("h4",{id:"lcd-bl-close",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcd-bl-close","aria-hidden":"true"},"#"),e(" LCD_bl_close")],-1),En=n("p",null,"这是关闭背光。固定调用下面两个函数，分别是：",-1),Tn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_backlight_enable",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_pwm_enable",target:"_blank",rel:"noopener noreferrer"},qn=n("h4",{id:"lcd-power-off",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcd-power-off","aria-hidden":"true"},"#"),e(" LCD_power_off")],-1),Nn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_gpio_set_value",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#sunxi_lcd_power_enable",target:"_blank",rel:"noopener noreferrer"},Un=i('<p>参考屏手册里面的下电时序（Power off sequence）。</p><h4 id="sunxi-lcd-delay-ms" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-delay-ms" aria-hidden="true">#</a> sunxi_lcd_delay_ms</h4><p>函数：<strong>sunxi_lcd_delay_ms/sunxi_lcd_delay_us</strong></p><p>功能：延时函数，分别是毫秒级别/微秒级别的延时。</p><p>原型：<code>s32 sunxi_lcd_delay_ms(u32 ms); / s32 sunxi_lcd_delay_us(u32 us);</code></p><h4 id="sunxi-lcd-backlight-enable" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-backlight-enable" aria-hidden="true">#</a> sunxi_lcd_backlight_enable</h4><p>函数：<strong>sunxi_lcd_backlight_enable/ sunxi_lcd_backlight_disable</strong></p>',7),Vn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_bl_en",target:"_blank",rel:"noopener noreferrer"},Hn=i(`<p>原型：</p><ul><li><code>void sunxi_lcd_backlight_enable(u32 screen_id);</code></li><li><code>void sunxi_lcd_backlight_disable(u32 screen_id);</code></li></ul><h4 id="sunxi-lcd-pwm-enable" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-pwm-enable" aria-hidden="true">#</a> sunxi_lcd_pwm_enable</h4><p>函数：<strong>sunxi_lcd_pwm_enable / sunxi_lcd_pwm_disable</strong></p><p>功能：打开/关闭pwm控制器，打开时pwm将往外输出pwm波形。对应的是lcd_pwm_ch所对应的那一路pwm。</p><p>原型：</p><ul><li><code>s32 sunxi_lcd_pwm_enable(u32 screen_id);</code></li><li><code>s32 sunxi_lcd_pwm_disable(u32 screen_id);</code></li></ul><h4 id="sunxi-lcd-power-enable" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-power-enable" aria-hidden="true">#</a> sunxi_lcd_power_enable</h4><p>函数：<strong>sunxi_lcd_power_enable / sunxi_lcd_power_disable</strong></p><p>功能：打开/关闭Lcd电源，操作的是板级配置文件中的<code>lcd_power/lcd_power1/lcd_power2</code>。（pwr_id标识电源索引）。</p><p>原型：</p><ul><li><code>void sunxi_lcd_power_enable(u32 screen_id, u32 pwr_id);</code></li><li><code>void sunxi_lcd_power_disable(u32 screen_id, u32 pwr_id);</code></li><li>pwr_id = 0：对应于配置文件中的lcd_power。</li><li>pwr_id = 1：对应于配置文件中的lcd_power1。</li><li>pwr_id = 2：对应于配置文件中的lcd_power2。</li><li>pwr_id = 3：对应于配置文件中的lcd_power3。</li></ul><h4 id="sunxi-lcd-cmd-write" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-cmd-write" aria-hidden="true">#</a> sunxi_lcd_cmd_write</h4><p>函数：<strong>sunxi_lcd_cmd_write</strong></p><p>功能：使用spi/dbi发送命令。</p><p>原型：<code>s32 sunxi_lcd_cmd_write(u32 screen_id, u8 cmd);</code></p><h4 id="sunxi-lcd-para-write" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-para-write" aria-hidden="true">#</a> sunxi_lcd_para_write</h4><p>函数：<strong>sunxi_lcd_para_write</strong></p><p>功能：使用spi/dbi发送参数。</p><p>原型：<code>s32 sunxi_lcd_para_write(u32 screen_id, u8 para);</code></p><h4 id="sunxi-lcd-gpio-set-value" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-gpio-set-value" aria-hidden="true">#</a> sunxi_lcd_gpio_set_value</h4><p>函数：<strong>sunxi_lcd_gpio_set_value</strong></p><p>功能：LCD_GPIO PIN脚上输出高电平或低电平。</p><p>原型：<code>s32 sunxi_lcd_gpio_set_value(u32 screen_id, u32 io_index, u32 value);</code></p><p>参数说明：</p><ul><li>io_index = 0：对应于配置文件中的lcd_gpio_0。</li><li>io_index = 1：对应于配置文件中的lcd_gpio_1。</li><li>io_index = 2：对应于配置文件中的lcd_gpio_2。</li><li>io_index = 3：对应于配置文件中的lcd_gpio_3。</li><li>value = 0：对应IO输出低电平。</li><li>Value = 1：对应IO输出高电平。</li></ul><p>只用于该GPIO定义为输出的情形。</p><h4 id="sunxi-lcd-gpio-set-direction" tabindex="-1"><a class="header-anchor" href="#sunxi-lcd-gpio-set-direction" aria-hidden="true">#</a> sunxi_lcd_gpio_set_direction</h4><p>函数：<strong>sunxi_lcd_gpio_set_direction</strong></p><p>功能：设置LCD_GPIO PIN脚为输入或输出模式。</p><p>原型：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>s32 sunxi_lcd_gpio_set_direction(u32 screen_id, u32 io_index, u32 direction);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>io_index = 0：对应于配置文件中的lcd_gpio_0。</li><li>io_index = 1：对应于配置文件中的lcd_gpio_1。</li><li>io_index = 2：对应于配置文件中的lcd_gpio_2。</li><li>io_index = 3：对应于配置文件中的lcd_gpio_3。</li><li>direction = 0：对应IO设置为输入。</li><li>direction = 1：对应IO设置为输出。</li></ul><h2 id="模块测试用例" tabindex="-1"><a class="header-anchor" href="#模块测试用例" aria-hidden="true">#</a> 模块测试用例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cache.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_mem.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_lcd_fb.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> width<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> height<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token keyword">int</span> screensize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>fbsmem_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcdfb_fb_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> yoffset<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">fb_info</span> <span class="token operator">*</span>p_info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    p_info<span class="token operator">-&gt;</span>screen_base <span class="token operator">=</span> fbsmem_start<span class="token punctuation">;</span>
    p_info<span class="token operator">-&gt;</span>var<span class="token punctuation">.</span>xres <span class="token operator">=</span> width<span class="token punctuation">;</span>
    p_info<span class="token operator">-&gt;</span>var<span class="token punctuation">.</span>yres <span class="token operator">=</span> height<span class="token punctuation">;</span>
    p_info<span class="token operator">-&gt;</span>var<span class="token punctuation">.</span>xoffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p_info<span class="token operator">-&gt;</span>var<span class="token punctuation">.</span>yoffset <span class="token operator">=</span> yoffset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">show_rgb</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> sel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">fb_info</span> fb_info<span class="token punctuation">;</span>
    <span class="token keyword">int</span> bpp <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    width <span class="token operator">=</span> <span class="token function">bsp_disp_get_screen_width</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    height <span class="token operator">=</span> <span class="token function">bsp_disp_get_screen_height</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    screensize <span class="token operator">=</span> width <span class="token operator">*</span> bpp <span class="token operator">*</span> height<span class="token punctuation">;</span>
    fbsmem_start <span class="token operator">=</span> <span class="token function">hal_malloc_coherent</span><span class="token punctuation">(</span>screensize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;width = %d, height = %d, screensize = %d, fbsmem_start = %x\\n&quot;</span><span class="token punctuation">,</span>
            width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> screensize<span class="token punctuation">,</span> fbsmem_start<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>fbsmem_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> screensize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> screensize <span class="token operator">/</span> bpp<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>fbsmem_start<span class="token operator">+</span>i<span class="token operator">*</span>bpp<span class="token punctuation">,</span> color<span class="token punctuation">,</span> bpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fb_info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">fb_info</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lcdfb_fb_init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_dcache_clean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fbsmem_start<span class="token punctuation">,</span> screensize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bsp_disp_lcd_set_layer</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_info<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_free_coherent</span><span class="token punctuation">(</span>fbsmem_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_spilcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> ret<span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Run spilcd hal layer test case\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">show_rgb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;spilcd test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_spilcd<span class="token punctuation">,</span> test_spilcd<span class="token punctuation">,</span> spilcd hal APIs tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test_spilcd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.如果LCD是ARGB8888像素格式输入，执行命令后会显示一帧紫色画面。
2.如果LCD是RGB565像素格式输入，执行命令后会显示一帧蓝色画面（SPI 协议是黄色画面（没有RB Swap））
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="怎么判断屏初始化成功" tabindex="-1"><a class="header-anchor" href="#怎么判断屏初始化成功" aria-hidden="true">#</a> 怎么判断屏初始化成功</h3><p>屏初始化成功，一般呈现的现象是雪花屏。因为屏驱动里面，在 <code>LCD_open_flow</code> 中添加了<code>lcd_fb_black_screen</code>的注册，故正常情况下开机是有背光的黑屏画面。</p><h3 id="黑屏-无背光" tabindex="-1"><a class="header-anchor" href="#黑屏-无背光" aria-hidden="true">#</a> 黑屏-无背光</h3>`,44),Xn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_pwm_used",target:"_blank",rel:"noopener noreferrer"},Wn=n("h3",{id:"送图无显示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#送图无显示","aria-hidden":"true"},"#"),e(" 送图无显示")],-1),jn=n("p",null,"排除步骤:",-1),Kn=n("li",null,[e("首先执行spilcd模块测试命令"),n("code",null,"test_spilcd"),e("，如果能正常显示颜色画面，说明显示通路正常，只是应用未能正确配置送图接口。如果执行测试用例无法正常显示颜色画面，接着下面步骤。")],-1),Yn=n("li",null,[e("屏驱动里面，在"),n("code",null,"LCD_open_flow"),e("中删除"),n("code",null,"lcd_fb_black_screen"),e("的注册，启动后，如果屏初始化成功应该是花屏状态(大部分屏如此)。")],-1),Qn=n("li",null,"如果屏没有初始化成功，请检查屏电源，复位脚状态。",-1),Jn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#%E5%B8%A7%E7%8E%87%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_if",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_fmt",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_clk_mode",target:"_blank",rel:"noopener noreferrer"},ee=n("h3",{id:"闪屏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#闪屏","aria-hidden":"true"},"#"),e(" 闪屏")],-1),se={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#%E5%B8%A7%E7%8E%87%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},ae=n("h3",{id:"画面偏移",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#画面偏移","aria-hidden":"true"},"#"),e(" 画面偏移")],-1),ie=n("p",null,"画面随着数据的发送偏移越来越大。",-1),le={href:"https://r128.docs.aw-ol.com/sdk_base/spilcd/#lcd_dbi_clk_mode",target:"_blank",rel:"noopener noreferrer"},de=i(`<h3 id="屏幕白屏" tabindex="-1"><a class="header-anchor" href="#屏幕白屏" aria-hidden="true">#</a> 屏幕白屏</h3><p>屏幕白屏，但是背光亮起</p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image9.png" style="zoom:80%;"><p>白屏是因为屏幕没有初始化，需要检查屏幕初始化序列或者初始化数据是否正确。</p><h3 id="屏幕花屏" tabindex="-1"><a class="header-anchor" href="#屏幕花屏" aria-hidden="true">#</a> 屏幕花屏</h3><p>屏幕花屏，无法控制</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image10.png" alt=""></p><p>花屏一般是因为屏幕初始化后没有正确设置 <code>addrwin</code>，或者初始化序列错误。</p><h3 id="lvgl-屏幕颜色不正确" tabindex="-1"><a class="header-anchor" href="#lvgl-屏幕颜色不正确" aria-hidden="true">#</a> LVGL 屏幕颜色不正确</h3><p>出现反色，颜色异常</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image11.png" alt=""></p><p>请配置 LVGL <code>LV_COLOR_DEPTH</code> 参数为 16，<code>LV_COLOR_16_SWAP</code> 为 1，这是由 SPI LCD 的特性决定的。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image12.png" alt=""></p><h3 id="显示反色" tabindex="-1"><a class="header-anchor" href="#显示反色" aria-hidden="true">#</a> 显示反色</h3><p>运行 <code>test_spilcd</code> ，屏幕显示蓝色。</p><p>这是由于屏幕启动了 RB SWAP，一般是 <code>0x36</code> 寄存器修改</p><p>正常显示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sunxi_lcd_cmd_write(sel, 0X36);
sunxi_lcd_para_write(sel, 0x00);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>反色显示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sunxi_lcd_cmd_write(sel, 0X36);
sunxi_lcd_para_write(sel, 0x08);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lvgl-出现-dma-over-size" tabindex="-1"><a class="header-anchor" href="#lvgl-出现-dma-over-size" aria-hidden="true">#</a> LVGL 出现 DMA Over Size</h3><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image13.png" alt=""></p><p>这是由于 LVGL 配置的 <code>LV_COLOR_DEPTH</code> 为 32，但是 SPI 屏配置为16位。请修改 <code>lv_conf.h</code></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image14.png" alt=""></p><h3 id="出现部分花屏" tabindex="-1"><a class="header-anchor" href="#出现部分花屏" aria-hidden="true">#</a> 出现部分花屏</h3><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image15.png" alt=""></p><ul><li>检查 <code>address</code> 函数是否正确</li><li>检查 <code>sys_config.fex</code> 屏幕配置分辨率是否正确</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>调试LCD显示屏实际上就是调试发送端芯片（全志SOC）和接收端芯片（LCD屏上的driver IC）的一个过程：</p><ol><li>添加屏驱动请看编写屏驱动</li><li>仔细阅读屏手册以及driver IC手册（有的话）。</li><li>仔细阅读板级显示配置参数详解。</li><li>确保LCD所需要的各路电源管脚正常。</li></ol><h3 id="spi-lcd-颜色相关问题" tabindex="-1"><a class="header-anchor" href="#spi-lcd-颜色相关问题" aria-hidden="true">#</a> SPI LCD 颜色相关问题</h3><p>首先，得先确定显示屏使用的是SPI接口，还是DBI接口，不同的接口，输入数据的解析方式是不一样的。</p><p>DBI接口的全称是 <code>Display Bus Serial Interface</code> ，在显示屏数据手册中，一般会说这是SPI接口，所以有人会误认为SPI屏可以使用 <code>normal spi</code> 去直接驱动。</p><p>阅读<code>lcd_dbi_if</code>部分的介绍可以知道，在3线模式时，发送命令前有1位A0用于指示当前发送的是数据，还是命令。而命令后面接着的数据就没有这个A0位了，代表SPI需要在9位和8位之间来回切换，而在读数据时，更是需要延时 <code>dummy clock</code> 才能读数据，<code>normal spi</code> 都很难，甚至无法实现。所以 <code>normal spi</code> 只能模拟4 线的DBI的写操作。</p><p>对于R128这类支持DBI接口的CPU，可以选择不去了解SPI。如果需要用到SPI去驱动显示屏，必须把显示屏设置成小端。</p><h4 id="rgb565和rgb666" tabindex="-1"><a class="header-anchor" href="#rgb565和rgb666" aria-hidden="true">#</a> RGB565和RGB666</h4><p>SPI显示屏一般支持RGB444,RGB565和RGB666，RGB444使用的比较少，所以只讨论RGB565和RGB666.</p><p>RGB565代表一个点的颜色由2字节组成，也就是R（红色）用5位表示，G（绿色）用6位表示，B（蓝色）用5位表示，如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image16.png" alt=""></p><p>RGB666一个点的颜色由3字节组成，每个字节代表一个颜色，其中每个字节的低2位会无视，如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image17.png" alt=""></p><h4 id="spi-接口" tabindex="-1"><a class="header-anchor" href="#spi-接口" aria-hidden="true">#</a> SPI 接口</h4><p>因为SPI接口的通讯效率不高，所以建议使用RGB565的显示，以 <code>jlt35031c</code> 显示屏为例，他的显示驱动芯片是 <code>ST7789</code>，设置显示格式的方式是往 <code>3a</code> 寄存器写入<code>0x55（RGB565</code>）或者 <code>0x66（RGB666）</code>，在 <code>R128SDK</code> 中，已经把 <code>jlt35031c</code> 的通讯格式写死为 <code>0x55</code>，<code>lcd_pixel_fmt</code>配置选项无效：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sunxi_lcd_cmd_write(sel, 0x3a);
sunxi_lcd_para_write(sel, 0x55);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在例程中，输入的数据是 <code>0xff，0x00，0xff，0x00</code>，对于SPI接口，是按字节发送。实际上，例程只需要每次发送2字节即可，因为前后发送的都是相同的ff 00，所以没有看出问题。</p><p>根据对 <code>565</code> 的数据解析，我们拆分 <code>ff 00</code> 就可以得到红色分量是 <code>0b11111</code>，也就是 <code>31</code>，绿色是<code>0b111000</code>，也就是 <code>56</code>，，蓝色是 <code>0</code>.我们等效转换成 <code>RGB888</code>，有：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>R = 31/31*255 = 255
G = 56/63*255 = 226
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在调色板输入对应颜色，就可以得到黄色</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image18.png" alt=""></p><h4 id="dbi-接口" tabindex="-1"><a class="header-anchor" href="#dbi-接口" aria-hidden="true">#</a> DBI 接口</h4><p>因为 <code>DBI</code> 通讯效率较高，所以可以使用 <code>RGB565</code> 或者 <code>RGB666</code>，使用 <code>DBI</code> 接口，也就是 <code>lcd_if</code> 设置为<code>1</code>时，驱动会根据 <code>lcd_pixel_fmt</code> 配置寄存器，以 <code>SDK</code> 中的 <code>kld2844b.c</code> 为例，这显示屏的显示驱动也是 <code>ST7789</code>，但是不同的屏幕，厂家封装时已经限制了通讯方式，所以即使是能使用 DBI 接口的驱动芯片的屏幕，或许也用不了DBI。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">sunxi_lcd_cmd_write</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Interface Pixel Format */</span>
<span class="token comment">/* 55----RGB565;66---RGB666 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_RGB_565 <span class="token operator">||</span>
    info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_BGR_565<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sunxi_lcd_para_write</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_RGB_565<span class="token punctuation">)</span>
        rotate <span class="token operator">&amp;=</span> <span class="token number">0xf7</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        rotate <span class="token operator">|=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">&lt;</span> LCDFB_FORMAT_RGB_888<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sunxi_lcd_para_write</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_BGRA_8888 <span class="token operator">||</span>
        info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_BGRX_8888 <span class="token operator">||</span>
        info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_ABGR_8888 <span class="token operator">||</span>
        info<span class="token punctuation">[</span>sel<span class="token punctuation">]</span><span class="token punctuation">.</span>lcd_pixel_fmt <span class="token operator">==</span> LCDFB_FORMAT_XBGR_8888<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rotate <span class="token operator">|=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">sunxi_lcd_para_write</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 DBI 格式，不再是以字节的形式去解析，而是以字的方式去解析，为了统一，软件已经规定了，<code>RGB565</code> 格式时，字大小是2字节，也就是16位，而 <code>RGB666</code> 格式时，字大小是4字节，也就是32位。</p><p>对于 <code>RGB565</code> 格式，同样是设置为 <code>0xff,0x00</code>。因为屏幕是大端，而芯片存储方式是小端，所以芯片的 DBI 模块，会自动把数据从新排列，也就是实际上 DBI 发送数据时，会先发送<code>0x00</code>，再发送<code>0xff</code>，也就是红色分量为0，绿色分量为 <code>0b000111</code>，也就是7，蓝色分量是 <code>0x11111</code>，也就是31，我们同样转换成RGB888</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>G = 7/63*255 = 28
B= 31/31*255 = 255
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在调色板上输入，可以得到蓝色。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image19.png" alt=""></p><p>如果是 <code>RGB666</code>，虽然占用的是3个字节，但是没有CPU是3字节对齐的，所以需要一次性输入4字节，然后 DBI 硬件模块，会自动舍弃1个字节，软件同意舍弃了最后一个字节。</p><p>依旧以例程为例，例程输入了 <code>0xff，0x00，0xff，0x00</code>，为了方便说明，标准为 <code>0xff(1)，0x00(1)，0xff(2)，0x00(2)</code>，其中 <code>0x00(2)</code>会被舍弃掉，然后发送顺序是<code>0xff(2)，0x00(1)，0xff(1)</code>，也就是 <code>0xff(2)</code> 是红色分量，<code>0xff(1)</code> 是蓝色分量，混合可以得到紫色。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter5/image20.png" alt=""></p>`,60);function ce(te,oe){const s=d("ExternalLinkIcon");return c(),t("div",null,[p,n("p",null,[e("查看"),n("a",r,[e("带te脚的屏"),a(s)]),e("进一步说明。")]),u,n("p",null,[e("设置屏的刷新率，单位Hz。当"),n("a",_,[e("lcd_dbi_te"),a(s)]),e("使能时，这个值设置无效。")]),h,n("ol",null,[v,b,n("li",null,[e("这里的针对对2 data lane的关键参数是"),n("a",m,[e("lcd_if"),a(s)]),e("，"),n("a",k,[e("lcd_dbi_if"),a(s)]),e("，"),n("a",f,[e("lcd_dbi_fmt"),a(s)]),e("和"),n("a",g,[e("lcd_spi_bus_num"),a(s)]),e("。")]),n("li",null,[n("a",x,[e("lcd_x"),a(s)]),e("和"),n("a",w,[e("lcd_y"),a(s)]),e("是屏分辨率。如果屏支持旋转（横竖旋转），这里也需要对调。")]),n("li",null,[n("a",B,[e("lcd_pwm"),a(s)]),e("开头，"),n("a",D,[e("lcd_backlight"),a(s)]),e("和"),n("a",C,[e("lcd_bl_en"),a(s)]),e("的是背光相关设置，如果有相关硬件连接的话。")]),n("li",null,[n("a",R,[e("lcd_pixel_fmt"),a(s)]),e("和"),n("a",y,[e("fb_buffer_num"),a(s)]),e("是显示framebuffer的设置。")]),n("li",null,[n("a",L,[e("lcd_gpio_"),a(s)]),e("开头的是自定义gpio的设置（比如复位脚）。")]),n("li",null,[n("a",I,[e("lcd_fps"),a(s)]),e("和"),n("a",G,[e("lcd_dbi_te"),a(s)]),e("是刷新方式相关的设置。")])]),P,F,n("p",null,[e("一些IC不支持DBI，那么只能用spi接口（通过设置"),n("a",O,[e("lcd_if"),a(s)]),e("），如果使用spi接口，它有一些限制。")]),n("ol",null,[A,n("li",null,[e("必须指定DC脚。这是由于spi协议不会自动控制DC脚来区分数据命令，通过设置"),n("a",S,[e("lcd_spi_dc_pin"),a(s)]),e("可以完成这个目的，这跟管脚不必用spi里面的脚。")]),E]),T,n("ol",null,[M,q,n("li",null,[e("然后使能"),n("a",N,[e("lcd_dbi_te"),a(s)]),e("。")]),z,U]),V,n("ol",null,[n("li",null,[e("lcd_fb0的配置中需要将"),n("a",H,[e("lcd_x"),a(s)]),e("和"),n("a",X,[e("lcd_y"),a(s)]),e("的值对调，此时软件将屏视为横屏。")]),W]),j,K,n("ol",null,[n("li",null,[e("SPI/DBI硬件传输速度，也就是时钟脚的频率。设置"),n("a",Y,[e("lcd_data_speed"),a(s)]),e("可以设置硬件传输速度，最大不超过100MHz。如果屏能正常接收，这个值自然是越大越好。")]),Q,n("li",null,[e("使用2 data lane还是1 data lane，理论上2 data lane的速度会翻倍。见"),n("a",J,[e("典型2 data lane配置"),a(s)]),e("。")]),Z,n("li",null,[n("a",$,[e("带te脚的屏"),a(s)]),e("一节中我们知道，te相关设置直接影响到屏刷新率。")]),n("li",null,[e("如果不支持te，可以通过设置"),n("a",nn,[e("lcd_fps"),a(s)]),e("来控制帧率，你需要根据第一点和第二点选择一个合适的值。")])]),en,n("ol",null,[sn,n("li",null,[e("驱动支持pwm背光调节，只需要配置好"),n("a",an,[e("lcd_pwm"),a(s)]),e("开头，"),n("a",ln,[e("lcd_backlight"),a(s)]),e("和"),n("a",dn,[e("lcd_bl_en"),a(s)]),e("等背光相关配置即可。")])]),cn,n("ol",null,[n("li",null,[n("a",tn,[e("lcd_pixel_fmt"),a(s)]),e("，这个设置项用于设置fbdev的像素格式。")]),n("li",null,[n("a",on,[e("lcd_dbi_fmt"),a(s)]),e("，这个用于设置DBI接口发送的像素格式。")])]),pn,rn,un,n("p",null,[e("有多个电源的话，就用lcd_power1，lcd_power2......然后屏驱动里面调用"),n("a",_n,[e("sunxi_lcd_power_enable"),a(s)]),e("接口即可。")]),hn,n("p",null,[n("a",vn,[e("lcd_bl_en"),a(s)]),e("、"),n("a",bn,[e("lcd_spi_dc_pin"),a(s)]),e("以及"),n("a",mn,[e("lcd_gpio_x"),a(s)]),e("都是属于GPIO属性类型。")]),kn,n("ol",null,[fn,n("li",null,[e("需要在sys_config.fex里面新增lcd_fb1，配置方式与lcd_fb0一样（或者在显示私有方式的板级配置文件里面新增"),gn,e("，配置方式与g_lcd0_config一样），其中"),n("a",xn,[e("lcd_spi_bus_num"),a(s)]),e("不能一样。")])]),wn,n("p",null,[e("这是开屏流程中第一步，一般在这个函数使用"),n("a",Bn,[e("sunxi_lcd_gpio_set_value"),a(s)]),e("进行GPIO控制，用"),n("a",Dn,[e("sunxi_lcd_power_enable"),a(s)]),e("函数进行电源开关。")]),Cn,Rn,n("p",null,[e("这是开屏流程第二步，一般使用"),n("a",yn,[e("sunxi_lcd_cmd_write"),a(s)]),e("和sunxi_lcd_para_write对屏寄存器进行初始化。")]),Ln,In,Gn,Pn,Fn,n("ol",null,[n("li",null,[n("a",On,[e("sunxi_lcd_backlight_enable"),a(s)]),e(", 打开lcd_bl_en脚。")]),n("li",null,[n("a",An,[e("sunxi_lcd_pwm_enable"),a(s)]),e(", 使能pwm。")])]),Sn,En,n("ol",null,[n("li",null,[n("a",Tn,[e("sunxi_lcd_backlight_disable"),a(s)]),e("，lcd_bl_en关闭")]),n("li",null,[n("a",Mn,[e("sunxi_lcd_pwm_disable"),a(s)]),e(", 关闭pwm。")])]),qn,n("p",null,[e("这是关屏流程中最后一步，一般在这个函数使用"),n("a",Nn,[e("sunxi_lcd_gpio_set_value"),a(s)]),e("进行GPIO控制，用"),n("a",zn,[e("sunxi_lcd_power_enable"),a(s)]),e("函数进行电源开关。")]),Un,n("p",null,[e("功能：打开/关闭背光，操作的是"),n("a",Vn,[e("lcd_bl_en"),a(s)]),e("。")]),Hn,n("p",null,[e("一般是电源或者pwm相关配置没有配置好。参考"),n("a",Xn,[e("lcd_pwm"),a(s)]),e("开头的相关配置。")]),Wn,jn,n("ol",null,[Kn,Yn,Qn,n("li",null,[e("如果屏初始化成功，但是发数据时又没法显示，那么需要检查是不是帧率过快，查看"),n("a",Jn,[e("帧率控制"),a(s)]),e("。")]),n("li",null,[e("如果电源复位脚正常，请检查配置，"),n("a",Zn,[e("lcd_dbi_if"),a(s)]),e(", "),n("a",$n,[e("lcd_dbi_fmt"),a(s)]),e("是否正确，屏是否支持, 如果支持，在屏驱动里面是否有对应上。")]),n("li",null,[e("尝试修改"),n("a",ne,[e("lcd_dbi_clk_mode"),a(s)]),e("。")])]),ee,n("p",null,[e("非常有可能是速度跑太快，参考"),n("a",se,[e("帧率控制"),a(s)]),e("一小节。")]),ae,ie,n("p",null,[e("尝试修改"),n("a",le,[e("lcd_dbi_clk_mode"),a(s)]),e("。")]),de])}const re=l(o,[["render",ce],["__file","chapter5.html.vue"]]);export{re as default};
