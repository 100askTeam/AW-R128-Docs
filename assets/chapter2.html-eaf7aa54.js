import{_ as a,o as t,c as e,e as s}from"./app-e85d5a28.js";const o={},n=s(`<h1 id="启动与资源划分" tabindex="-1"><a class="header-anchor" href="#启动与资源划分" aria-hidden="true">#</a> 启动与资源划分</h1><p>下面简单介绍一下 R128 方案的资源划分与启动流程。</p><h2 id="资源划分" tabindex="-1"><a class="header-anchor" href="#资源划分" aria-hidden="true">#</a> 资源划分</h2><h3 id="cpu-资源划分" tabindex="-1"><a class="header-anchor" href="#cpu-资源划分" aria-hidden="true">#</a> CPU 资源划分</h3><p><strong>这只是默认配置方案，CPU 资源划分可以按照需求任意修改</strong></p><table><thead><tr><th>CPU</th><th>功能说明</th></tr></thead><tbody><tr><td>M33</td><td>控制核。运行 WI-FI/BT 固件、协议栈、驱动、休眠唤醒、安全启动、安全控制</td></tr><tr><td>C906</td><td>应用核。运行大部分驱动与主要应用，控制台</td></tr><tr><td>HIFI5</td><td>算法核。运行音频相关驱动与算法</td></tr></tbody></table><h3 id="内存配置" tabindex="-1"><a class="header-anchor" href="#内存配置" aria-hidden="true">#</a> 内存配置</h3><p>R128 方案目前三个核 OS 运行的地址范围如下表。</p><p><strong>这只是默认配置方案，CPU 资源划分可以按照需求任意修改。</strong></p><table><thead><tr><th>CPU</th><th>内存使用地址</th></tr></thead><tbody><tr><td>M33</td><td><code>lspsram</code>，运行地址范围 0x8000000 - 0x8300000</td></tr><tr><td>C906</td><td><code>lspsram</code>，运行地址范围 0x8300000 - 0x8800000</td></tr><tr><td>HIFI5</td><td><code>hspsram</code>，运行地址范围 0xC000660 - 0xC0A0660</td></tr></tbody></table><h2 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程" aria-hidden="true">#</a> 启动流程</h2><p>R128 方案非安全启动流程如下，其中 M33 为启动核：</p><blockquote><p>这只是默认配置方案，启动流程可以按照需求任意修改。</p></blockquote><ol><li>BROM <ol><li>加载 M33 BOOT0 至 SRAM</li><li>跳转 M33 BOOT0 运行</li></ol></li><li>M33 BOOT0 <ol><li>初始化 LSPSRAM 与 HSPSRAM</li><li>加载 M33 RTOS 至 LSPSRAM</li><li>加载 C906 RTOS 至 LSPSRAM</li><li>加载 HIFI5 RTOS 至 HSPSRAM</li><li>跳转运行 M33 RTOS</li></ol></li><li>M33 RTOS <ol><li>启动运行 C906 RTOS</li><li>启动运行 HIFI5 RTOS</li></ol></li><li>C906 RTOS <ol><li>启动运行用户程序</li></ol></li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span>
    BROM<span class="token arrow operator">--&gt;&gt;</span>SRAM<span class="token operator">:</span> load M33 Core BOOT0 to SRAM
    BROM<span class="token arrow operator">--&gt;&gt;</span>BOOT0<span class="token operator">:</span> Boot BOOT0 on M33
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>LSPSRAM<span class="token operator">:</span> init LSPSRAM
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>HSPSRAM<span class="token operator">:</span> init HSPSRAM
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>LSPSRAM<span class="token operator">:</span> load M33 RTOS to LSPSRAM
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>LSPSRAM<span class="token operator">:</span> load C906 RTOS to LSPSRAM
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>HSPSRAM<span class="token operator">:</span> load HIFI5 RTOS to HSPSRAM
    BOOT0<span class="token arrow operator">--&gt;&gt;</span>M33<span class="token operator">:</span> BOOT0 Boot M33 RTOS
    M33<span class="token arrow operator">--&gt;&gt;</span>C906<span class="token operator">:</span> Boot C906 RTOS
    C906<span class="token arrow operator">--&gt;&gt;</span>LSPSRAM<span class="token operator">:</span> C906 RTOS Running on LSPSRAM
    M33<span class="token arrow operator">--&gt;&gt;</span>HIFI5<span class="token operator">:</span> Boot HIFI5 RTOS
    HIFI5<span class="token arrow operator">--&gt;&gt;</span>HSPSRAM<span class="token operator">:</span> HIFI5 RTOS Running on HSPSRAM
    C906<span class="token arrow operator">--&gt;&gt;</span>HSPSRAM<span class="token operator">:</span> APP Running on HSPSRAM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改运行核心" tabindex="-1"><a class="header-anchor" href="#修改运行核心" aria-hidden="true">#</a> 修改运行核心</h2><p>系统有三个不同的核心，分别是 M33，C906，HIFI5，其中M33是启动核心不可以关闭，另外两个核心都可以关闭。当不需要使用 C906 核心或者 HIFI5 DSP 核心的时候，可以将这两个核心关闭。方法如下：</p><h3 id="关闭-hifi5-核心" tabindex="-1"><a class="header-anchor" href="#关闭-hifi5-核心" aria-hidden="true">#</a> 关闭 HIFI5 核心</h3><p>首先，选择好 M33 的方案，因为 HIFI5 是由 M33 来启动的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source envsetup.sh
lunch_rtos r128s2_m33
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接取消勾选即可：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image1.jpeg" alt="image1"></p><h3 id="关闭-c906-核心" tabindex="-1"><a class="header-anchor" href="#关闭-c906-核心" aria-hidden="true">#</a> 关闭 C906 核心</h3><p>首先，选择好 M33 的方案，因为 C906 是由 M33 来启动的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source envsetup.sh
lunch_rtos r128s2_m33
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接取消勾选即可：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image1.jpeg" alt="image1"></p><h2 id="修改核心运行内存空间" tabindex="-1"><a class="header-anchor" href="#修改核心运行内存空间" aria-hidden="true">#</a> 修改核心运行内存空间</h2><h3 id="修改到-hspsram-运行" tabindex="-1"><a class="header-anchor" href="#修改到-hspsram-运行" aria-hidden="true">#</a> 修改到 HSPSRAM 运行</h3><p>R128 的 M33 和 C906 两个核运行的系统都是默认运行在 LSPSRAM，这里示例如何修改到 HSPSRAM</p><ol><li>关闭启动 HIFI5 核心</li></ol><p>首先，选择好 M33 的方案，因为 HIFI5 是由 M33 来启动的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source envsetup.sh
lunch_rtos r128s2_m33
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于默认 HIFI5 是运行在 HSPSRAM 的，这里需要释放 HSPSRAM。运行 <code>mrtos_menuconfig</code> 启动配置。</p><p>直接取消勾选即可。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image1.jpeg" alt="image1"></p><ol start="2"><li>将 M33 和 C906 设置成在 HSPSRAM 运行</li></ol><p>首先选择 M33 的方案：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source envsetup.sh
lunch_rtos r128s2_m33
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行 <code>mrtos_menuconfig</code> 修改启动地址，所需要修改的配置如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image2.jpeg" alt="image2"></p><blockquote><p>lspsram 地址空间为 0x8000000-0x87fffff，hspsram 地址空间为 0xc000000-0xc7fffff。</p></blockquote><p>这里将所需要的修改的核的地址，将8改成c即可。如修改 M33 的起始地址，将 <code>0x08004000</code>，修改成<code>0x0c004000</code> 即可，如下图。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image3.jpeg" alt="image3"></p><p>然后保存配置，重新编译 M33 方案。接下来修改 C906 的地址，选择 C906 的方案</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source envsetup.sh
lunch_rtos r128s2_c906
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行 <code>mrtos_menuconfig</code> 修改启动地址，所需要修改的配置如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image4.jpeg" alt="image4"></p><p>然后保存配置，重新编译 C906 方案。</p><ol start="3"><li>修改配置文件</li></ol><p>首先，确认自己方案使用的 <code>image_header</code> 文件，运行一次打包的命令 <code>pack</code>，从打包的 <code>log</code> 中能看出方案所选的文件，如下图：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image4-1.jpeg" alt="image4-1"></p><p>如果需要修改 M33 的地址，则只修改 M33 的即可，C906同理。如果取消启动 DSP，则直接注销掉 DSP的配置代码。</p><p>最后，修改 M33 和 C906 在 HSPSRAM 运行，并且取消运行 HIFI5 的 <code>image_header</code> 文件修改可如下所示：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>diff --git a/r128s2/pro/configs/image_header_xip.cfg b/r128s2/pro/configs/image_header_xip.cfg
index 5c83ac1..fc87d06 100755
<span class="token coord">--- a/r128s2/pro/configs/image_header_xip.cfg</span>
<span class="token coord">+++ b/r128s2/pro/configs/image_header_xip.cfg</span>
<span class="token coord">@@ -30,9 +30,9 @@</span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a00&quot;, &quot;bin&quot;: &quot;boot0_spinor.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0x40b0000&quot;, &quot;ep&quot;: &quot;0x40b0080&quot;},
</span><span class="token prefix unchanged"> </span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a00&quot;, &quot;bin&quot;: &quot;boot0_sdcard.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0x40b0000&quot;, &quot;ep&quot;: &quot;0x40b0080&quot;},
</span><span class="token prefix unchanged"> </span><span class="token line">        {&quot;id&quot;: &quot;0xa5e15a01&quot;, &quot;bin&quot;: &quot;freertos-gz.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;},
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_arm.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0x8004000&quot;, &quot;ep&quot;: &quot;0x8004000&quot;},
</span><span class="token prefix deleted">-</span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_riscv.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0x8200000&quot;, &quot;ep&quot;: &quot;0x8200000&quot;},
</span><span class="token prefix deleted">-</span><span class="token line">           {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_dsp.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0xc000000&quot;, &quot;ep&quot;: &quot;0xc000660&quot;},
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_arm.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0xc004000&quot;, &quot;ep&quot;: &quot;0xc004000&quot;},
</span><span class="token prefix inserted">+</span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_riscv.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0xc200000&quot;, &quot;ep&quot;: &quot;0xc200000&quot;},
</span><span class="token prefix inserted">+</span><span class="token line">       //    {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_dsp.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0xc000000&quot;, &quot;ep&quot;: &quot;0xc000660&quot;},
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;etf.fex&quot;, &quot;attr&quot;: &quot;0x01&quot;, &quot;sram_offs&quot;: &quot;0x4000000&quot;, &quot;ep&quot;: &quot;0x4000000&quot;},
</span><span class="token prefix unchanged"> </span><span class="token line">        {&quot;id&quot;: &quot;0xa5e05a01&quot;, &quot;bin&quot;: &quot;rtos_xip_rv.fex&quot;, &quot;attr&quot;: &quot;0x02&quot;},
</span><span class="token prefix unchanged"> </span><span class="token line">        {}
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看代码内存分布" tabindex="-1"><a class="header-anchor" href="#查看代码内存分布" aria-hidden="true">#</a> 查看代码内存分布</h2><p>可以在 SDK 中运行 kamp 命令查看代码的内存分布</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image5.png" alt="image"></p><p>可以在最后查看内存的总使用情况</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image6.png" alt="image"></p><h2 id="配置xip" tabindex="-1"><a class="header-anchor" href="#配置xip" aria-hidden="true">#</a> 配置XIP</h2><p>R128-S2 内置 NOR FLASH，可以将运行效率要求不高的代码保存在 XIP 段中，减少内存的占用。</p><p>配置 XIP 需要把对应的函数和库文件加入 xip.lds.S 中，具体语法请参照 ld 语法。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image7.png" alt="image"></p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image8.png" alt="image"></p><h2 id="配置多个堆内存" tabindex="-1"><a class="header-anchor" href="#配置多个堆内存" aria-hidden="true">#</a> 配置多个堆内存</h2><p>有些时候当不需要使用 DSP 核心或者 DSP 核心内存使用量较少时，可以配置多个堆内存，将一部分内存放置于不同的 RAM 上使用。这里以 R128-S2 关闭 DSP 核心并将 HSPSRAM 分配给 C906 核心使用为例：</p><h3 id="配置前内存分布情况" tabindex="-1"><a class="header-anchor" href="#配置前内存分布情况" aria-hidden="true">#</a> 配置前内存分布情况</h3><p>配置前进入 C906 核心运行 free 命令查看当前内存使用分布情况。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image9.png" alt="image"></p><h3 id="关闭-dsp-核心" tabindex="-1"><a class="header-anchor" href="#关闭-dsp-核心" aria-hidden="true">#</a> 关闭 DSP 核心</h3><p>首先，选择好 M33 的方案，因为 DSP 是由 M33 来启动的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> envsetup.sh
lunch_rtos r128s2_m33
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于默认 DSP 是运行在 HSPSRAM 的，这里需要释放 HSPSRAM。运行 mrtos_menuconfig 启动配置。</p><p>直接取消勾选即可。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image10.png" alt="image"></p><p>修改后请重新编译 M33 核心的固件。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image11.png" alt="image"></p><h3 id="将-hpsram-全部分配给-c906-使用" tabindex="-1"><a class="header-anchor" href="#将-hpsram-全部分配给-c906-使用" aria-hidden="true">#</a> 将 HPSRAM 全部分配给 C906 使用</h3><p>选择好 C906 的方案，运行配置界面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> envsetup.sh
lunch_rtos r128s2_c906
image-20231017135824514
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image12.png" alt="image"></p><p>找到 Kernel Options</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image13.png" alt="image"></p><p>找到 Heap Memory Manager (Use heap-4 to allocate memory) ---&gt;</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image14.png" alt="image"></p><p>选中 Use heap-multiple to allocate memory</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image15.png" alt="image"></p><p>配置 Default Heap Ram 为 heap in lpsram 配置默认内存堆为 lpsram</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image16.png" alt="image"></p><p>勾选 lpsram heap 和 lpsram heap dynamic address，意思是 lpsram 的内存是动态分布的</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image17.png" alt="image"></p><p>配置 lpsram heap size 的大小是0x600000，因为前面 2M 给 M33 使用，所以剩下 6M</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image18.png" alt="image"></p><p>配置 hpsram heap 使能 HPSRAM，并配置 hpsram heap start address 为 0xc000000，hpsram heap size 为 0x7FFFFF 表示将 HPSRAM 全部分配给 C906 核心使用。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image19.png" alt="image"></p><h3 id="将-hpsram-部分分配给-c906-使用" tabindex="-1"><a class="header-anchor" href="#将-hpsram-部分分配给-c906-使用" aria-hidden="true">#</a> 将 HPSRAM 部分分配给 C906 使用</h3><p>如果 HPSRAM 需要运行 DSP，可以分配部分给 C906 使用，配置 hpsram heap start address为 0xc400000，0xc000000 是 HPSRAM 的开始地址，前面 4M 已经分配给 DSP 使用；并配置 hpsram heap size 为 0x400000 意思是可以用的 HPSRAM 大小是 4M。</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image20.png" alt="image"></p><h3 id="配置后的内存分布情况" tabindex="-1"><a class="header-anchor" href="#配置后的内存分布情况" aria-hidden="true">#</a> 配置后的内存分布情况</h3><p>编译打包烧录后，可以使用 free 命令查看配置后的内存分布情况。可以看到 HPSRAM 的8M内存全部分配给 C906 使用了，C906 一共可以用 4M LPSRAM + 8M HPSRAM = 12M RAM</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/quick-start/part4/chapter2/image21.png" alt="image"></p>`,102),r=[n];function i(p,d){return t(),e("div",null,r)}const u=a(o,[["render",i],["__file","chapter2.html.vue"]]);export{u as default};
