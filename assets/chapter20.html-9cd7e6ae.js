import{_ as n,o as s,c as a,e as p}from"./app-e85d5a28.js";const t={},e=p(`<h1 id="pwm" tabindex="-1"><a class="header-anchor" href="#pwm" aria-hidden="true">#</a> PWM</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>脉冲宽度调制（PWM）是一种对模拟信号电平进行数字编码的方法。通过高分辨率计数器的使用，方波的占空比被调制用来对一个具体模拟信号的电平进行编码。PWM 具有以下特点：</p><ul><li>支持脉冲（脉冲个数可配）、周期和互补对输出；</li><li>支持捕捉输入；</li><li>带可编程死区发生器，死区时间可控；</li><li>0-24M/100M 输出频率范围、0%-100% 占空比可调、最小分辨率 1/65536；</li><li>支持 PWM 输出和捕捉输入产生中断；</li><li>支持 PWM 组模式，同组内各个通道起始相位可配置。</li></ul><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>配置路径如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            pwm devices ---&gt;
                [*] enable pwm driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos<span class="token operator">-</span>hal<span class="token operator">/</span>
<span class="token operator">|</span><span class="token operator">--</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>pwm<span class="token operator">/</span>hal_pwm<span class="token punctuation">.</span>c    <span class="token comment">// hal层接口代码</span>
<span class="token operator">|</span><span class="token operator">--</span>include<span class="token operator">/</span>hal<span class="token operator">/</span>sunxi_hal_pwm<span class="token punctuation">.</span>h <span class="token comment">// 头文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_pwm.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="返回值枚举" tabindex="-1"><a class="header-anchor" href="#返回值枚举" aria-hidden="true">#</a> 返回值枚举</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    HAL_PWM_STATUS_ERROR_PARAMETER <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
    HAL_PWM_STATUS_ERROR_CHANNEL <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>
    HAL_PWM_STATUS_ERROR <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    HAL_PWM_STATUS_OK <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span> <span class="token class-name">hal_pwm_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pwm-初始化接口" tabindex="-1"><a class="header-anchor" href="#pwm-初始化接口" aria-hidden="true">#</a> PWM 初始化接口</h3><p>PWM 模块初始化，主要完成 clk 初始化</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pwm_status_t</span> <span class="token function">hal_pwm_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li></li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="pwm-通道配置接口" tabindex="-1"><a class="header-anchor" href="#pwm-通道配置接口" aria-hidden="true">#</a> PWM 通道配置接口</h3><p>配置 PWM 模块某个通道，包括周期、占空比和极性</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pwm_status_t</span> <span class="token function">hal_pwm_control</span><span class="token punctuation">(</span><span class="token keyword">int</span> channel<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pwm_config</span> <span class="token operator">*</span>config_pwm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>channel 代表通道号</li><li>config_pwm 代表该通道的配置参数</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="pwm-通道使能接口" tabindex="-1"><a class="header-anchor" href="#pwm-通道使能接口" aria-hidden="true">#</a> PWM 通道使能接口</h3><p>使能 PWM 模块某个通道</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_pwm_enable_controller</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> channel_in<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>channel_in 代表通道号</li></ul><p>返回值：</p><ul><li>无</li></ul><h3 id="pwm-去初始化接口" tabindex="-1"><a class="header-anchor" href="#pwm-去初始化接口" aria-hidden="true">#</a> PWM 去初始化接口</h3><p>PWM 模块去初始化，主要关闭 clk</p><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pwm_status_t</span> <span class="token function">hal_pwm_deinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_log.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_cmd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sunxi_hal_pwm.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_ARCH_DSP<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;delay.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sleep</span><span class="token expression"><span class="token punctuation">(</span>sec<span class="token punctuation">)</span> <span class="token function">msleep</span><span class="token punctuation">(</span>sec <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">printfFromISR</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">printfFromISR</span> <span class="token expression">printf</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_test_pwm</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">struct</span> <span class="token class-name">pwm_config</span> <span class="token operator">*</span>config<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> port<span class="token punctuation">;</span>
    <span class="token comment">//uint8_t ns;</span>
    <span class="token keyword">int</span> period<span class="token punctuation">,</span> duty<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: pwm port | duty | period\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Run pwm hal layer test case\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;port = %d&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    duty <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    period <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pwm_config</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pwm_config</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    config<span class="token operator">-&gt;</span>duty_ns   <span class="token operator">=</span> duty<span class="token punctuation">;</span>
    config<span class="token operator">-&gt;</span>period_ns <span class="token operator">=</span> period<span class="token punctuation">;</span>
    config<span class="token operator">-&gt;</span>polarity  <span class="token operator">=</span> PWM_POLARITY_NORMAL<span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;duty_ns = %d \\n&quot;</span><span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>duty_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;period_ns = %d \\n&quot;</span><span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>period_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;polarity = %d \\n&quot;</span><span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>polarity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_pwm_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_pwm_control</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;control pwm test finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_test_pwm<span class="token punctuation">,</span> hal_pwm<span class="token punctuation">,</span> pwm hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_release_pwm_channel</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">struct</span> <span class="token class-name">pwm_config</span> <span class="token operator">*</span>config<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> port<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> ns<span class="token punctuation">;</span>
    ulong period<span class="token punctuation">,</span> duty<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: pwm port\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;Run close pwm channel test case\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    port <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;port = %d&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_pwm_release</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hal_log_info</span><span class="token punctuation">(</span><span class="token string">&quot;release pwm channel finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_release_pwm_channel<span class="token punctuation">,</span> hal_pwm_close<span class="token punctuation">,</span> release pwm channel hal APIs tests<span class="token punctuation">)</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pwm_cap_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> param<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    hal_pwm_cap_info <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token punctuation">(</span>hal_pwm_cap_info <span class="token operator">*</span><span class="token punctuation">)</span>param<span class="token punctuation">;</span>

    <span class="token function">printfFromISR</span><span class="token punctuation">(</span><span class="token string">&quot;pwm%d capture callback, cnt is %d, period is %d, duty is %d\\n&quot;</span><span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>channel<span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>cnt<span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>period<span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>duty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">hal_pwm_status_t</span> <span class="token function">pwm_capture_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> channel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token function">hal_pwm_cap_enable</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> pwm_cap_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> HAL_PWM_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">hal_pwm_status_t</span> <span class="token function">pwm_capture_deinit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> channel<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">hal_pwm_cap_disable</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> HAL_PWM_STATUS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">cmd_pwm_capture_help</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pwm capture test, stop capture after 10s\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usage: pwm_capture_test&lt;channel&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&lt;channel&gt;: 0 ~ 15\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;eg: pwm_capture_test 0, pwm0 capture function\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_pwm_capture</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cmd_pwm_capture_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* capture setting */</span>
    <span class="token function">pwm_capture_init</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* disable */</span>
    <span class="token function">pwm_capture_deinit</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s]: pwm stop capture ssd\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_pwm_capture<span class="token punctuation">,</span> pwm_capture_test<span class="token punctuation">,</span> pwm capture test<span class="token punctuation">)</span>
\`\`</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","chapter20.html.vue"]]);export{r as default};
