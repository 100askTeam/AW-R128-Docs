import{_ as n,o as s,c as a,e as t}from"./app-e85d5a28.js";const p={},e=t(`<h1 id="msgbox" tabindex="-1"><a class="header-anchor" href="#msgbox" aria-hidden="true">#</a> MSGBOX</h1><p>msgbox 用来实现多 CPU 之间通讯，在一些 IC 内部可能同时存在多种核心用来实现多种不同功能，这些不同核心运行不同架构、不同系统，需要通过 MSGBOX 用来实现这些不同系统间通讯。</p><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><ul><li>msgbox 为一个双端 fifo 结构，cpu0 从一端写，cpu1 从一端读。</li><li>rpmsg 为 linux 用来实现通讯的一种框架</li><li>msgbox 为片上处理器之间提供了中断通讯机制</li></ul><p>对于 R128 平台，CPU Remote ID如下</p><table><thead><tr><th style="text-align:left;">CPU</th><th style="text-align:left;">Remote ID</th></tr></thead><tbody><tr><td style="text-align:left;">ARM M33 Star</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">RISC-V C906</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">HIFI5 DSP</td><td style="text-align:left;">2</td></tr></tbody></table><h2 id="模块配置" tabindex="-1"><a class="header-anchor" href="#模块配置" aria-hidden="true">#</a> 模块配置</h2><p>配置路径如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kernel Setup ---&gt;
    Drivers Setup ---&gt;
        SoC HAL Drivers ---&gt;
            msgbox devices ---&gt;
                [*] enable msgbox driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>msgbox<span class="token operator">/</span>
    ├── msgbox_amp            <span class="token comment">// msgbox AMP 实现</span>
    │   ├── Makefile
    │   └── msgbox_amp<span class="token punctuation">.</span>c        
    ├── platform              <span class="token comment">// 平台寄存器定义</span>
    │   ├── msgbox<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>h
    └── platform<span class="token operator">-</span>msgbox<span class="token punctuation">.</span>h     <span class="token comment">// 公共头文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_msgbox.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化接口" tabindex="-1"><a class="header-anchor" href="#初始化接口" aria-hidden="true">#</a> 初始化接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">int32_t</span> <span class="token function">hal_msgbox_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="通道申请接口" tabindex="-1"><a class="header-anchor" href="#通道申请接口" aria-hidden="true">#</a> 通道申请接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">hal_msgbox_alloc_channel</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> <span class="token operator">*</span>edp<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> remote<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> read<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>edp：msgbox的端点</li><li>remote：远端核心id</li><li>read：读通道</li><li>write：写通道</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="数据发送接口" tabindex="-1"><a class="header-anchor" href="#数据发送接口" aria-hidden="true">#</a> 数据发送接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">hal_msgbox_channel_send</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> <span class="token operator">*</span>edp<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>bf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>edp：msgbox的端点</li><li>bf：数据buffer</li><li>len：buffer长度</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="通道释放接口" tabindex="-1"><a class="header-anchor" href="#通道释放接口" aria-hidden="true">#</a> 通道释放接口</h3><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_msgbox_free_channel</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> <span class="token operator">*</span>edp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>edp：msgbox的端点</li></ul><p>返回值：</p><ul><li>0：成功</li><li>负数：失败</li></ul><h3 id="msgbox-申请流程" tabindex="-1"><a class="header-anchor" href="#msgbox-申请流程" aria-hidden="true">#</a> MSGBOX 申请流程</h3><ol><li>使用hal_msgbox_alloc_channel接口申请 msgbox 通道</li><li>填充msg_endpoint接收回调，这个会在 msgbox 的中断函数里调用</li><li>通过hal_msgbox_channel_send进行数据发送</li><li>接收通过中断的方式进行接收，会调用msg_endpoint的回调，无需主动调用</li></ol><h3 id="msgbox-接收流程" tabindex="-1"><a class="header-anchor" href="#msgbox-接收流程" aria-hidden="true">#</a> MSGBOX 接收流程</h3><ol><li>在接收函数里会首先遍历所有的msg_endpoint，判断当前终端是否有中断发送</li><li>irq_msgbox_channel_handler里会读取当前msg_endpoint的寄存器，来判断是否有中断，如果有，则读取数据</li><li>退出中断</li></ol><h3 id="msgbox-发送流程" tabindex="-1"><a class="header-anchor" href="#msgbox-发送流程" aria-hidden="true">#</a> MSGBOX 发送流程</h3><ol><li>调用hal_msgbox_channel_send接口进行数据发送</li><li>msgbox_channel_send_data会判断是远端处理器是哪个，并且计算 local-&gt;remote 的系数 N 是多少，这个系数回存放在 to_coef_n 的表格里</li><li>计算完成后往远端的 msgbox 的 fifo 中写数据</li><li>发送完成</li></ol><h2 id="模块使用范例" tabindex="-1"><a class="header-anchor" href="#模块使用范例" aria-hidden="true">#</a> 模块使用范例</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FreeRTOS.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;awlog.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_msgbox.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RECEIVE_QUEUE_LENGTH</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RECEIVE_QUEUE_WAIT_MS</span> <span class="token expression"><span class="token number">100</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">msgbox_demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> remote_id<span class="token punctuation">;</span>
    <span class="token keyword">int</span> read_ch<span class="token punctuation">;</span>
    <span class="token keyword">int</span> write_ch<span class="token punctuation">;</span>
    QueueHandle_t recv_queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_help_msg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;USAGE:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  hal_msgbox &lt;REQUIRED_ARGUMENTS&gt; [OPTIONS]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;REQUIRED_ARGUMENTS:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -E REMOTE_ID: specify remote id\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -R READ_CH  : specify read channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -W WRITE_CH : specify write channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;OPTIONS:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -s MESSAGE  : send MESSAGE\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -r          : receive messages\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  -t TIMEOUT  : exit in TIMEOUT seconds when receive\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e.g. (communicate with remote 0, use read channel 3 and write channel 3):\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  hal_msgbox -E 0 -R 3 -W 3 -s \\&quot;hello\\&quot; : send string \\&quot;hello\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  hal_msgbox -E 0 -R 3 -W 3 -r           : receive messages (default in 10 seconds)\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  hal_msgbox -E 0 -R 3 -W 3 -r -t 20     : receive messages in 20 seconds\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">recv_callback</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>private_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BaseType_t taskwoken <span class="token operator">=</span> pdFALSE<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Receive callback (data: 0x%lx)\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msgbox_demo</span> <span class="token operator">*</span>demo <span class="token operator">=</span> private_data<span class="token punctuation">;</span>
    BaseType_t ret <span class="token operator">=</span> <span class="token function">xQueueSendFromISR</span><span class="token punctuation">(</span>demo<span class="token operator">-&gt;</span>recv_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>taskwoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> errQUEUE_FULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recv_queue is full\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">portYIELD_FROM_ISR</span><span class="token punctuation">(</span>taskwoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_hal_msgbox</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">msgbox_demo</span> demo<span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>remote_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_ch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write_ch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>recv_queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_endpoint</span> ept<span class="token punctuation">;</span>

    TickType_t start_ticks<span class="token punctuation">,</span> current_ticks<span class="token punctuation">;</span>
    <span class="token keyword">int</span> do_send <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>data_send<span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> do_recv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> timeout_sec <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> data_recv<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print_help_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">&quot;hs:rt:E:W:R:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;h&#39;</span> <span class="token operator">:</span>
            <span class="token function">print_help_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;E&#39;</span><span class="token operator">:</span>
            demo<span class="token punctuation">.</span>remote_id <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;R&#39;</span><span class="token operator">:</span>
            demo<span class="token punctuation">.</span>read_ch <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;W&#39;</span><span class="token operator">:</span>
            demo<span class="token punctuation">.</span>write_ch <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
            do_send <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            data_send <span class="token operator">=</span> optarg<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;r&#39;</span><span class="token operator">:</span>
            do_recv <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span>
            timeout_sec <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">print_help_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>demo<span class="token punctuation">.</span>remote_id <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> demo<span class="token punctuation">.</span>read_ch <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> demo<span class="token punctuation">.</span>write_ch <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Please specify remote id, read channel and write channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_help_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;remote id: %d, write channel: %d, read channel: %d\\n&quot;</span><span class="token punctuation">,</span>
            demo<span class="token punctuation">.</span>remote_id<span class="token punctuation">,</span> demo<span class="token punctuation">.</span>write_ch<span class="token punctuation">,</span> demo<span class="token punctuation">.</span>read_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>do_recv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        demo<span class="token punctuation">.</span>recv_queue <span class="token operator">=</span> <span class="token function">xQueueCreate</span><span class="token punctuation">(</span>RECEIVE_QUEUE_LENGTH<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>demo<span class="token punctuation">.</span>recv_queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create receive queue\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ept<span class="token punctuation">.</span>rec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>recv_callback<span class="token punctuation">;</span>
        ept<span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token operator">&amp;</span>demo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">hal_msgbox_alloc_channel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ept<span class="token punctuation">,</span> demo<span class="token punctuation">.</span>remote_id<span class="token punctuation">,</span> demo<span class="token punctuation">.</span>read_ch<span class="token punctuation">,</span> demo<span class="token punctuation">.</span>write_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to allocate msgbox channel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> delete_recv_queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>do_send<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">hal_msgbox_channel_send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ept<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data_send<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data_send<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to send message\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> free_channel<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>do_recv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hal_msgbox will exit in %d seconds\\n&quot;</span><span class="token punctuation">,</span> timeout_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        start_ticks <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;start_ticks: %u\\n&quot;</span><span class="token punctuation">,</span> start_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pdTRUE <span class="token operator">==</span> <span class="token function">xQueueReceive</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>recv_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data_recv<span class="token punctuation">,</span>
                        RECEIVE_QUEUE_WAIT_MS <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received from queue: 0x%x\\n&quot;</span><span class="token punctuation">,</span> data_recv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            current_ticks <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_ticks <span class="token operator">-</span> start_ticks<span class="token punctuation">)</span> <span class="token operator">*</span> portTICK_PERIOD_MS
                    <span class="token operator">&gt;=</span> timeout_sec <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;current_ticks: %u\\n&quot;</span><span class="token punctuation">,</span> current_ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hal_msgbox exited\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

free_channel<span class="token operator">:</span>
    <span class="token function">hal_msgbox_free_channel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ept<span class="token punctuation">)</span><span class="token punctuation">;</span>
delete_recv_queue<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>do_recv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">vQueueDelete</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>recv_queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
out<span class="token operator">:</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_hal_msgbox<span class="token punctuation">,</span> hal_msgbox<span class="token punctuation">,</span> hal msgbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter19.html.vue"]]);export{r as default};
