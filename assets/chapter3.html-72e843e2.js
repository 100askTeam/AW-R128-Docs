import{_ as p,r as t,o,c,a as s,b as n,d as l,e as a}from"./app-e85d5a28.js";const i={},r=a(`<h1 id="音频框架" tabindex="-1"><a class="header-anchor" href="#音频框架" aria-hidden="true">#</a> 音频框架</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>本文档基于 RTOS 平台基础音频框架介绍，能够让使用者在 RTOS 平台开发使用音频驱动，内容分四大部分。</p><ol><li>音频时钟树-&gt; 驱动特性-&gt; 音频流通路-&gt;sys_config 配置-&gt; 编译配置-&gt; 声卡控件介绍-&gt;常见使用方法 等部分，介绍音频驱动的测试验证和使用；</li><li>源码结构-&gt; 驱动框架-&gt; 关键数据结构-&gt; 接口说明 等部分，介绍音频驱动的二次开发；</li><li>声卡查看-&gt; 声卡测试工具-&gt; 外挂 CODEC 等部分，介绍声卡模块的测试验证和使用；</li><li>FAQ”章节：调试方法及常见问题汇总。</li></ol><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>在 sunxi 平台中，从软件上通常存在5 类音频设备，如下：</p><ul><li>AudioCodec</li><li>I2S/PCM</li><li>AHUB</li><li>DMIC</li><li>S/PDIF</li></ul><p>以上每一类音频设备均适配ASoC 架构。</p><p>对于 R128 平台，具有以下音频接口资源</p><ul><li>AudioCodec x1</li><li>I2S/PCM x1</li><li>S/PDIF x1</li><li>DMIC x1</li></ul><p>另外还具有 MAD 模块，用于语音能量检测，非接口类型。</p><h3 id="驱动框架" tabindex="-1"><a class="header-anchor" href="#驱动框架" aria-hidden="true">#</a> 驱动框架</h3><p>RTOS 上面的音频驱动框架与 Linux 上 ASoC 框架的思想比较类似，分为 codec,platform 模型，core 核心层实现具体的 codec 驱动加载、platform 驱动的选择、数据的搬运、dma 指针的更新等，能够将 codec 驱动与 SoC CPU 解耦合, 方便添加外挂 codec。</p><p>音频驱动的大致框架如下：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter3/image1.png" alt=""></p><h3 id="音频时钟树" tabindex="-1"><a class="header-anchor" href="#音频时钟树" aria-hidden="true">#</a> 音频时钟树</h3><p>R128 音频模块时钟源有4 个系列，分别为24.576MHz、22.5792MHz、8.192MHz 以及高频时钟。</p><ul><li>24.576MHz、22.5792MHz 用于 Audiocodec、I2S/PCM 的播放和录音，S/PDIF 的播放，DMIC 的录音；</li><li>8.192MHz 用于系统休眠时供 Audiocodec、DMIC 录音，以及 mad 模块；</li><li>高频时钟用于 S/PDIF 的录音，以及 I2S/PCM 的 ASRC 模块；</li></ul><p>时钟树如下图所示：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter3/image2.png" alt=""></p><h2 id="audiocodec" tabindex="-1"><a class="header-anchor" href="#audiocodec" aria-hidden="true">#</a> AudioCodec</h2><h3 id="驱动特性" tabindex="-1"><a class="header-anchor" href="#驱动特性" aria-hidden="true">#</a> 驱动特性</h3><ul><li>支持多种采样率格式</li><li>播放：8~384kHz</li><li>录音：8~96kHz</li><li>支持多通道播放和录音</li><li>播放：1~2</li><li>录音：1~3</li><li>支持16/24/32bit 数据精度（硬件支持16/24bit）</li><li>支持硬件HPF、DRC、EQ 算法</li><li>支持的物理接口</li><li>INPUT : MIC</li><li>OUTPUT: LINEOUT</li><li>MIC, LINEOUT 支持差分和单端模式</li><li>支持同时playback 和capture (全双工模式)</li></ul><h3 id="音频通路" tabindex="-1"><a class="header-anchor" href="#音频通路" aria-hidden="true">#</a> 音频通路</h3><ol><li>播放流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    Playback<span class="token arrow operator">--&gt;</span>DACL<span class="token punctuation">;</span>
    Playback<span class="token arrow operator">--&gt;</span>DACR<span class="token punctuation">;</span>
    DACL<span class="token arrow operator">--&gt;</span>LINEOUTL-Output-Select<span class="token punctuation">;</span>
    LINEOUTL-Output-Select<span class="token arrow operator">--&gt;</span>LINEOUTL<span class="token punctuation">;</span>
    DACR<span class="token arrow operator">--&gt;</span>LINEOUTR-Output-Select<span class="token punctuation">;</span>
    LINEOUTR-Output-Select<span class="token arrow operator">--&gt;</span>LINEOUTR<span class="token punctuation">;</span>
    LINEOUTL<span class="token arrow operator">--&gt;</span>LINEOUT<span class="token punctuation">;</span>
    LINEOUTR<span class="token arrow operator">--&gt;</span>LINEOUT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>录音流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    MIC1<span class="token arrow operator">--&gt;</span>MIC1-Input-Select<span class="token arrow operator">--&gt;</span>ADC1<span class="token arrow operator">--&gt;</span>Capture<span class="token punctuation">;</span>
    MIC2<span class="token arrow operator">--&gt;</span>MIC2-Input-Select<span class="token arrow operator">--&gt;</span>ADC2<span class="token arrow operator">--&gt;</span>Capture<span class="token punctuation">;</span>
    MIC3<span class="token arrow operator">--&gt;</span>MIC3-Input-Select<span class="token arrow operator">--&gt;</span>ADC3<span class="token arrow operator">--&gt;</span>Capture<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="驱动配置" tabindex="-1"><a class="header-anchor" href="#驱动配置" aria-hidden="true">#</a> 驱动配置</h3><p>驱动配置在 menuconfig 中在下列位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SOUND Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                AllWinner CODEC drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
                    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner AudioCodec support
                        Allwinner AudioCodec Choose <span class="token operator">--</span><span class="token operator">-&gt;</span>
                        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner AudioCodec DAC Support 
                        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner AudioCodec ADC Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>Allwinner AudioCodec DAC Support</code> 是 DAC 模块，<code>Allwinner AudioCodec ADC Support</code> 是 ADC 模块。</p><p>参数配置如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>audiocodec<span class="token punctuation">]</span>
dacl_vol <span class="token operator">=</span> <span class="token number">129</span> <span class="token comment">//dac左声道硬件数字音量</span>
dacr_vol <span class="token operator">=</span> <span class="token number">129</span> <span class="token comment">//dac右声道硬件数字音量</span>
lineout_vol <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">//lineout硬件数字音量</span>
lineoutl_en <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//lineout左声道使能</span>
lineoutr_en <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//lineout右声道禁用</span>
adc1_vol <span class="token operator">=</span> <span class="token number">129</span> <span class="token comment">//adc1硬件数字音量</span>
adc2_vol <span class="token operator">=</span> <span class="token number">129</span> <span class="token comment">//adc2硬件数字音量</span>
adc3_vol <span class="token operator">=</span> <span class="token number">129</span> <span class="token comment">//adc3硬件数字音量</span>
mic1_gain <span class="token operator">=</span> <span class="token number">19</span> <span class="token comment">//mic1硬件增益</span>
mic2_gain <span class="token operator">=</span> <span class="token number">19</span> <span class="token comment">//mic2硬件增益</span>
mic3_gain <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//mic3硬件增益</span>
mic1_en <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//mic1使能</span>
mic2_en <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//mic2使能</span>
mic3_en <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//mic3使能</span>
mad_bind_en <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//mad禁用</span>
pa_pin_msleep <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">//pa开启延时</span>
pa_pin <span class="token operator">=</span> port<span class="token operator">:</span>PB3<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token keyword">default</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token comment">//pa引脚配置</span>
capture_cma <span class="token operator">=</span> <span class="token number">30720</span> <span class="token comment">//录音最大缓存配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声卡控件" tabindex="-1"><a class="header-anchor" href="#声卡控件" aria-hidden="true">#</a> 声卡控件</h3><p>声卡控件可以通过 <code>AudioCodec-DAC</code> 命令查看。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">AudioCodec<span class="token operator">-</span>DAC</span></span>
    Card Name<span class="token operator">:</span>audiocodecdac<span class="token punctuation">.</span>
    numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;DACL dig volume&#39;</span>
    value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
    numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;DACR dig volume&#39;</span>
    value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
    numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;LINEOUTL switch&#39;</span>
    value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;LINEOUTR switch&#39;</span>
    value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">AudioCodec<span class="token operator">-</span>ADC</span></span>
    Card Name<span class="token operator">:</span>audiocodecadc<span class="token punctuation">.</span>
    numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;bind mad function&#39;</span>
    value<span class="token operator">=</span>unbound<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>unbound mad_bind
    numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;lpsd channel sel function&#39;</span>
    value<span class="token operator">=</span><span class="token number">0</span>th_chan<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span><span class="token number">0</span>th_chan <span class="token number">1</span>st_chan <span class="token number">2</span>nd_chan <span class="token number">3</span>rd_chan <span class="token number">4</span>th_chan <span class="token number">5</span>th_chan <span class="token number">6</span> th_chan <span class="token number">7</span>th_chan
    numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;mad standby channel sel function&#39;</span>
    value<span class="token operator">=</span>Zero_Chan<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Zero_Chan Two_Chan Three_Chan Four_Chan
    numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;mad standby control&#39;</span>
    value<span class="token operator">=</span>RESUME<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>RESUME SUSPEND
    numid<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC1 volume&#39;</span>
    value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC2 volume&#39;</span>
    value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC3 volume&#39;</span>
    value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC1 switch&#39;</span>
    value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    numid<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC2 switch&#39;</span>
    value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    numid<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC3 switch&#39;</span>
    value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控件名称与功能如下表所示：</p><table><thead><tr><th style="text-align:left;">控件名称</th><th style="text-align:left;">功能</th><th style="text-align:left;">数值</th></tr></thead><tbody><tr><td style="text-align:left;">DACL dig volume</td><td style="text-align:left;">DACL 数字音量调节</td><td style="text-align:left;">0-&gt;255 (-64-&gt;63dB)</td></tr><tr><td style="text-align:left;">DACR dig volume</td><td style="text-align:left;">DACR 数字音量调节</td><td style="text-align:left;">0-&gt;255 (-64-&gt;63dB)</td></tr><tr><td style="text-align:left;">MIC1 volume</td><td style="text-align:left;">MIC1 增益调节</td><td style="text-align:left;">0-&gt;31 (0,6,6,6,9-&gt;36dB)</td></tr><tr><td style="text-align:left;">MIC2 volume</td><td style="text-align:left;">MIC2 增益调节</td><td style="text-align:left;">0-&gt;31 (0,6,6,6,9-&gt;36dB)</td></tr><tr><td style="text-align:left;">MIC3 volume</td><td style="text-align:left;">MIC3 增益调节</td><td style="text-align:left;">0-&gt;31 (0,6,6,6,9-&gt;36dB)</td></tr><tr><td style="text-align:left;">LINEOUTL switch</td><td style="text-align:left;">LINEOUTL 输出开关</td><td style="text-align:left;">off;on</td></tr><tr><td style="text-align:left;">LINEOUTR switch</td><td style="text-align:left;">LINEOUTR 输出开关</td><td style="text-align:left;">off;on</td></tr><tr><td style="text-align:left;">MIC1 switch</td><td style="text-align:left;">MIC1 输入开关</td><td style="text-align:left;">off;on</td></tr><tr><td style="text-align:left;">MIC2 switch</td><td style="text-align:left;">MIC2 输入开关</td><td style="text-align:left;">off;on</td></tr><tr><td style="text-align:left;">MIC3 switch</td><td style="text-align:left;">MIC3 输入开关</td><td style="text-align:left;">off;on</td></tr></tbody></table><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><blockquote><p>假设 AudioCodec-DAC 声卡序号为 0，AudioCodec-ADC 声卡序号为 1。</p></blockquote><h4 id="录音" tabindex="-1"><a class="header-anchor" href="#录音" aria-hidden="true">#</a> 录音</h4><p>用 MIC1 录音，并将数据保存在 /data/test.wav 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开 MIC1 switch</span>
~<span class="token comment"># amixer -c 1 set 7 1</span>
Card Name:  audiocodecadc. <span class="token assign-left variable">numid</span><span class="token operator">=</span><span class="token number">7</span>,
            <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&#39;MIC1 switch&#39;</span>
            <span class="token assign-left variable">value</span><span class="token operator">=</span>on, <span class="token assign-left variable">enum</span><span class="token operator">=</span>off on

<span class="token comment"># 执行录音操作</span>
~<span class="token comment"># arecord /data/test.wav -D hw:audiocodecadc -c 2 -r 16000 -d 5 -p 320 -b 1280</span>

card:        hw:audiocodecadc
period_size: <span class="token number">320</span>
buffer_size: <span class="token number">1280</span>

malloc <span class="token assign-left variable">rest</span><span class="token operator">=</span><span class="token number">320000</span>
please wait<span class="token punctuation">..</span>.writing data<span class="token punctuation">(</span><span class="token number">320000</span> bytes<span class="token punctuation">)</span> into /data/test.wav
<span class="token function">write</span> finish<span class="token punctuation">..</span>.

riffType:   RIFF
waveType:   WAVE
channels:   <span class="token number">2</span>
rate:       <span class="token number">16000</span>
bits:       <span class="token number">16</span>
align:      <span class="token number">4</span>
data size:  <span class="token number">320000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="播放" tabindex="-1"><a class="header-anchor" href="#播放" aria-hidden="true">#</a> 播放</h4><p>播放 /data/test.wav 音频文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 打开LINEOUTL<span class="token operator">/</span>R <span class="token keyword">switch</span>
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token number">2</span> <span class="token number">1</span>
Card Name<span class="token operator">:</span>  audiocodecdac<span class="token punctuation">.</span> numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token char">&#39;LINEOUTL switch&#39;</span>
            value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on

<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token number">3</span> <span class="token number">1</span>
Card Name<span class="token operator">:</span>  audiocodecdac<span class="token punctuation">.</span>
            numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;LINEOUTR switch&#39;</span>
            value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on

# 执行播放操作
<span class="token operator">~</span># aplay <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>audiocodecdac <span class="token operator">-</span>p <span class="token number">320</span> <span class="token operator">-</span>b <span class="token number">1280</span>

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">2</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">4</span>
data size<span class="token operator">:</span>  <span class="token number">320000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i2s-pcm" tabindex="-1"><a class="header-anchor" href="#i2s-pcm" aria-hidden="true">#</a> I2S/PCM</h2><p>数字音频信号传输标准 I2S/PCM</p><h3 id="驱动特性-1" tabindex="-1"><a class="header-anchor" href="#驱动特性-1" aria-hidden="true">#</a> 驱动特性</h3><ul><li>支持多种采样率格式</li><li>播放：8~384kHz</li><li>录音：8~384kHz</li><li>支持多通道播放和录音</li><li>播放：1~16</li><li>录音：1~16</li><li>支持16/20/24/32bit 数据精度（硬件支持8/12/16/20/24/28/32bit）</li><li>支持 5 种TDM 模式</li><li>I2S standard mode</li><li>Left-justified mode</li><li>Right-justified mode</li><li>DSP-A mode (short frame PCM mode)</li><li>DSP-B mode (long frame PCM mode)</li><li>支持loopback 回环模式</li><li>支持同时playback 和capture (全双工模式)</li><li>支持硬件重采样</li><li>支持多声卡同源播放</li><li>支持多声卡同步录音</li></ul><h3 id="音频通路-1" tabindex="-1"><a class="header-anchor" href="#音频通路-1" aria-hidden="true">#</a> 音频通路</h3><ol><li>播放流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    Playback<span class="token arrow operator">--&gt;</span>I2S-DOUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>录音流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    I2S-DIN<span class="token arrow operator">--&gt;</span>Capture
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>回环流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code> <span class="token keyword">graph</span> TD<span class="token punctuation">;</span>    
    Playback<span class="token arrow operator">--&gt;</span>Capture
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引脚模式配置" tabindex="-1"><a class="header-anchor" href="#引脚模式配置" aria-hidden="true">#</a> 引脚模式配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>daudio0<span class="token punctuation">]</span>
pin_mclk <span class="token operator">=</span> port:PA2<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>default<span class="token operator">&gt;</span>
pin_bclk <span class="token operator">=</span> port:PA2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>default<span class="token operator">&gt;</span>
pin_lrck <span class="token operator">=</span> port:PA1<span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>default<span class="token operator">&gt;</span>
pin_dout0 <span class="token operator">=</span> port:PA2<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>default<span class="token operator">&gt;</span>
pin_din0 <span class="token operator">=</span> port:PA2<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token operator">&lt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>default<span class="token operator">&gt;</span>
tdm_num <span class="token operator">=</span> <span class="token number">0</span>
daudio_master <span class="token operator">=</span> <span class="token number">4</span>
audio_format <span class="token operator">=</span> <span class="token number">1</span>
signal_inversion <span class="token operator">=</span> <span class="token number">1</span>
pcm_lrck_period <span class="token operator">=</span> <span class="token number">64</span>
slot_width_select <span class="token operator">=</span> <span class="token number">32</span>
msb_lsb_first <span class="token operator">=</span> <span class="token number">0</span>
frametype <span class="token operator">=</span> <span class="token number">0</span>
tx_data_mode <span class="token operator">=</span> <span class="token number">0</span>
rx_data_mode <span class="token operator">=</span> <span class="token number">0</span>
tdm_config <span class="token operator">=</span> <span class="token number">1</span>
mclk_div <span class="token operator">=</span> <span class="token number">2</span>
rx_sync_en <span class="token operator">=</span> <span class="token number">0</span>
rx_sync_ctl <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项说明：</p><table><thead><tr><th style="text-align:left;">配置项名称</th><th style="text-align:left;">配置项说明</th></tr></thead><tbody><tr><td style="text-align:left;">pin_mclk</td><td style="text-align:left;">MCLK 引脚的设置</td></tr><tr><td style="text-align:left;">pin_bclk</td><td style="text-align:left;">BCLK 引脚的设置</td></tr><tr><td style="text-align:left;">pin_lrck</td><td style="text-align:left;">LRCK 引脚的设置</td></tr><tr><td style="text-align:left;">pin_dout0</td><td style="text-align:left;">DOUT0 引脚的设置</td></tr><tr><td style="text-align:left;">pin_din0</td><td style="text-align:left;">DIN0 引脚的设置</td></tr><tr><td style="text-align:left;">tdm_num</td><td style="text-align:left;">I2S 使用数量的设置</td></tr><tr><td style="text-align:left;">daudio_master</td><td style="text-align:left;">设备主从模式的设置 1：BCLK、LRCK 由外部 CODEC 提供； 2：BCLK 由 SoC 提供，LRCK 由外部 CODEC 提供； 3：BCLK 由外部 CODEC 提供，LRCK 由 SoC 提供； 4：BCLK、LRCK 由 SoC 提供</td></tr><tr><td style="text-align:left;">audio_format</td><td style="text-align:left;">5 种 TDM 模式的设置，标准模式为 1、左对齐模式为 2、右对齐模式为 3、长帧模式为 4、短帧模式为 5</td></tr><tr><td style="text-align:left;">signal_inversion</td><td style="text-align:left;">BCLK 和 MCLK 信号的翻转选择，默认都不翻转，为 1，MCLK 翻转为 2，BCLK 为 3，都翻转则为 4</td></tr><tr><td style="text-align:left;">pcm_lrck_period</td><td style="text-align:left;">LRCK 的宽度，可选项: 16/32/64/128/256</td></tr><tr><td style="text-align:left;">slot_width_select</td><td style="text-align:left;">slot 的宽度，可选项: 8/16/32</td></tr><tr><td style="text-align:left;">msb_lsb_first</td><td style="text-align:left;">大小端的设置，0 为大端，1 为小端</td></tr><tr><td style="text-align:left;">frametype</td><td style="text-align:left;">长帧模式和短帧模式的选择，0 为短帧，1 为长帧</td></tr><tr><td style="text-align:left;">tx_data_mode</td><td style="text-align:left;">发送端数据格式的选择，0 为 16 位线性 pcm 数据</td></tr><tr><td style="text-align:left;">rx_data_mode</td><td style="text-align:left;">接收端数据格式的选择，0 为 16 位线性 pcm 数据</td></tr><tr><td style="text-align:left;">tdm_config</td><td style="text-align:left;">设置 TDM 模式，0 为 DSP 的两个模式，1 为 I2S 的三种模式</td></tr><tr><td style="text-align:left;">mclk_div</td><td style="text-align:left;">MCLK 分频系数，为 0 时无输出，可选项: 1/2/4/6/8/12/16/24/32/48/64/96/128/176/192</td></tr><tr><td style="text-align:left;">rx_sync_en</td><td style="text-align:left;">同步录音功能的使能</td></tr><tr><td style="text-align:left;">rx_sync_ctl</td><td style="text-align:left;">设置同步录音功能是否透出控件开关</td></tr></tbody></table><h3 id="驱动配置-1" tabindex="-1"><a class="header-anchor" href="#驱动配置-1" aria-hidden="true">#</a> 驱动配置</h3><p>驱动配置在 menuconfig 中在下列位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SOUND Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                <span class="token function">Platform</span><span class="token punctuation">(</span>Audio Interface<span class="token punctuation">)</span> drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
                    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner Digital Audio Support
                        Allwinner Digital Audio Choose <span class="token operator">--</span><span class="token operator">-&gt;</span>
                            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner Daudio0 Support 
                            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner Daudio1 Support 
                            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner Daudio2 Support 
                            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner Daudio3 Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项说明</p><ul><li>Allwinner Daudio0 Support</li><li>I2S/PCM0 模块</li><li>Allwinner Daudio1 Support</li><li>I2S/PCM1 模块</li><li>Allwinner Daudio2 Support</li><li>I2S/PCM2 模块</li><li>Allwinner Daudio3 Support</li><li>I2S/PCM3 模块</li></ul><h3 id="声卡控件-1" tabindex="-1"><a class="header-anchor" href="#声卡控件-1" aria-hidden="true">#</a> 声卡控件</h3><p>控件列表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Card Name<span class="token operator">:</span>snddaudio0<span class="token punctuation">.</span>
    numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;tx hub mode&#39;</span>
        value<span class="token operator">=</span>Off<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Off On
    numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;rx sync mode&#39;</span>
        value<span class="token operator">=</span>Off<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Off On
    numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;loopback debug&#39;</span>
        value<span class="token operator">=</span>Off<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Off On
    numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;sunxi daudio asrc function&#39;</span>
        value<span class="token operator">=</span>Off<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Off On
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控件名称与功能如下表所示：</p><table><thead><tr><th style="text-align:left;">控件名称</th><th style="text-align:left;">功能</th><th style="text-align:left;">数值</th></tr></thead><tbody><tr><td style="text-align:left;">tx hub mode</td><td style="text-align:left;">同源播放开关</td><td style="text-align:left;">Off;On</td></tr><tr><td style="text-align:left;">rx sync mode</td><td style="text-align:left;">同步采样开关</td><td style="text-align:left;">Off;On</td></tr><tr><td style="text-align:left;">loopback debug</td><td style="text-align:left;">内部回录开关</td><td style="text-align:left;">Off;On</td></tr><tr><td style="text-align:left;">sunxi daudio asrc function</td><td style="text-align:left;">重采样开关</td><td style="text-align:left;">Off;On</td></tr></tbody></table><h3 id="使用方法-1" tabindex="-1"><a class="header-anchor" href="#使用方法-1" aria-hidden="true">#</a> 使用方法</h3><blockquote><p>假设 snddaudio0 声卡序号为 2</p></blockquote><h4 id="录音-1" tabindex="-1"><a class="header-anchor" href="#录音-1" aria-hidden="true">#</a> 录音</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># arecord <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>snddaudio0

card<span class="token operator">:</span>          hw<span class="token operator">:</span>snddaudio0
period_size<span class="token operator">:</span>   <span class="token number">1024</span>
buffer_size<span class="token operator">:</span>   <span class="token number">4096</span>
please set capture duration<span class="token punctuation">.</span><span class="token punctuation">.</span>
please wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>writing <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">0</span> bytes<span class="token punctuation">)</span> into <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav 
write finish<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">3</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">6</span>
data size<span class="token operator">:</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="播放-1" tabindex="-1"><a class="header-anchor" href="#播放-1" aria-hidden="true">#</a> 播放</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># aplay <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>snddaudio0

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">3</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">6</span>
data size<span class="token operator">:</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="snddaudio0-声卡内部回环-播录音频格式需保持一致" tabindex="-1"><a class="header-anchor" href="#snddaudio0-声卡内部回环-播录音频格式需保持一致" aria-hidden="true">#</a> snddaudio0 声卡内部回环，播录音频格式需保持一致</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># <span class="token number">1.</span>打开 loopback 开关
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">2</span> set <span class="token number">2</span> <span class="token number">1</span>

Card Name<span class="token operator">:</span>snddaudio0<span class="token punctuation">.</span>
    numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;loopback debug&#39;</span>
            value<span class="token operator">=</span>On<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Off On

# <span class="token number">2.</span>后台播放音频
<span class="token operator">~</span># fork aplay <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>snddaudio0

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">3</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">6</span>
data size<span class="token operator">:</span>  <span class="token number">0</span>

# <span class="token number">3.</span>执行录音操作
<span class="token operator">~</span># arecord <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>snddaudio0

card<span class="token operator">:</span>          hw<span class="token operator">:</span>snddaudio0
period_size<span class="token operator">:</span>   <span class="token number">1024</span>
buffer_size<span class="token operator">:</span>   <span class="token number">4096</span>
please set capture duration<span class="token punctuation">.</span><span class="token punctuation">.</span>
please wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>writing <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">0</span> bytes<span class="token punctuation">)</span> into <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav 
write finish<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">3</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">6</span>
data size<span class="token operator">:</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="s-pdif" tabindex="-1"><a class="header-anchor" href="#s-pdif" aria-hidden="true">#</a> S/PDIF</h2><p>S/PDIF 数字音频接口</p><h3 id="驱动特性-2" tabindex="-1"><a class="header-anchor" href="#驱动特性-2" aria-hidden="true">#</a> 驱动特性</h3><ul><li>支持多种采样率格式</li><li>播放：22.05~192kHz</li><li>录音：22.05~192kHz</li><li>支持多通道播放和录音</li><li>播放：1~2</li><li>录音：1~2</li><li>支持 16/20/24/32bit 数据精度（硬件支持 16/20/24bit）</li><li>支持 loopback 回环模式</li><li>支持同时 playback 和 capture (全双工模式)</li><li>支持 IEC-60958 协议</li><li>支持 IEC-61937 协议</li><li>支持多声卡同源播放</li><li>支持透传播放</li></ul><h3 id="音频通路-2" tabindex="-1"><a class="header-anchor" href="#音频通路-2" aria-hidden="true">#</a> 音频通路</h3><ol><li>播放通路</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    Playback<span class="token arrow operator">--&gt;</span>SPDIF-DOUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>录音通路</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    SPDIF-DIN<span class="token arrow operator">--&gt;</span>Capture
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="驱动配置-2" tabindex="-1"><a class="header-anchor" href="#驱动配置-2" aria-hidden="true">#</a> 驱动配置</h3><p>驱动配置在 menuconfig 中在下列位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SOUND Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                <span class="token function">Platform</span><span class="token punctuation">(</span>Audio Interface<span class="token punctuation">)</span> drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
                    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner SPDIF Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项说明</p><ul><li>Allwinner SPDIF Support</li><li>SPDIF 模块</li></ul><h3 id="声卡控件-2" tabindex="-1"><a class="header-anchor" href="#声卡控件-2" aria-hidden="true">#</a> 声卡控件</h3><p>控件列表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Card Name<span class="token operator">:</span>sndspdif<span class="token punctuation">.</span>
numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;spdif audio format function&#39;</span>
    value<span class="token operator">=</span>PCM<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>PCM DTS
numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;spdif rx data type&#39;</span>
    value<span class="token operator">=</span>IEC<span class="token operator">-</span><span class="token number">60958</span><span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>IEC<span class="token operator">-</span><span class="token number">60958</span> IEC<span class="token operator">-</span><span class="token number">61937</span> numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;spdif audio hub mode&#39;</span>
    value<span class="token operator">=</span>Disabled<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Disabled Enabled
numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;sunxi spdif loopback debug&#39;</span>
    value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">控件名称</th><th style="text-align:left;">功能</th><th style="text-align:left;">数值</th></tr></thead><tbody><tr><td style="text-align:left;">spdif audio format function</td><td style="text-align:left;">设置音频数据格式</td><td style="text-align:left;">PCM DTS</td></tr><tr><td style="text-align:left;">spdif rx data type</td><td style="text-align:left;">设置传输协议</td><td style="text-align:left;">IEC-60958 IEC-61937</td></tr><tr><td style="text-align:left;">spdif audio hub mode</td><td style="text-align:left;">同源输出开关</td><td style="text-align:left;">Disabled : Enabled</td></tr><tr><td style="text-align:left;">sunxi spdif loopback debug</td><td style="text-align:left;">内部回录开关</td><td style="text-align:left;">0：关闭 1：打开</td></tr></tbody></table><h3 id="使用方法-2" tabindex="-1"><a class="header-anchor" href="#使用方法-2" aria-hidden="true">#</a> 使用方法</h3><h4 id="播放-2" tabindex="-1"><a class="header-anchor" href="#播放-2" aria-hidden="true">#</a> 播放</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 播放音频
<span class="token operator">~</span># aplay <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>sndspdif

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">2</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">4</span>
data size<span class="token operator">:</span>  <span class="token number">320000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dmic" tabindex="-1"><a class="header-anchor" href="#dmic" aria-hidden="true">#</a> DMIC</h2><p>双/立体声数字麦克风接口。</p><h3 id="驱动特性-3" tabindex="-1"><a class="header-anchor" href="#驱动特性-3" aria-hidden="true">#</a> 驱动特性</h3><ul><li>支持多种采样率格式</li><li>8~48kHz</li><li>支持多通道录音</li><li>channels：1~8</li><li>支持16/24bit 数据精度</li><li>支持硬件HPF 算法</li><li>支持多声卡同步录音</li></ul><h3 id="音频通路-3" tabindex="-1"><a class="header-anchor" href="#音频通路-3" aria-hidden="true">#</a> 音频通路</h3><ol><li>录音流</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    DMIC-DIN<span class="token arrow operator">--&gt;</span>Capture
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="驱动配置-3" tabindex="-1"><a class="header-anchor" href="#驱动配置-3" aria-hidden="true">#</a> 驱动配置</h3><p>驱动配置在 menuconfig 中在下列位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SOUND Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                <span class="token function">Platform</span><span class="token punctuation">(</span>Audio Interface<span class="token punctuation">)</span> drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
                    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner DMIC Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项说明</p><ul><li>Allwinner DMIC Support</li><li>DMIC 模块</li></ul><h3 id="使用方法-3" tabindex="-1"><a class="header-anchor" href="#使用方法-3" aria-hidden="true">#</a> 使用方法</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 录音
<span class="token operator">~</span># arecord <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav <span class="token operator">-</span>D hw<span class="token operator">:</span>snddmic <span class="token operator">-</span>c <span class="token number">2</span> <span class="token operator">-</span>r <span class="token number">16000</span> <span class="token operator">-</span>d <span class="token number">5</span> <span class="token operator">-</span>p <span class="token number">320</span> <span class="token operator">-</span>b <span class="token number">1280</span>

card<span class="token operator">:</span>          hw<span class="token operator">:</span>snddmic
period_size<span class="token operator">:</span>   <span class="token number">320</span>
buffer_size<span class="token operator">:</span>   <span class="token number">1280</span>
malloc rest<span class="token operator">=</span>   <span class="token number">320000</span>
please set capture duration<span class="token punctuation">.</span><span class="token punctuation">.</span>
please wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>writing <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">0</span> bytes<span class="token punctuation">)</span> into <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav 
write finish<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

riffType<span class="token operator">:</span>   RIFF
waveType<span class="token operator">:</span>   WAVE
channels<span class="token operator">:</span>   <span class="token number">2</span>
rate<span class="token operator">:</span>       <span class="token number">16000</span>
bits<span class="token operator">:</span>       <span class="token number">16</span>
align<span class="token operator">:</span>      <span class="token number">4</span>
data size<span class="token operator">:</span>  <span class="token number">320000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mad" tabindex="-1"><a class="header-anchor" href="#mad" aria-hidden="true">#</a> MAD</h2><p>麦克风激活检测(Microphone Activity Detection，MAD)，用于语音唤醒方案</p><h3 id="驱动特性-4" tabindex="-1"><a class="header-anchor" href="#驱动特性-4" aria-hidden="true">#</a> 驱动特性</h3><ul><li>支持AudioCodec、DMIC 音频传输接口；</li><li>支持16kHz, 48kHz 采样率，固定16bit；</li><li>支持一块64KB 的SRAM，可用于保存音频数据；</li><li>支持基于能量识别的语音检测模块LPSD（只支持单通道，16bit 数据，16kHz 采样率）。</li></ul><h2 id="音频通路-4" tabindex="-1"><a class="header-anchor" href="#音频通路-4" aria-hidden="true">#</a> 音频通路</h2><ol><li>唤醒状态，正常录音</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
ADC <span class="token arrow operator">--&gt;</span> rx_fifo <span class="token arrow operator">--&gt;</span> DMA <span class="token arrow operator">--&gt;</span> MEM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>进入休眠，语言能量检测</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
ADC <span class="token arrow operator">--&gt;</span> rx_fifo <span class="token arrow operator">--&gt;</span> mad_sram
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>触发唤醒，继续录音</li></ol><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
ADC <span class="token arrow operator">--&gt;</span> rx_fifo <span class="token arrow operator">--&gt;</span> DMA <span class="token arrow operator">--&gt;</span> MEM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="驱动配置-4" tabindex="-1"><a class="header-anchor" href="#驱动配置-4" aria-hidden="true">#</a> 驱动配置</h3><p>驱动配置在 menuconfig 中在下列位置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Drivers Options <span class="token operator">--</span><span class="token operator">-&gt;</span>
    soc related device drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
        SOUND Devices <span class="token operator">--</span><span class="token operator">-&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                <span class="token function">Platform</span><span class="token punctuation">(</span>Audio Interface<span class="token punctuation">)</span> drivers <span class="token operator">--</span><span class="token operator">-&gt;</span>
                    <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Allwinner MAD Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要同时使能录音源模块驱动才可正常工作，如录音源为AudioCodec，则需使能AudioCodec 驱动。</p></blockquote><h3 id="声卡控件-3" tabindex="-1"><a class="header-anchor" href="#声卡控件-3" aria-hidden="true">#</a> 声卡控件</h3><p>?&gt; 以mad 绑定AudioCodec 声卡为例。</p><p>控件列表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Card Name<span class="token operator">:</span>audiocodecadc<span class="token punctuation">.</span>
    numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;bind mad function&#39;</span>
        value<span class="token operator">=</span>unbound<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>unbound mad_bind
    numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;lpsd channel sel function&#39;</span>
        value<span class="token operator">=</span><span class="token number">0</span>th_chan<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span><span class="token number">0</span>th_chan <span class="token number">1</span>st_chan <span class="token number">2</span>nd_chan <span class="token number">3</span>rd_chan <span class="token number">4</span>th_chan <span class="token number">5</span>th_chan <span class="token number">6</span>th_chan <span class="token number">7</span>th_chan
    numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;mad standby channel sel function&#39;</span>
        value<span class="token operator">=</span>Zero_Chan<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>Zero_Chan Two_Chan Three_Chan Four_Chan
    numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;mad standby control&#39;</span>
        value<span class="token operator">=</span>RESUME<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>RESUME SUSPEND
    numid<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC1 volume&#39;</span>
        value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC2 volume&#39;</span>
        value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC3 volume&#39;</span>
        value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
    numid<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC1 switch&#39;</span>
        value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    numid<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC2 switch&#39;</span>
        value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
    numid<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC3 switch&#39;</span>
        value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，控件0-3 为mad 模块控件，控件4-9 为AudioCodec 模块控件。</p><table><thead><tr><th style="text-align:left;">控件名称</th><th style="text-align:left;">功能</th><th style="text-align:left;">数值</th></tr></thead><tbody><tr><td style="text-align:left;">bind mad function</td><td style="text-align:left;">是否绑定 MAD 功能</td><td style="text-align:left;">0: 不绑定; 1: 绑定</td></tr><tr><td style="text-align:left;">lpsd channel sel Function</td><td style="text-align:left;">选择作为能量唤醒的通道</td><td style="text-align:left;">0: 通道 0; 1: 通道 1;</td></tr><tr><td style="text-align:left;">mad_standby channel sel Function</td><td style="text-align:left;">设定休眠时 mad 录音通道数</td><td style="text-align:left;">Zero_Chan: 实际录音通道</td></tr><tr><td style="text-align:left;">mad standby control</td><td style="text-align:left;">休眠测试使用</td><td style="text-align:left;">Two_Chan: 只录制两通道Off;On</td></tr></tbody></table><h3 id="使用方法-4" tabindex="-1"><a class="header-anchor" href="#使用方法-4" aria-hidden="true">#</a> 使用方法</h3><h4 id="语音唤醒" tabindex="-1"><a class="header-anchor" href="#语音唤醒" aria-hidden="true">#</a> 语音唤醒</h4><p>安静环境下，开启录音后进入休眠暂停录音，此时外界制造音量较大的声音，mad 模块触发唤醒 cpu，并自动继续录音。</p><ol><li>录音前控件设置</li></ol><p>假设使用AudioCodec 模块MIC1 单通道作为能量能量唤醒通道。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token string">&quot;bind mad function&quot;</span> <span class="token number">1</span>
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token string">&quot;lpsd channel sel function&quot;</span> <span class="token number">0</span>
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token string">&quot;mad standby channel sel function&quot;</span> <span class="token number">0</span>
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token string">&quot;MIC2 switch&quot;</span> <span class="token number">0</span>
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">0</span> set <span class="token string">&quot;MIC3 switch&quot;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>开启录音</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 录音参数为单通道、<span class="token number">16</span>kHz采样率、<span class="token number">16</span>bit。
<span class="token operator">~</span># fork arecord <span class="token operator">-</span>D hw<span class="token operator">:</span>audiocodecadc <span class="token operator">-</span>c <span class="token number">1</span> <span class="token operator">-</span>r <span class="token number">16000</span> <span class="token operator">-</span>d <span class="token number">20</span> <span class="token operator">-</span>p <span class="token number">320</span> <span class="token operator">-</span>b <span class="token number">1280</span> <span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>进入休眠</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 如使用休眠测试命令进入休眠，此时arecord 录音将被暂停
<span class="token operator">~</span># rpccli arm standby
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>外界声音唤醒</li></ol><p>制造较大音量的外界声音，系统唤醒，并自动恢复arecord 录音，查看录音文件可录到外界唤醒声音。</p><h4 id="语音唤醒能量唤醒阈值参数" tabindex="-1"><a class="header-anchor" href="#语音唤醒能量唤醒阈值参数" aria-hidden="true">#</a> 语音唤醒能量唤醒阈值参数</h4><p>语音唤醒能量唤醒阈值参数能量唤醒模块lpsd，识别能量主要有两个方向，瞬时能量和累计能量（前者比如是关门声，后者比如是不断说话）能量检测参数配置在 <code>lichee/rtos-hal/hal/source/sound/platform/sunximad.c</code> 修改。</p><table><thead><tr><th style="text-align:left;">参数名称</th><th style="text-align:left;">功能</th><th style="text-align:left;">可设范围</th><th style="text-align:left;">推荐值</th></tr></thead><tbody><tr><td style="text-align:left;">lpsd_th</td><td style="text-align:left;">累积语音能量检测阈值</td><td style="text-align:left;">0x0 - 0xFFFF</td><td style="text-align:left;">1200</td></tr><tr><td style="text-align:left;">lpsd_rrun</td><td style="text-align:left;">语音能量检测开始时间</td><td style="text-align:left;">0x0 - 0xFF</td><td style="text-align:left;">145</td></tr><tr><td style="text-align:left;">lpsd_rstop</td><td style="text-align:left;">语音能量检测结束时间</td><td style="text-align:left;">0x0 - 0xFF</td><td style="text-align:left;">170</td></tr></tbody></table><ul><li>瞬时能量检测参数，主要是 lpsd_rrun 和 lpsd_rstop。</li><li>一般只对 stop 值进行修改;</li><li>如果录音数据经常缺少唤醒词的第一个字，则可以尝试降低 stop 值，可以有效提高唤醒词数据的完整性。但同时会提高误唤醒率，环境噪音也会很容易触发能量检测，唤醒系统;</li><li>如果想要降低误唤醒率 (环境噪音造成唤醒)，则可以尝试提高 stop 值。同样的，这会导致一些唤醒词录音数据不完整，例如一些音量较低，音调较低的语料;</li><li>唤醒词识别率以及误唤醒率无法同时兼得，客户需要根据实际需求、场景，权衡配置参数;</li><li>累积能量检测参数，主要是 lpsd_th。</li><li>建议使用默认值 1200，建议修改范围 50~1200。</li></ul><h2 id="模块接口说明" tabindex="-1"><a class="header-anchor" href="#模块接口说明" aria-hidden="true">#</a> 模块接口说明</h2><h3 id="源文件列表" tabindex="-1"><a class="header-anchor" href="#源文件列表" aria-hidden="true">#</a> 源文件列表</h3><ol><li><code>platform</code> 层</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>lichee<span class="token operator">/</span>rtos<span class="token operator">-</span>hal<span class="token operator">/</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>sound<span class="token operator">/</span>platform <span class="token punctuation">.</span>
├── Kconfig
├── Makefile
├── objects<span class="token punctuation">.</span>mk
├── sun8iw19<span class="token operator">-</span>daudio<span class="token punctuation">.</span>c
├── sunxi<span class="token operator">-</span>daudio<span class="token punctuation">.</span>c           # platform 层 –<span class="token operator">&gt;</span> I2S<span class="token operator">/</span>PCM，负责 I2S<span class="token operator">/</span>PCM 模块硬件参数、DMA 相关配置。
├── sunxi<span class="token operator">-</span>daudio<span class="token punctuation">.</span>h           # platform 层 –<span class="token operator">&gt;</span> I2S<span class="token operator">/</span>PCM，负责 I2S<span class="token operator">/</span>PCM 模块硬件参数、DMA 相关配置。
├── sunxi<span class="token operator">-</span>dmic<span class="token punctuation">.</span>c
├── sunxi<span class="token operator">-</span>dmic<span class="token punctuation">.</span>h
├── sunxi<span class="token operator">-</span>dummy<span class="token operator">-</span>cpudai<span class="token punctuation">.</span>c     # platform 层 –<span class="token operator">&gt;</span> AudioCodec，负责 AudioCodec 模块 DMA 相关配置。
├── sunxi<span class="token operator">-</span>mad<span class="token punctuation">.</span>c
├── sunxi<span class="token operator">-</span>mad<span class="token punctuation">.</span>h
├── sunxi<span class="token operator">-</span>pcm<span class="token punctuation">.</span>c              # platform 层 –<span class="token operator">&gt;</span> 公共部分，负责音频流传输，使用 DMA 方式，提供注册 platform 设备的公共函数。
├── sunxi<span class="token operator">-</span>pcm<span class="token punctuation">.</span>h              # platform 层 –<span class="token operator">&gt;</span> 公共部分，负责音频流传输，使用 DMA 方式，提供注册 platform 设备的公共函数。
├── sunxi<span class="token operator">-</span>spdif<span class="token punctuation">.</span>c            # platform 层 –<span class="token operator">&gt;</span> SPDIF，负责 SPDIF 模块硬件参数、DMA 相关配置。
├── sunxi<span class="token operator">-</span>spdif<span class="token punctuation">.</span>h            # platform 层 –<span class="token operator">&gt;</span> SPDIF，负责 SPDIF 模块硬件参数、DMA 相关配置。
├── platforms
    ├── daudio<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>h    # platform 层 –<span class="token operator">&gt;</span> DMIC、SPDIF、DAUDIO 时钟框架代码
    ├── dmic<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>h      # platform 层 –<span class="token operator">&gt;</span> DMIC、SPDIF、DAUDIO 时钟框架代码
    ├── mad<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>c       # platform 层 –<span class="token operator">&gt;</span> DMIC、SPDIF、DAUDIO 时钟框架代码
    ├── mad<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>h       # platform 层 –<span class="token operator">&gt;</span> DMIC、SPDIF、DAUDIO 时钟框架代码
    ├── spdif<span class="token operator">-</span>sun20iw2<span class="token punctuation">.</span>h     # platform 层 –<span class="token operator">&gt;</span> DMIC、SPDIF、DAUDIO 时钟框架代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>codec</code> 层</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>lichee<span class="token operator">/</span>rtos<span class="token operator">-</span>hal<span class="token operator">/</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>sound<span class="token operator">/</span>codecs <span class="token punctuation">.</span>
├── ac101s<span class="token punctuation">.</span>c               # codec 层 –<span class="token operator">&gt;</span> AC101s codec
├── ac101s<span class="token punctuation">.</span>h               # codec 层 –<span class="token operator">&gt;</span> AC101s codec
├── dummy_codec<span class="token punctuation">.</span>c          
├── sun20iw2<span class="token operator">-</span>codec<span class="token operator">-</span>adc<span class="token punctuation">.</span>c   # codec 层 –<span class="token operator">&gt;</span> AudioCodec，负责 AudioCodec 模块硬件参数配置
├── sun20iw2<span class="token operator">-</span>codec<span class="token punctuation">.</span>c       # codec 层 –<span class="token operator">&gt;</span> AudioCodec，负责 AudioCodec 模块硬件参数配置
├── sun20iw2<span class="token operator">-</span>codec<span class="token operator">-</span>dac<span class="token punctuation">.</span>c   # codec 层 –<span class="token operator">&gt;</span> AudioCodec，负责 AudioCodec 模块硬件参数配置
├── sun20iw2<span class="token operator">-</span>codec<span class="token punctuation">.</span>h       # codec 层 –<span class="token operator">&gt;</span> AudioCodec，负责 AudioCodec 模块硬件参数配置
├── sunxi<span class="token operator">-</span>codec<span class="token punctuation">.</span>h          # codec 层 –<span class="token operator">&gt;</span> 公共部分
├── sunxi_rw_func<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>machine</code> 层</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>lichee<span class="token operator">/</span>rtos<span class="token operator">/</span>projects<span class="token operator">/</span>xxx<span class="token operator">/</span>src <span class="token punctuation">.</span>
├── card_default<span class="token punctuation">.</span>c         # 负责 platform 层和 codec 层绑定。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="软件框图" tabindex="-1"><a class="header-anchor" href="#软件框图" aria-hidden="true">#</a> 软件框图</h2><h3 id="关键数据结构" tabindex="-1"><a class="header-anchor" href="#关键数据结构" aria-hidden="true">#</a> 关键数据结构</h3><h4 id="pcm-数据类结构体" tabindex="-1"><a class="header-anchor" href="#pcm-数据类结构体" aria-hidden="true">#</a> pcm 数据类结构体</h4><ol><li><code>sunxi_dma_params</code></li></ol><p>定义audio DAI DMA 相关参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token class-name">dma_addr_t</span> dma_addr<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> src_maxburst<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dst_maxburst<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> dma_drq_type_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>platform 类结构体</li><li><code>DAUDIO</code></li></ol><p>I2S/PCM 模块总结构体，包含基础平台资源、特定功能私有参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sunxi_daudio_info</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">snd_platform</span> <span class="token operator">*</span>platform<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_daudio_clk</span> clk<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">daudio_pinctrl</span> <span class="token operator">*</span>pinctrl<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> pinctrl_num<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">pa_config</span> <span class="token operator">*</span>pa_cfg<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> pa_cfg_num<span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">sunxi_daudio_param</span> param<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> playback_dma_param<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> capture_dma_param<span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> global_enable<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> hub_mode<span class="token punctuation">;</span>
    bool playback_en<span class="token punctuation">;</span>
    bool capture_en<span class="token punctuation">;</span>
    <span class="token keyword">int</span> asrc_en<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SPDIF</code></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 用于描述引脚*/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">gpio_pin_t</span> gpio<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mux<span class="token punctuation">;</span>
<span class="token punctuation">}</span> spdif_gpio<span class="token punctuation">;</span>

<span class="token comment">/* 用于描述SPDIF 引脚*/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    spdif_gpio out<span class="token punctuation">;</span>
    spdif_gpio in<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spdif_gpio_t</span><span class="token punctuation">;</span>

<span class="token comment">/* 包含了DMA 相关参数以及时钟结构体*/</span>
<span class="token keyword">struct</span> <span class="token class-name">sunxi_spdif</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> playback_dma_param<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> capture_dma_param<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_spdif_clk</span> clk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DMIC</code></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 用于描述引脚*/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token class-name">gpio_pin_t</span> gpio<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mux<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dmic_gpio<span class="token punctuation">;</span>

<span class="token comment">/* 用于描述DMIC 引脚*/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    dmic_gpio clk<span class="token punctuation">;</span>
    dmic_gpio din0<span class="token punctuation">;</span>
    dmic_gpio din1<span class="token punctuation">;</span>
    dmic_gpio din2<span class="token punctuation">;</span>
    dmic_gpio din3<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">dmic_gpio_t</span><span class="token punctuation">;</span>

<span class="token comment">/* 用于描述DMIC 采样率*/</span>
<span class="token keyword">struct</span> <span class="token class-name">dmic_rate</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> samplerate<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> rate_bit<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* 包含了DMA 相关参数，通道数以及时钟结构体*/</span>
<span class="token keyword">struct</span> <span class="token class-name">sunxi_dmic</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dma_params</span> capture_dma_param<span class="token punctuation">;</span>
    u32 chanmap<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_dmic_clk</span> clk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="codec-类结构体" tabindex="-1"><a class="header-anchor" href="#codec-类结构体" aria-hidden="true">#</a> codec 类结构体</h3><h4 id="audiocodec-1" tabindex="-1"><a class="header-anchor" href="#audiocodec-1" aria-hidden="true">#</a> AudioCodec</h4><p>AudioCodec 模块总结构体，包含基础平台资源、特定功能私有参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sunxi_codec_info</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">snd_codec</span> <span class="token operator">*</span>codec<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token operator">*</span>codec_base_addr<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_codec_clk</span> clk<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_codec_param</span> param<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SND_PLATFORM_SUNXI_MAD</span></span>
    <span class="token keyword">int</span> capturing<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sunxi_mad_priv</span> mad_priv<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="软件重要接口" tabindex="-1"><a class="header-anchor" href="#软件重要接口" aria-hidden="true">#</a> 软件重要接口</h2><blockquote><p>仅说明自定义软件接口，alsa 框架内部接口不做说明。</p></blockquote><h3 id="pcm-相关接口" tabindex="-1"><a class="header-anchor" href="#pcm-相关接口" aria-hidden="true">#</a> pcm 相关接口</h3><h4 id="创建-pcm-设备" tabindex="-1"><a class="header-anchor" href="#创建-pcm-设备" aria-hidden="true">#</a> 创建 pcm 设备</h4><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_pcm_new</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm</span> <span class="token operator">*</span>pcm<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>pcm: pcm设备信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="释放-pcm-设备" tabindex="-1"><a class="header-anchor" href="#释放-pcm-设备" aria-hidden="true">#</a> 释放 pcm 设备</h4><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sunxi_pcm_free_dma_buffer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm</span> <span class="token operator">*</span>pcm<span class="token punctuation">,</span> <span class="token keyword">int</span> stream<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>pcm: pcm设备信息</li><li>stream: pcm 流信息</li></ul><p>返回值: 无</p><h4 id="开启-pcm-设备" tabindex="-1"><a class="header-anchor" href="#开启-pcm-设备" aria-hidden="true">#</a> 开启 pcm 设备</h4><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_pcm_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="设置-pcm-设备参数" tabindex="-1"><a class="header-anchor" href="#设置-pcm-设备参数" aria-hidden="true">#</a> 设置 pcm 设备参数</h4><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_pcm_hw_params</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_pcm_hw_params</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>params: pcm 硬件参数</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="触发-pcm-设备运行" tabindex="-1"><a class="header-anchor" href="#触发-pcm-设备运行" aria-hidden="true">#</a> 触发 pcm 设备运行</h4><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_pcm_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>cmd: 触发命令</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="获取-pcm-设备帧点" tabindex="-1"><a class="header-anchor" href="#获取-pcm-设备帧点" aria-hidden="true">#</a> 获取 pcm 设备帧点</h4><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">snd_pcm_uframes_t</span> <span class="token function">snd_dmaengine_pcm_pointer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li></ul><p>返回值:</p><ul><li>snd_pcm_uframes_t：当前DMA 缓冲指针</li></ul><h3 id="platform-层接口" tabindex="-1"><a class="header-anchor" href="#platform-层接口" aria-hidden="true">#</a> Platform 层接口</h3><h4 id="audiocodec接口" tabindex="-1"><a class="header-anchor" href="#audiocodec接口" aria-hidden="true">#</a> AudioCodec接口</h4><h5 id="初始化-dma-参数" tabindex="-1"><a class="header-anchor" href="#初始化-dma-参数" aria-hidden="true">#</a> 初始化 DMA 参数</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_cpudai_platform_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_platform</span> <span class="token operator">*</span>platform<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>platform: platform 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="更新设置-dma-参数" tabindex="-1"><a class="header-anchor" href="#更新设置-dma-参数" aria-hidden="true">#</a> 更新设置 DMA 参数</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_cpudai_startup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="i2s-pcm接口" tabindex="-1"><a class="header-anchor" href="#i2s-pcm接口" aria-hidden="true">#</a> I2S/PCM接口</h4><h5 id="i2s-pcm-模块休眠-保存寄存器、关闭时钟" tabindex="-1"><a class="header-anchor" href="#i2s-pcm-模块休眠-保存寄存器、关闭时钟" aria-hidden="true">#</a> I2S/PCM 模块休眠（保存寄存器、关闭时钟）</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_suspend</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="i2s-pcm-模块唤醒-开启时钟、初始化模块、恢复寄存器" tabindex="-1"><a class="header-anchor" href="#i2s-pcm-模块唤醒-开启时钟、初始化模块、恢复寄存器" aria-hidden="true">#</a> I2S/PCM 模块唤醒（开启时钟、初始化模块、恢复寄存器）</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块bclk-分频系数" tabindex="-1"><a class="header-anchor" href="#设置模块bclk-分频系数" aria-hidden="true">#</a> 设置模块BCLK 分频系数</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_set_clkdiv</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>clk_div: clk 分频系数</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块工作时钟" tabindex="-1"><a class="header-anchor" href="#设置模块工作时钟" aria-hidden="true">#</a> 设置模块工作时钟</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_set_sysclk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>freq: 时钟频率</li><li>dir: 时钟输出方向</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块i2s-格式" tabindex="-1"><a class="header-anchor" href="#设置模块i2s-格式" aria-hidden="true">#</a> 设置模块I2S 格式</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_set_fmt</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fmt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dai: cpu dai 信息</li><li>fmt: I2S 格式信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块开启工作资源-dma-参数、组件功能等" tabindex="-1"><a class="header-anchor" href="#设置模块开启工作资源-dma-参数、组件功能等" aria-hidden="true">#</a> 设置模块开启工作资源(DMA 参数、组件功能等)</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_startup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块硬件参数" tabindex="-1"><a class="header-anchor" href="#设置模块硬件参数" aria-hidden="true">#</a> 设置模块硬件参数</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_hw_params</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_pcm_hw_params</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>params: 硬件参数</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="清除模块fifo" tabindex="-1"><a class="header-anchor" href="#清除模块fifo" aria-hidden="true">#</a> 清除模块FIFO</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_prepare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="触发模块工作" tabindex="-1"><a class="header-anchor" href="#触发模块工作" aria-hidden="true">#</a> 触发模块工作</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_daudio_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>cmd: 触发命令</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块关闭工作资源-组件功能等" tabindex="-1"><a class="header-anchor" href="#设置模块关闭工作资源-组件功能等" aria-hidden="true">#</a> 设置模块关闭工作资源(组件功能等)</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sunxi_daudio_shutdown</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="spdif" tabindex="-1"><a class="header-anchor" href="#spdif" aria-hidden="true">#</a> SPDIF</h4><h5 id="初始化cpu-dai-dma、模块寄存器" tabindex="-1"><a class="header-anchor" href="#初始化cpu-dai-dma、模块寄存器" aria-hidden="true">#</a> 初始化CPU DAI (DMA、模块寄存器)</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_dai_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数:</p><ul><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="模块休眠-保存寄存器、关闭时钟" tabindex="-1"><a class="header-anchor" href="#模块休眠-保存寄存器、关闭时钟" aria-hidden="true">#</a> 模块休眠（保存寄存器、关闭时钟）</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_suspend</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="模块唤醒-开启时钟、初始化模块、恢复寄存器" tabindex="-1"><a class="header-anchor" href="#模块唤醒-开启时钟、初始化模块、恢复寄存器" aria-hidden="true">#</a> 模块唤醒（开启时钟、初始化模块、恢复寄存器）</h5><p>函数原型:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块分频系数" tabindex="-1"><a class="header-anchor" href="#设置模块分频系数" aria-hidden="true">#</a> 设置模块分频系数</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_set_clkdiv</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>clk_div: clk 分频系数</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块工作时钟-1" tabindex="-1"><a class="header-anchor" href="#设置模块工作时钟-1" aria-hidden="true">#</a> 设置模块工作时钟</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_set_sysclk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>freq: 时钟频率</li><li>dir: 时钟输出方向</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块开启工作资源-dma-参数、组件功能等-1" tabindex="-1"><a class="header-anchor" href="#设置模块开启工作资源-dma-参数、组件功能等-1" aria-hidden="true">#</a> 设置模块开启工作资源(DMA 参数、组件功能等)</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_startup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块硬件参数-1" tabindex="-1"><a class="header-anchor" href="#设置模块硬件参数-1" aria-hidden="true">#</a> 设置模块硬件参数</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_hw_params</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_pcm_hw_params</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>params: 硬件参数</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="清除模块fifo-清除中断" tabindex="-1"><a class="header-anchor" href="#清除模块fifo-清除中断" aria-hidden="true">#</a> 清除模块FIFO，清除中断</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_prepare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="触发模块工作-1" tabindex="-1"><a class="header-anchor" href="#触发模块工作-1" aria-hidden="true">#</a> 触发模块工作</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_spdif_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>cmd: 触发命令</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h4 id="dmic-1" tabindex="-1"><a class="header-anchor" href="#dmic-1" aria-hidden="true">#</a> DMIC</h4><h5 id="初始化cpu-dai-dma、模块寄存器-1" tabindex="-1"><a class="header-anchor" href="#初始化cpu-dai-dma、模块寄存器-1" aria-hidden="true">#</a> 初始化CPU DAI (DMA、模块寄存器)</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_dai_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="模块休眠-保存寄存器、关闭时钟-1" tabindex="-1"><a class="header-anchor" href="#模块休眠-保存寄存器、关闭时钟-1" aria-hidden="true">#</a> 模块休眠（保存寄存器、关闭时钟）</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_suspend</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="模块唤醒-开启时钟、恢复寄存器" tabindex="-1"><a class="header-anchor" href="#模块唤醒-开启时钟、恢复寄存器" aria-hidden="true">#</a> 模块唤醒（开启时钟、恢复寄存器）</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块-pll-clk" tabindex="-1"><a class="header-anchor" href="#设置模块-pll-clk" aria-hidden="true">#</a> 设置模块 PLL CLK</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_set_sysclk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>freq: 时钟频率</li><li>dir: 时钟输出方向</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块开启工作资源-dma-参数、组件功能等-2" tabindex="-1"><a class="header-anchor" href="#设置模块开启工作资源-dma-参数、组件功能等-2" aria-hidden="true">#</a> 设置模块开启工作资源(DMA 参数、组件功能等)</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_startup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块硬件参数-2" tabindex="-1"><a class="header-anchor" href="#设置模块硬件参数-2" aria-hidden="true">#</a> 设置模块硬件参数</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_hw_params</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_pcm_hw_params</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>params: 硬件参数</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="清除模块-fifo-清除中断" tabindex="-1"><a class="header-anchor" href="#清除模块-fifo-清除中断" aria-hidden="true">#</a> 清除模块 FIFO，清除中断</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_prepare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="触发模块工作-2" tabindex="-1"><a class="header-anchor" href="#触发模块工作-2" aria-hidden="true">#</a> 触发模块工作</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_dmic_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>cmd: 触发命令</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h3 id="codec-层" tabindex="-1"><a class="header-anchor" href="#codec-层" aria-hidden="true">#</a> Codec 层</h3><h4 id="audiocodec-adc-dac" tabindex="-1"><a class="header-anchor" href="#audiocodec-adc-dac" aria-hidden="true">#</a> AudioCodec(ADC/DAC)</h4><h5 id="模块休眠-保存寄存器、关闭时钟-2" tabindex="-1"><a class="header-anchor" href="#模块休眠-保存寄存器、关闭时钟-2" aria-hidden="true">#</a> 模块休眠（保存寄存器、关闭时钟）</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_suspend</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="模块唤醒-开启时钟、恢复寄存器-1" tabindex="-1"><a class="header-anchor" href="#模块唤醒-开启时钟、恢复寄存器-1" aria-hidden="true">#</a> 模块唤醒（开启时钟、恢复寄存器）</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pm_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">suspend_mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dev: 设备信息</li><li>mode: 休眠模式</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块时钟" tabindex="-1"><a class="header-anchor" href="#设置模块时钟" aria-hidden="true">#</a> 设置模块时钟</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_set_sysclk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">,</span> <span class="token keyword">int</span> clk_id<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>dai: cpu dai 信息</li><li>clk_id: clk 辅助信息</li><li>freq: 时钟频率</li><li>dir: 时钟输出方向</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="设置模块硬件参数-3" tabindex="-1"><a class="header-anchor" href="#设置模块硬件参数-3" aria-hidden="true">#</a> 设置模块硬件参数</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_hw_params</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_pcm_hw_params</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>params: 硬件参数</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="清除模块fifo-清除中断-1" tabindex="-1"><a class="header-anchor" href="#清除模块fifo-清除中断-1" aria-hidden="true">#</a> 清除模块FIFO，清除中断</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_prepare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>substream: pcm 子流信息</li><li>dai: cpu dai 信息</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h5 id="触发模块工作-3" tabindex="-1"><a class="header-anchor" href="#触发模块工作-3" aria-hidden="true">#</a> 触发模块工作</h5><p>函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sunxi_codec_trigger</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">snd_pcm_substream</span> <span class="token operator">*</span>substream<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_dai</span> <span class="token operator">*</span>dai<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>name: 声卡名称</li><li>codec: codec 设备信息</li><li>platform_type: platform 层设备类型</li></ul><p>返回值:</p><ul><li>0: 成功</li><li>其他:失败</li></ul><h3 id="软件调试接口" tabindex="-1"><a class="header-anchor" href="#软件调试接口" aria-hidden="true">#</a> 软件调试接口</h3><table><thead><tr><th style="text-align:left;">模块</th><th style="text-align:left;">接口</th><th style="text-align:left;">命令</th></tr></thead><tbody><tr><td style="text-align:left;">DMIC</td><td style="text-align:left;"><code>cmd_dmic_dump</code></td><td style="text-align:left;"><code>cmd_dmic_dump</code></td></tr><tr><td style="text-align:left;">SPDIF</td><td style="text-align:left;"><code>cmd_spdif_dump</code></td><td style="text-align:left;"><code>cmd_spdif_dump</code></td></tr><tr><td style="text-align:left;">DAUDIO</td><td style="text-align:left;"><code>cmd_daudio_dump</code></td><td style="text-align:left;"><code>cmd_daudio_dump</code></td></tr></tbody></table><h2 id="模块使用" tabindex="-1"><a class="header-anchor" href="#模块使用" aria-hidden="true">#</a> 模块使用</h2><p>一个声卡的简单测试，包含两部分，分别为声卡的控件设置及音频测试工具的使用。本章节将从以下 4 个通用小节和 1 个外挂 codec 小节介绍声卡如何使用。</p><ol><li>menuconfig 配置</li><li>声卡设备查看</li><li>声卡控件</li><li>声卡测试工具使用</li><li>I2S 外挂 CODEC</li></ol><h3 id="menuconfig-配置" tabindex="-1"><a class="header-anchor" href="#menuconfig-配置" aria-hidden="true">#</a> menuconfig 配置</h3><p>进入menuconfig 界面：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 进入RTOS 目录执行以下命令
mrtos_menuconfig
Drivers Options ‑‑‑<span class="token operator">&gt;</span>
    soc related device drivers ‑‑‑<span class="token operator">&gt;</span>
        SOUND Devices ‑‑‑<span class="token operator">&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Sound card support
                AW Sound Compenents ‑‑‑<span class="token operator">&gt;</span>
                    Allwinner alsa <span class="token function">library</span> <span class="token punctuation">(</span>tiny alsa library<span class="token punctuation">)</span> ‑‑‑<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还提供 aw‑tiny‑alsa‑lib, 包含了 alsa‑lib 主要的接口，没有任何插件，作用类似于 tinyalsa。aw‑tiny‑alsa‑lib 配置方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ‑‑‑&gt;
    soc related device drivers ‑‑‑&gt;
        SOUND Devices ‑‑‑&gt;
            [*] Sound card support
                AW Sound Compenents ‑‑‑&gt;
                    Allwinner alsa library (tiny alsa library) ‑‑‑&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>音频工具 aw‑alsa‑utils 相关配置项：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Drivers Options ‑‑‑&gt;
    soc related device drivers ‑‑‑&gt;
        SOUND Devices ‑‑‑&gt;
            [*] Sound card support
                AW Sound Compenents ‑‑‑&gt;
                    [*] alsa library utils select
                    [*] alsa library utils amixer
                    [*] alsa library utils aplay
                    [*] alsa library utils arecord
                    [ ] alsa library utils aloop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声卡设备查看" tabindex="-1"><a class="header-anchor" href="#声卡设备查看" aria-hidden="true">#</a> 声卡设备查看</h3><p>可输入以下命令查看系统挂载上的声卡</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># amixer <span class="token operator">-</span>l
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Sound Card list <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
card_num card_name
    <span class="token number">0</span>   audiocodecdac
    <span class="token number">1</span>   audiocodecadc
    <span class="token number">2</span>   snddaudio0
    <span class="token number">3</span>   snddmic
    <span class="token number">4</span>   sndspdif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>?&gt; 可通过在 <code>card_default.c</code> 修改 “card_name” 变量，设定声卡名称。</p><h3 id="声卡加载配置" tabindex="-1"><a class="header-anchor" href="#声卡加载配置" aria-hidden="true">#</a> 声卡加载配置</h3><p>声卡配置位于代码中, 路径如下：</p><p>在每个方案目录下面：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>projects/方案/src/card_default.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>snd_card_register</code> 函数进行声卡的注册</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">snd_card_register</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_codec</span> <span class="token operator">*</span>codec<span class="token punctuation">,</span> <span class="token keyword">int</span> platform_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>name: 表示声卡的名字，aw‑alsa‑lib中都需要通过该名字找到对应的声卡</li><li>codec: codec结构体，根据实际使用的codec进行配置，如R128的audiocodec,使用sun20iw2_codec;如ac108,使用 ac108_codec</li><li>platform_type: 与linux中ASOC框架类似，也需要指定使用哪种类型的platform,如CPUDAI, DAUDIO等</li></ul><p>例如注册 AC108 声卡</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">snd_card_register</span><span class="token punctuation">(</span><span class="token string">&quot;ac108&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ac108_codec<span class="token punctuation">,</span> SND_PLATFORM_TYPE_DAUDIO1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="声卡控件-4" tabindex="-1"><a class="header-anchor" href="#声卡控件-4" aria-hidden="true">#</a> 声卡控件</h3><h4 id="alsa-utils-工具" tabindex="-1"><a class="header-anchor" href="#alsa-utils-工具" aria-hidden="true">#</a> alsa-utils 工具</h4><p>alsa-utils 主要提供三个工具：</p><ol><li>aplay: 用于完成与播放相关的操作；</li><li>arecord: 用于完成与录音相关的操作；</li><li>amixer: 用于设置相关参数。</li></ol><h5 id="aplay" tabindex="-1"><a class="header-anchor" href="#aplay" aria-hidden="true">#</a> APLAY</h5><p>输入aplay 或aplay -h 可打印出使用方法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># aplay

Usage<span class="token operator">:</span> aplay <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help help
    <span class="token operator">--</span>version print current version
<span class="token operator">-</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>list<span class="token operator">-</span>devices list all soundcards and digital audio devices
<span class="token operator">-</span>L<span class="token punctuation">,</span> <span class="token operator">--</span>list<span class="token operator">-</span>pcms list device names
<span class="token operator">-</span>D<span class="token punctuation">,</span> <span class="token operator">--</span>device<span class="token operator">=</span>NAME select PCM by name
<span class="token operator">-</span>q<span class="token punctuation">,</span> <span class="token operator">--</span>quiet quiet mode
<span class="token operator">-</span>t<span class="token punctuation">,</span> <span class="token operator">--</span>file<span class="token operator">-</span>type TYPE file <span class="token function">type</span> <span class="token punctuation">(</span>voc<span class="token punctuation">,</span> wav<span class="token punctuation">,</span> raw or au<span class="token punctuation">)</span>
<span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>channels<span class="token operator">=</span># channels
<span class="token operator">-</span>f<span class="token punctuation">,</span> <span class="token operator">--</span>format<span class="token operator">=</span>FORMAT sample <span class="token function">format</span> <span class="token punctuation">(</span><span class="token keyword">case</span> insensitive<span class="token punctuation">)</span>
<span class="token operator">-</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>rate<span class="token operator">=</span># sample rate
<span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token operator">--</span>duration<span class="token operator">=</span># interrupt after # seconds
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看可以用于播放的声卡</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># aplay <span class="token operator">-</span>l
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> List of PLAYBACK Hardware Devices <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
card <span class="token number">0</span><span class="token operator">:</span> audiocodec <span class="token punctuation">[</span>audiocodec<span class="token punctuation">]</span><span class="token punctuation">,</span> device <span class="token number">0</span><span class="token operator">:</span> soc@<span class="token number">03000000</span><span class="token operator">:</span>codec_plat<span class="token operator">-</span>sunxi<span class="token operator">-</span>snd<span class="token operator">-</span>codec sunxisnd<span class="token operator">-</span>codec<span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Subdevices<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span>
    Subdevice #<span class="token number">0</span><span class="token operator">:</span> subdevice #<span class="token number">0</span>
card <span class="token number">2</span><span class="token operator">:</span> snddaudio0 <span class="token punctuation">[</span>snddaudio0<span class="token punctuation">]</span><span class="token punctuation">,</span> device <span class="token number">0</span><span class="token operator">:</span> <span class="token number">2032000.</span>daudio0_plat<span class="token operator">-</span>snd<span class="token operator">-</span>soc<span class="token operator">-</span>dummy<span class="token operator">-</span>dai snd<span class="token operator">-</span>socdummy<span class="token operator">-</span>dai<span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Subdevices<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span>
    Subdevice #<span class="token number">0</span><span class="token operator">:</span> subdevice #<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用声卡0 设备0 播放test.wav(用 ctrl c 退出)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># aplay <span class="token operator">-</span>D hw<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> test<span class="token punctuation">.</span>wav
Playing WAVE <span class="token char">&#39;test.wav&#39;</span> <span class="token operator">:</span> Signed <span class="token number">16</span> bit Little Endian<span class="token punctuation">,</span> Rate <span class="token number">8000</span> Hz<span class="token punctuation">,</span> Mono

<span class="token operator">^</span>C Aborted by signal Interrupt<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="arecord" tabindex="-1"><a class="header-anchor" href="#arecord" aria-hidden="true">#</a> ARECORD</h5><p>输入arecord 或arecord -h 可打印出使用方法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># arecord

Usage<span class="token operator">:</span> arecord <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help help
    <span class="token operator">--</span>version print current version
<span class="token operator">-</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>list<span class="token operator">-</span>devices list all soundcards and digital audio devices
<span class="token operator">-</span>L<span class="token punctuation">,</span> <span class="token operator">--</span>list<span class="token operator">-</span>pcms list device names
<span class="token operator">-</span>D<span class="token punctuation">,</span> <span class="token operator">--</span>device<span class="token operator">=</span>NAME select PCM by name
<span class="token operator">-</span>q<span class="token punctuation">,</span> <span class="token operator">--</span>quiet quiet mode
<span class="token operator">-</span>t<span class="token punctuation">,</span> <span class="token operator">--</span>file<span class="token operator">-</span>type TYPE file <span class="token function">type</span> <span class="token punctuation">(</span>voc<span class="token punctuation">,</span> wav<span class="token punctuation">,</span> raw or au<span class="token punctuation">)</span>
<span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>channels<span class="token operator">=</span># channels
<span class="token operator">-</span>f<span class="token punctuation">,</span> <span class="token operator">--</span>format<span class="token operator">=</span>FORMAT sample <span class="token function">format</span> <span class="token punctuation">(</span><span class="token keyword">case</span> insensitive<span class="token punctuation">)</span>
<span class="token operator">-</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>rate<span class="token operator">=</span># sample rate
<span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token operator">--</span>duration<span class="token operator">=</span># interrupt after # seconds
<span class="token operator">-</span>M<span class="token punctuation">,</span> <span class="token operator">--</span>mmap mmap stream
<span class="token operator">-</span>N<span class="token punctuation">,</span> <span class="token operator">--</span>nonblock nonblocking mode
<span class="token operator">-</span>F<span class="token punctuation">,</span> <span class="token operator">--</span>period<span class="token operator">-</span>time<span class="token operator">=</span># distance between interrupts is # microseconds
<span class="token operator">-</span>B<span class="token punctuation">,</span> <span class="token operator">--</span>buffer<span class="token operator">-</span>time<span class="token operator">=</span># buffer duration is # microseconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看可以用于录音的声卡</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># arecord <span class="token operator">-</span>l

<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> List of CAPTURE Hardware Devices <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
card <span class="token number">0</span><span class="token operator">:</span> audiocodec <span class="token punctuation">[</span>audiocodec<span class="token punctuation">]</span><span class="token punctuation">,</span> device <span class="token number">0</span><span class="token operator">:</span> soc@<span class="token number">03000000</span><span class="token operator">:</span>codec_plat<span class="token operator">-</span>sunxi<span class="token operator">-</span>snd<span class="token operator">-</span>codec sunxisnd<span class="token operator">-</span>codec<span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Subdevices<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span>
    Subdevice #<span class="token number">0</span><span class="token operator">:</span> subdevice #<span class="token number">0</span>
card <span class="token number">1</span><span class="token operator">:</span> snddmic <span class="token punctuation">[</span>snddmic<span class="token punctuation">]</span><span class="token punctuation">,</span> device <span class="token number">0</span><span class="token operator">:</span> <span class="token number">2031000.</span>dmic_plat<span class="token operator">-</span>snd<span class="token operator">-</span>soc<span class="token operator">-</span>dummy<span class="token operator">-</span>dai snd<span class="token operator">-</span>soc<span class="token operator">-</span>dummy<span class="token operator">-</span>dai<span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Subdevices<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span>
    Subdevice #<span class="token number">0</span><span class="token operator">:</span> subdevice #<span class="token number">0</span>
card <span class="token number">2</span><span class="token operator">:</span> snddaudio0 <span class="token punctuation">[</span>snddaudio0<span class="token punctuation">]</span><span class="token punctuation">,</span> device <span class="token number">0</span><span class="token operator">:</span> <span class="token number">2032000.</span>daudio0_plat<span class="token operator">-</span>snd<span class="token operator">-</span>soc<span class="token operator">-</span>dummy<span class="token operator">-</span>dai snd<span class="token operator">-</span>socdummy<span class="token operator">-</span>dai<span class="token operator">-</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Subdevices<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span>
    Subdevice #<span class="token number">0</span><span class="token operator">:</span> subdevice #<span class="token number">0</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用声卡1 的设备0 进行采样位数为16 的录音，并把数据保存在test.wav(用ctrl c 退出)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># arecord <span class="token operator">-</span>D hw<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token operator">-</span>f S16_LE test<span class="token punctuation">.</span>wav

Recording WAVE <span class="token char">&#39;test.wav&#39;</span> <span class="token operator">:</span> Signed <span class="token number">16</span> bit Little Endian<span class="token punctuation">,</span> Rate <span class="token number">8000</span> Hz<span class="token punctuation">,</span> Mono

<span class="token operator">^</span>C Aborted by signal Interrupt<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="amixer" tabindex="-1"><a class="header-anchor" href="#amixer" aria-hidden="true">#</a> AMIXER</h5><p>输入amixer 或amixer -h 可打印出使用方法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># amixer <span class="token operator">-</span>h

Usage<span class="token operator">:</span> amixer <span class="token operator">&lt;</span>options<span class="token operator">&gt;</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>

Available options<span class="token operator">:</span>
<span class="token operator">-</span>h<span class="token punctuation">,</span><span class="token operator">--</span>help this help
<span class="token operator">-</span>c<span class="token punctuation">,</span><span class="token operator">--</span>card N select the card
<span class="token operator">-</span>D<span class="token punctuation">,</span><span class="token operator">--</span>device N select the device<span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token char">&#39;default&#39;</span>
<span class="token operator">-</span>d<span class="token punctuation">,</span><span class="token operator">--</span>debug debug mode
<span class="token operator">-</span>n<span class="token punctuation">,</span><span class="token operator">--</span>nocheck <span class="token keyword">do</span> not perform range checking
<span class="token operator">-</span>v<span class="token punctuation">,</span><span class="token operator">--</span>version print version of this program
<span class="token operator">-</span>q<span class="token punctuation">,</span><span class="token operator">--</span>quiet be quiet
<span class="token operator">-</span>i<span class="token punctuation">,</span><span class="token operator">--</span>inactive show also inactive controls
<span class="token operator">-</span>a<span class="token punctuation">,</span><span class="token operator">--</span>abstract L select abstraction <span class="token function">level</span> <span class="token punctuation">(</span>none or basic<span class="token punctuation">)</span>
<span class="token operator">-</span>s<span class="token punctuation">,</span><span class="token operator">--</span><span class="token constant">stdin</span> Read and execute commands from <span class="token constant">stdin</span> sequentially
<span class="token operator">-</span>R<span class="token punctuation">,</span><span class="token operator">--</span>raw<span class="token operator">-</span>volume Use the raw <span class="token function">value</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span>
<span class="token operator">-</span>M<span class="token punctuation">,</span><span class="token operator">--</span>mapped<span class="token operator">-</span>volume Use the mapped volume

Available commands<span class="token operator">:</span>
scontrols show all mixer simple controls
scontents show contents of all mixer simple <span class="token function">controls</span> <span class="token punctuation">(</span><span class="token keyword">default</span> command<span class="token punctuation">)</span>
sset sID P set contents <span class="token keyword">for</span> one mixer simple control
sget sID get contents <span class="token keyword">for</span> one mixer simple control
controls show all controls <span class="token keyword">for</span> given card
contents show contents of all controls <span class="token keyword">for</span> given card
cset cID P set control contents <span class="token keyword">for</span> one control
cget cID get control contents <span class="token keyword">for</span> one control
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看声卡 1 的控件</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">1</span> scontrols

Simple mixer control <span class="token char">&#39;L0 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;L1 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;L2 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;L3 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;R0 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;R1 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;R2 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;R3 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
Simple mixer control <span class="token char">&#39;rx sync mode&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看声卡 1 的控件的具体配置</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">1</span> scontents
Simple mixer control <span class="token char">&#39;L0 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
    Capabilities<span class="token operator">:</span> volume volume<span class="token operator">-</span>joined
    Playback channels<span class="token operator">:</span> Mono
    Capture channels<span class="token operator">:</span> Mono
    Limits<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">255</span>
    Mono<span class="token operator">:</span> <span class="token number">176</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token operator">%</span><span class="token punctuation">]</span>
Simple mixer control <span class="token char">&#39;L1 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
    Capabilities<span class="token operator">:</span> volume volume<span class="token operator">-</span>joined
    Playback channels<span class="token operator">:</span> Mono
    Capture channels<span class="token operator">:</span> Mono
    Limits<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">255</span>
    Mono<span class="token operator">:</span> <span class="token number">176</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token operator">%</span><span class="token punctuation">]</span>
Simple mixer control <span class="token char">&#39;L2 volume&#39;</span><span class="token punctuation">,</span><span class="token number">0</span>
    Capabilities<span class="token operator">:</span> volume volume<span class="token operator">-</span>joined
    Playback channels<span class="token operator">:</span> Mono
    Capture channels<span class="token operator">:</span> Mono
    Limits<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">255</span>
    Mono<span class="token operator">:</span> <span class="token number">176</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token operator">%</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置声卡 1 第一个控件的值</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code># 拿到声卡<span class="token number">1</span>所有控件
<span class="token operator">~</span># amixer <span class="token operator">-</span>c <span class="token number">1</span> controls
numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L0 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L1 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L2 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L3 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;R0 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;R1 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;R2 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;R3 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;rx sync mode&#39;</span>

# 拿到控件内容
<span class="token operator">~</span># amixer cget numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L0 volume&#39;</span>
numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;rx sync mode&#39;</span>
    <span class="token punctuation">;</span> type<span class="token operator">=</span>ENUMERATED<span class="token punctuation">,</span>access<span class="token operator">=</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>items<span class="token operator">=</span><span class="token number">2</span>
    <span class="token punctuation">;</span> Item #<span class="token number">0</span> <span class="token char">&#39;Off&#39;</span>
    <span class="token punctuation">;</span> Item #<span class="token number">1</span> <span class="token char">&#39;On&#39;</span>
    <span class="token operator">:</span> values<span class="token operator">=</span><span class="token number">0</span>

# 设置控件值
<span class="token operator">~</span># amixer cset numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;L0 volume&#39;</span> <span class="token number">1</span>
numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>iface<span class="token operator">=</span>MIXER<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token char">&#39;rx sync mode&#39;</span>
    <span class="token punctuation">;</span> type<span class="token operator">=</span>ENUMERATED<span class="token punctuation">,</span>access<span class="token operator">=</span>rw<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>items<span class="token operator">=</span><span class="token number">2</span>
    <span class="token punctuation">;</span> Item #<span class="token number">0</span> <span class="token char">&#39;Off&#39;</span>
    <span class="token punctuation">;</span> Item #<span class="token number">1</span> <span class="token char">&#39;On&#39;</span>
    <span class="token operator">:</span> values<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aw‐alsa‐lib-插件配置" tabindex="-1"><a class="header-anchor" href="#aw‐alsa‐lib-插件配置" aria-hidden="true">#</a> aw‑alsa‑lib 插件配置</h3><p>aw‑alsa‑lib 与 linux 上 alsa‑lib 一样支持多种插件, 插件的选择、使用, 需要在代码中进行配置, 路径如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>在每个方案目录下面：
projects<span class="token operator">/</span>方案<span class="token operator">/</span>src<span class="token operator">/</span>alsa_config<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面根据插件类型进行简单说明</p><h4 id="hw-插件" tabindex="-1"><a class="header-anchor" href="#hw-插件" aria-hidden="true">#</a> hw 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_hw_config_t</span> snd_pcm_hw_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>card_name <span class="token operator">=</span> <span class="token string">&quot;audiocodec&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>device_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>card_name: 声卡名称,需要与card_default.c中注册声卡时指定的名称一致</li><li>device_num: pcm设备序号，目前仅支持一个pcm设备，所以只能为0</li></ul><h4 id="dmix-插件" tabindex="-1"><a class="header-anchor" href="#dmix-插件" aria-hidden="true">#</a> dmix 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_dmix_config_t</span> snd_pcm_dmix_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;dmix&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ipc_key <span class="token operator">=</span> <span class="token number">2222</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;hw:audiocodec&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>format <span class="token operator">=</span> SND_PCM_FORMAT_S16_LE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">48000</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>channels <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>period_size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>periods <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型dmix</li><li>ipc_key: 需要进行混音的均要指定同一ipc_key</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称,必须为hw类型</li><li>format: 采样格式</li><li>rate: 采样率</li><li>channels: 通道数</li><li>period_size: period_size大小,决定中断触发频率</li><li>periods: periods大小,决定buffer size大小</li></ul><h4 id="dsnoop-插件" tabindex="-1"><a class="header-anchor" href="#dsnoop-插件" aria-hidden="true">#</a> dsnoop 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_dsnoop_config_t</span> snd_pcm_dsnoop_ref_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;dsnoop&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ipc_key <span class="token operator">=</span> <span class="token number">1114</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;hw:ac107&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>format <span class="token operator">=</span> SND_PCM_FORMAT_S16_LE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">16000</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>channels <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>period_size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>periods <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型 dsnoop</li><li>ipc_key: 需要进行混音的均要指定同一ipc_key</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称,必须为hw类型</li><li>format: 采样格式</li><li>rate: 采样率</li><li>channels: 通道数</li><li>period_size: period_size大小,决定中断触发频率</li><li>periods: periods大小,决定buffer size大小</li></ul><h4 id="softvol-插件" tabindex="-1"><a class="header-anchor" href="#softvol-插件" aria-hidden="true">#</a> softvol 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_softvol_config_t</span> snd_pcm_softvol_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;softvol&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;PlaybackPlug&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>control <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>control_name <span class="token operator">=</span> <span class="token string">&quot;Soft Volume Master&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>card_name <span class="token operator">=</span> <span class="token string">&quot;audiocodec&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>min_dB <span class="token operator">=</span> ‑<span class="token number">51.0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>max_dB <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型softvol</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称,必须为hw类型</li><li>control: 控件信</li><li>control_name: 控件名称</li><li>card_name: 声卡名称，指定控件位于哪个声卡中</li><li>min_dB: 最小衰减</li><li>max_dB: 最大衰减</li><li>resolution: 精度</li></ul><blockquote><p>注意, 在第一次使用 softvol 插件进行播放时才会生成该控件; 如果想要在声卡驱动加载的时候就添加该控件，请修改对应的 codec 文件，例如 <code>SND_CTL_KCONTROL_USER(&quot;Soft Volume Master&quot;, 255, 0, 255)</code></p></blockquote><h4 id="asym-插件" tabindex="-1"><a class="header-anchor" href="#asym-插件" aria-hidden="true">#</a> asym 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_asym_config_t</span> snd_pcm_asym_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;asym&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>playback_pcm <span class="token operator">=</span> <span class="token string">&quot;PlaybackSoftVol&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>capture_pcm <span class="token operator">=</span> <span class="token string">&quot;CaptureDsnoop&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型softvol</li><li>playback_pcm: 指定播放设备的名称</li><li>capture_pcm: 指定录音设备的名称</li></ul><h4 id="route-插件" tabindex="-1"><a class="header-anchor" href="#route-插件" aria-hidden="true">#</a> route 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_route_config_t</span> snd_pcm_route_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;route&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;PlaybackRate&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>channels <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ttable <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        TTABLE_CONFIG_END
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型route</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称</li><li>channels: 通道数</li><li>ttable: 各通道配置,上面的配置表示将输入的两声道数据分别作0.5倍衰减，然后合成单声道数据</li><li>第一个值表示输入的通道序号</li><li>第二个值表示输出的通道序号</li><li>第三个值表示衰减值</li><li>ttable配置最后请务必添加TTABLE_CONFIG_END,表示配置结束</li></ul><h4 id="rate-插件" tabindex="-1"><a class="header-anchor" href="#rate-插件" aria-hidden="true">#</a> rate 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_rate_config_t</span> snd_pcm_rate_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;rate&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;PlaybackDmix&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>format <span class="token operator">=</span> SND_PCM_FORMAT_S16_LE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">48000</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>converter <span class="token operator">=</span> <span class="token string">&quot;speexrate&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型rate</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称</li><li>format 采样精度</li><li>rate 采样率</li><li>converter 指定使用的重采样算法,建议使用speexrate</li></ul><h4 id="file-插件" tabindex="-1"><a class="header-anchor" href="#file-插件" aria-hidden="true">#</a> file 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_file_config_t</span> snd_pcm_file_cap_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;CaptureDsnoop&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>format <span class="token operator">=</span> <span class="token string">&quot;raw&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&quot;adb&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">20191</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型file</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称</li><li>format: 音频格式，目前仅支持raw</li><li>mode: file插件保存数据的模式，目前仅支持adb</li><li>port: 端口号</li><li>server: 服务器端ip，当mode为network时才有效</li></ul><h4 id="multi-插件" tabindex="-1"><a class="header-anchor" href="#multi-插件" aria-hidden="true">#</a> multi 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_multi_config_t</span> snd_pcm_3mic_1ref_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;multi&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slaves <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CaptureDsnoop3Mic&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CaptureDsnoopRef&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> ‑<span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> ‑<span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> ‑<span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型multi</li><li>slaves: pcm从设备的信息,上述配置表示同时对a,b两个pcm设备进行录音</li><li>第一个参数表示pcm设备的别名,方便后续bingdings域指定不同的pcm设备</li><li>第二个参数表示pcm设备的名称</li><li>第三个参数表示通道总数</li><li>注意请在配置最后添加{ NULL, NULL, ‑1 },表示结束</li><li>bindings: 指定多个声卡的通道数排列,上述配置表示a声卡的3通道分别作为通道0,1,2输出,b声卡的通道0作为通道3输出</li><li>第一个参数表示录音输出的通道序号</li><li>第二个参数表示指定声卡的通道序号</li><li>注意请在配置最后添加{ ‑1, NULL, ‑1 },表示结束</li></ul><h4 id="plug-插件" tabindex="-1"><a class="header-anchor" href="#plug-插件" aria-hidden="true">#</a> plug 插件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">snd_pcm_plug_config_t</span> snd_pcm_plug_config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;plug&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pcm <span class="token operator">=</span> <span class="token string">&quot;PlaybackDmix&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>format <span class="token operator">=</span> SND_PCM_FORMAT_S16_LE<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>channels <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">48000</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rate_converter <span class="token operator">=</span> <span class="token string">&quot;speexrate&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>route_policy <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ttable <span class="token operator">=</span> <span class="token punctuation">{</span>
        TTABLE_CONFIG_END
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>type: 插件类型plug</li><li>slave: pcm从设备的信息</li><li>pcm: pcm设备的名称</li><li>format: 采样格式</li><li>channels: 通道数</li><li>rate: 采样率</li><li>rate_converter: 指定使用的重采样算法名称</li><li>route_policy: 使用route插件时的策略,可选average,copy,duplicate,default即为copy</li><li>ttable: 各通道配置,上面的配置表示将输入的两声道数据分别作0.5倍衰减，然后合成单声道数据</li><li>第一个值表示输入的通道序号</li><li>第二个值表示输出的通道序号</li><li>第三个值表示衰减值</li><li>ttable配置最后请务必添加TTABLE_CONFIG_END,表示配置结束</li></ul><h3 id="i2s-外挂codec" tabindex="-1"><a class="header-anchor" href="#i2s-外挂codec" aria-hidden="true">#</a> I2S 外挂CODEC</h3><h4 id="硬件连接" tabindex="-1"><a class="header-anchor" href="#硬件连接" aria-hidden="true">#</a> 硬件连接</h4><p>确保外部CODEC 芯片与SoC I2S 接口正确连接，具体确认连接如下。</p><ul><li>LRCK, BCLK: 确认该两线是否连接；</li><li>MCLK: 确认外部CODEC 是否需要MCLK，若需要，则确认MCLK 信号线连接；</li><li>DIN: 确认外部CODEC 是否需要录音功能，若需要，则确认DIN 信号线连接；</li><li>DOUT: 确认外部 CODEC 是否需要播放功能，若需要，则确认 DOUT 信号线连接。</li></ul><h4 id="获取外部-codec-i2s-协议格式" tabindex="-1"><a class="header-anchor" href="#获取外部-codec-i2s-协议格式" aria-hidden="true">#</a> 获取外部 CODEC I2S 协议格式</h4><p>确认外部 CODEC I2S 协议格式如下。</p><ol><li>功能需求：只录音、只播放、录音播放；</li><li>引脚确认：I2S 序号、data 引脚序号；</li><li>主从模式：SoC 作主（由 SoC 提供 BCLK,LRCK）、外挂 CODEC 作主（由外挂 CODEC提供 BCLK,LRCK）；</li><li>I2S 模式：标准 I2S、I2S_L、I2S_R、DSP_A、DSP_B；</li><li>LRCK 信号是否翻转；</li><li>BCLK 信号是否翻转；</li><li>MCLK 信号：MCLK 频率；</li><li>slot 个数：最高要支持多少 slot（音频通道数）；</li><li>slot 宽度：最高要支持多少 slot 宽度（音频采样位深）。</li></ol><p>查看 “模块介绍” 说明的 “AHUB” 或 “I2S/PCM” -&gt; “sys_conf 配置” 中的配置项说明，根据 I2S 协议格式进行配置。</p><h2 id="audiosystem" tabindex="-1"><a class="header-anchor" href="#audiosystem" aria-hidden="true">#</a> AudioSystem</h2><p>对于多核异构芯片，包含 RV/M33/DSP 三个核，各自运行这一个 RTOS，他们无法同时访问操作同一个音频硬件接口，因此软件上会实现跨核音频相关的功能，并且会屏蔽底层实现细节，让应用无感知，这套软件我们称之为 AudioSystem。</p><h3 id="audiosystem-软件框架" tabindex="-1"><a class="header-anchor" href="#audiosystem-软件框架" aria-hidden="true">#</a> AudioSystem 软件框架</h3><p>任意核上都能运行 AudioSystem, 因此可以提供统一的音频软件接口，而 AudioSystem 里面会根据实际配置对接到具体音频硬件接口，或者跨核音频接口。主要框图如下：</p><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter3/image3.png" alt=""></p><p>AudioSystem 可实现的功能包括：</p><ul><li>AudioTrack，支持多实例播放</li><li>AudioRecord，支持多实例录音</li><li>audio_plugin, 支持软件音量、重采样、精度转换、通道映射等功能</li><li>audio_hw, 向上给 AudioTrack/AudioRecord 提供通用的数据读写接口，向下可对接本地声卡、跨核音频接口，甚至是 BT a2dp source 等功能。</li></ul><p><img src="http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter3/image4.png" alt=""></p><h3 id="软件配置" tabindex="-1"><a class="header-anchor" href="#软件配置" aria-hidden="true">#</a> 软件配置</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>System components ‑‑‑<span class="token operator">&gt;</span>
    aw components ‑‑‑<span class="token operator">&gt;</span>
    AudioSystem Support ‑‑‑<span class="token operator">&gt;</span>
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> AW Audio System Support
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support PCM
        <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support Multi PCM
        <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support AMP
        <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support BT
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support EQ
        <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support AW EQ
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support DRC
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Track Support
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Record Support
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio System Utils
        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Plugin Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数配置" tabindex="-1"><a class="header-anchor" href="#参数配置" aria-hidden="true">#</a> 参数配置</h3><p>AudioSystem 默认使能录音和播放的参数设置，涉及到的相关配置如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>board<span class="token operator">/</span>r128s2<span class="token operator">/</span>pro<span class="token operator">/</span>configs<span class="token operator">/</span>sys_config<span class="token punctuation">.</span>fex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据板子的型号来选择对应的目录。这里是r128s2的pro板。录音和播放相关的参数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>audio_hw_rv<span class="token punctuation">]</span> <span class="token comment">//RV核参数配置</span>
pcm_pb_rate <span class="token operator">=</span> <span class="token number">48000</span>
pcm_pb_channels <span class="token operator">=</span> <span class="token number">1</span>
pcm_pb_bits <span class="token operator">=</span> <span class="token number">16</span>
pcm_pb_period_size <span class="token operator">=</span> <span class="token number">960</span>
pcm_pb_periods <span class="token operator">=</span> <span class="token number">4</span>
pcm_pb_card <span class="token operator">=</span> <span class="token string">&quot;hw:audiocodecdac&quot;</span> <span class="token comment">//播放声卡名称</span>
amp_cap_rate <span class="token operator">=</span> <span class="token number">16000</span>
amp_cap_channels <span class="token operator">=</span> <span class="token number">3</span>
amp_cap_bits <span class="token operator">=</span> <span class="token number">16</span>
amp_cap_period_size <span class="token operator">=</span> <span class="token number">320</span>
amp_cap_periods <span class="token operator">=</span> <span class="token number">4</span>
amp_cap_card <span class="token operator">=</span> <span class="token string">&quot;capture&quot;</span> <span class="token comment">//跨核声卡的名称</span>

<span class="token punctuation">[</span>audio_hw_dsp<span class="token punctuation">]</span> <span class="token comment">//dsp核参数配置</span>
pcm_cap_rate <span class="token operator">=</span> <span class="token number">48000</span>
pcm_cap_channels <span class="token operator">=</span> <span class="token number">3</span>
pcm_cap_bits <span class="token operator">=</span> <span class="token number">16</span>
pcm_cap_period_size <span class="token operator">=</span> <span class="token number">320</span>
pcm_cap_periods <span class="token operator">=</span> <span class="token number">4</span>
pcm_cap_card <span class="token operator">=</span> <span class="token string">&quot;hw:audiocodecadc&quot;</span> <span class="token comment">//录音声卡名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>请根据实际使用需求配置参数，不要随意设置参数，否则会导致录音或播放失败，因为驱动会限制 periods，period_size 还有buffer_bytes 的最小值和最大值。如果录音出现 overrun，可以尝试增大 periods，不要随意修改 period_size。</p></blockquote><h3 id="音频接口" tabindex="-1"><a class="header-anchor" href="#音频接口" aria-hidden="true">#</a> 音频接口</h3><p>头文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;AudioSystem.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AudioSystem.h 包含了 AudioTrack.h 以及 AudioRecord.h，因此应用上可以只包含 AudioSystem.h 即可</p><h4 id="audiotrack-接口" tabindex="-1"><a class="header-anchor" href="#audiotrack-接口" aria-hidden="true">#</a> AudioTrack 接口</h4><p>头文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;AudioTrack.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="创建-audiotrack" tabindex="-1"><a class="header-anchor" href="#创建-audiotrack" aria-hidden="true">#</a> 创建 AUDIOTRACK</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tAudioTrack <span class="token operator">*</span><span class="token function">AudioTrackCreate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>name: 指定audio_hw名称</li></ul><p>返回值：</p><ul><li>成功则返回AudioTrack句柄，失败返回NULL。</li></ul><blockquote><p>name 参数可支持的值，可以通过 ahw_list 命令查看, 例如 default,amp 也可以在代码中自定义添加需要的名称，详情可以参考 audio_hw/audio_hw.c 中的 add_default_ahw 函数</p></blockquote><h5 id="创建指定音频流类型的-audiotrack" tabindex="-1"><a class="header-anchor" href="#创建指定音频流类型的-audiotrack" aria-hidden="true">#</a> 创建指定音频流类型的 AUDIOTRACK</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tAudioTrack <span class="token operator">*</span><span class="token function">AudioTrackCreateWithStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>name: 指定audio_hw名称</li><li>type: 音频流类型，每个类型都有独自的音量调节曲线</li></ul><p>返回值：</p><ul><li>成功则返回AudioTrack句柄，失败返回NULL。</li></ul><blockquote><p>如果使用 AudioTrackCreate 接口，默认使用的音频流类型是 AUDIO_STREAM_SYSTEM 音频流音量曲线在 audio_plugin/softvolume.c 里面定义, 可以参考 softvol_stream_init 函数默认加载了两种类型的曲线。</p></blockquote><h5 id="设置-audiotrack-相关音频参数" tabindex="-1"><a class="header-anchor" href="#设置-audiotrack-相关音频参数" aria-hidden="true">#</a> 设置 AUDIOTRACK 相关音频参数</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackSetup</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> rate<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> channels<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> bits<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li><li>rate: 采样率</li><li>channels: 通道数</li><li>bits: 采样精度</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h5 id="写入-pcm-数据" tabindex="-1"><a class="header-anchor" href="#写入-pcm-数据" aria-hidden="true">#</a> 写入 PCM 数据</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackWrite</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li><li>data: 要写入的pcm数据</li><li>size: 数据大小,bytes</li></ul><p>返回值：</p><ul><li>成功则返回写入的字节数否则返回error code</li></ul><h5 id="开启-audiotrack" tabindex="-1"><a class="header-anchor" href="#开启-audiotrack" aria-hidden="true">#</a> 开启 AUDIOTRACK</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackStart</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><blockquote><p>放音流程中不一定要执行 AudioTrackStart 函数，因为在调用 AudioTrackWrite 的时候，内部会根据状态自动调用 start 的。</p></blockquote><h5 id="停止-audiotrack" tabindex="-1"><a class="header-anchor" href="#停止-audiotrack" aria-hidden="true">#</a> 停止 AUDIOTRACK</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackStop</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h5 id="获取当前-audiotrack-仍有多少数据未送入声卡" tabindex="-1"><a class="header-anchor" href="#获取当前-audiotrack-仍有多少数据未送入声卡" aria-hidden="true">#</a> 获取当前 AUDIOTRACK 仍有多少数据未送入声卡</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackDelay</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h5 id="销毁-audiotrack" tabindex="-1"><a class="header-anchor" href="#销毁-audiotrack" aria-hidden="true">#</a> 销毁 AUDIOTRACK</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioTrackDestroy</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>at: AudioTrack句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h4 id="audiorecord-接口" tabindex="-1"><a class="header-anchor" href="#audiorecord-接口" aria-hidden="true">#</a> AudioRecord 接口</h4><p>头文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;AudioRecord.h&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="创建-audiorecord" tabindex="-1"><a class="header-anchor" href="#创建-audiorecord" aria-hidden="true">#</a> 创建 AUDIORECORD</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tAudioRecord <span class="token operator">*</span><span class="token function">AudioRecordCreate</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>name: 指定audio_hw名称</li></ul><p>返回值：</p><ul><li>成功则返回AudioRecord句柄，失败返回NULL。</li></ul><h5 id="设置-audiorecord-相关音频参数" tabindex="-1"><a class="header-anchor" href="#设置-audiorecord-相关音频参数" aria-hidden="true">#</a> 设置 AUDIORECORD 相关音频参数</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioRecordSetup</span><span class="token punctuation">(</span>tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> rate<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> channels<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> bits<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ar: AudioRecord句柄</li><li>rate: 采样率</li><li>channels: 通道数</li><li>bits: 采样精度</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h5 id="获取-pcm-数据" tabindex="-1"><a class="header-anchor" href="#获取-pcm-数据" aria-hidden="true">#</a> 获取 PCM 数据</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioRecordRead</span><span class="token punctuation">(</span>tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ar: AudioRecord句柄</li><li>data: 读取的pcm数据存放的地址</li><li>size: 数据大小,bytes</li></ul><p>返回值：</p><ul><li>成功则返回写入的字节数,否则返回error code</li></ul><h5 id="开启-audiorecord" tabindex="-1"><a class="header-anchor" href="#开启-audiorecord" aria-hidden="true">#</a> 开启 AUDIORECORD</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioRecordStart</span><span class="token punctuation">(</span>tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ar: AudioRecord句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><blockquote><p>放音流程中不一定要执行 AudioRecordStart 函数，因为在调用 AudioRecordRead 的时候，内部会根据状态自动调用 start</p></blockquote><h5 id="停止-audiorecord" tabindex="-1"><a class="header-anchor" href="#停止-audiorecord" aria-hidden="true">#</a> 停止 AUDIORECORD</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioRecordStop</span><span class="token punctuation">(</span>tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ar: AudioRecord句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h5 id="销毁-audiorecord" tabindex="-1"><a class="header-anchor" href="#销毁-audiorecord" aria-hidden="true">#</a> 销毁 AUDIORECORD</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioRecordDestroy</span><span class="token punctuation">(</span>tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>ar: AudioRecord句柄</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><h4 id="audiosystem-其他接口" tabindex="-1"><a class="header-anchor" href="#audiosystem-其他接口" aria-hidden="true">#</a> AudioSystem 其他接口</h4><p>头文件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;AudioSystem.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="audiosystem-初始化" tabindex="-1"><a class="header-anchor" href="#audiosystem-初始化" aria-hidden="true">#</a> AUDIOSYSTEM 初始化</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">AudioSystemInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>无</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><blockquote><p>AudioSystemInit 一般在 os 的初始化流程中调用 (例如 main.c 中)</p></blockquote><h5 id="软件音量控制接口" tabindex="-1"><a class="header-anchor" href="#软件音量控制接口" aria-hidden="true">#</a> 软件音量控制接口</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">softvol_control_with_streamtype</span><span class="token punctuation">(</span><span class="token keyword">int</span> stream_type<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>vol_index<span class="token punctuation">,</span> <span class="token class-name">int16_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>stream_type: 音频流类型</li><li>vol_index: 据mode得到的音量数值</li><li>mode: 操作模式。0:读取；1：写入；2：读取范围</li></ul><p>返回值：</p><ul><li>成功则返回0,否则返回error code</li></ul><blockquote><p>当 mode 为 2 时，vol_index 的值表示音量范围，低 16bit 表示最小值，高 16bit 表示最大值。</p></blockquote><h4 id="audiosystem-接口示例" tabindex="-1"><a class="header-anchor" href="#audiosystem-接口示例" aria-hidden="true">#</a> AudioSystem 接口示例</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;console.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;AudioSystem.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;wav_parser.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hal_thread.h&gt;</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> g_loop_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">int8_t</span> g_play_or_cap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">int8_t</span> g_record_then_play <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">int8_t</span> g_bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_run_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_at_task_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_ar_task_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_rate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_channels <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> g_wav_path<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;16K_16bit_1ch&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_tmp_arg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> g_at_name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> g_ar_name<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> g_ar_forward_port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOCAL_PRIORITIES</span>    <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span>configMAX_PRIORITIES <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">?</span> configMAX_PRIORITIES <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">:</span> configMAX_PRIORITIES <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> loop_count<span class="token punctuation">;</span>
    <span class="token keyword">int</span> type<span class="token punctuation">;</span>       <span class="token comment">/* 0:wav, 1:data */</span>
    <span class="token class-name">uint32_t</span> rate<span class="token punctuation">,</span>channels<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> data_bytes<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> bits<span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> sec<span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> record_then_play<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sine_generate</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> rate<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> channels<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> bits<span class="token punctuation">,</span> <span class="token keyword">float</span> amp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sine_hz <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sine_point<span class="token punctuation">,</span> sine_cycle<span class="token punctuation">,</span> sine_point_bytes<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    <span class="token keyword">int</span> accuracy <span class="token operator">=</span> INT16_MAX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> frame_bytes<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>amp <span class="token operator">&gt;</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
        amp <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>amp <span class="token operator">&lt;</span> <span class="token number">0.01</span><span class="token punctuation">)</span>
        amp <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>

    frame_bytes <span class="token operator">=</span> channels <span class="token operator">*</span> bits <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    sine_point <span class="token operator">=</span> rate <span class="token operator">/</span> sine_hz<span class="token punctuation">;</span>
    sine_point_bytes <span class="token operator">=</span> frame_bytes <span class="token operator">*</span> sine_point<span class="token punctuation">;</span>
    sine_cycle <span class="token operator">=</span> len <span class="token operator">/</span> sine_point_bytes<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">int16_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> buf<span class="token punctuation">;</span>
        accuracy <span class="token operator">=</span> INT16_MAX<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sine_point<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">int16_t</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>amp <span class="token operator">*</span> accuracy <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>PI <span class="token operator">*</span> j <span class="token operator">/</span> sine_point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channels <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>channels <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
                data<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;unsupport channels:%d\\n&quot;</span><span class="token punctuation">,</span> channels<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bits <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">int32_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> buf<span class="token punctuation">;</span>
        accuracy <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sine_point<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">int32_t</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>amp <span class="token operator">*</span> accuracy <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>PI <span class="token operator">*</span> j <span class="token operator">/</span> sine_point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channels <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>channels <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
                data<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;unsupport channels:%d\\n&quot;</span><span class="token punctuation">,</span> channels<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sine_cycle<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i <span class="token operator">*</span> sine_point_bytes<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> sine_point_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*printf(&quot;[%s] line:%d buf:%p, dest:%p, ofs:%u\\n&quot;, __func__, __LINE__,*/</span>
            <span class="token comment">/*buf, buf + i * sine_point_bytes, i * sine_point_bytes);   */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> sine_cycle <span class="token operator">*</span> sine_point_bytes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">play_sine</span><span class="token punctuation">(</span>tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> rate<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> channels<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> bits<span class="token punctuation">,</span> <span class="token keyword">int</span> sec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> frame_loop <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">,</span> frame_bytes<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    frame_bytes <span class="token operator">=</span> frame_loop <span class="token operator">*</span> channels <span class="token operator">*</span> <span class="token punctuation">(</span>bits <span class="token operator">==</span> <span class="token number">16</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">=</span> rate <span class="token operator">*</span> sec <span class="token operator">/</span> frame_loop<span class="token punctuation">;</span>

    buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>frame_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*printf(&quot;[%s] line:%d malloc %u bytes\\n&quot;, __func__, __LINE__, frame_bytes);*/</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    len <span class="token operator">=</span> <span class="token function">sine_generate</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> frame_bytes<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bits<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size <span class="token operator">=</span> <span class="token function">AudioTrackWrite</span><span class="token punctuation">(</span>at<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;at write return %d\\n&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">at_sine_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">;</span>
    <span class="token keyword">int</span> channels <span class="token operator">=</span> g_channels<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rate <span class="token operator">=</span> g_rate<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sec <span class="token operator">=</span> g_run_time<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> bits <span class="token operator">=</span> g_bits<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span>
    at <span class="token operator">=</span> <span class="token function">AudioTrackCreate</span><span class="token punctuation">(</span>g_at_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    at <span class="token operator">=</span> <span class="token function">AudioTrackCreateWithStream</span><span class="token punctuation">(</span>g_at_name<span class="token punctuation">,</span> AUDIO_STREAM_MUSIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>at<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;at create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">AudioTrackSetup</span><span class="token punctuation">(</span>at<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">play_sine</span><span class="token punctuation">(</span>at<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bits<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">AudioTrackStop</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">AudioTrackDestroy</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">at_sine_task_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_thread_t</span> handle<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;at_sine%d&quot;</span><span class="token punctuation">,</span> g_at_task_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_at_task_id<span class="token operator">++</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>at_sine_task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">at_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tAudioTrack <span class="token operator">*</span>at<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>data <span class="token operator">=</span> arg<span class="token punctuation">;</span>

    at <span class="token operator">=</span> <span class="token function">AudioTrackCreate</span><span class="token punctuation">(</span>g_at_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>at<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;at create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token comment">/* Pass */</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> data<span class="token operator">-&gt;</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">/* play pcm data */</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> data<span class="token operator">-&gt;</span>loop_count<span class="token punctuation">;</span>
        <span class="token function">AudioTrackSetup</span><span class="token punctuation">(</span>at<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>rate<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>channels<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">AudioTrackWrite</span><span class="token punctuation">(</span>at<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>ptr<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>data_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            value<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d playback count=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">AudioTrackStop</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">AudioTrackDestroy</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>ptr<span class="token punctuation">)</span>
        <span class="token function">free</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">at_task_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_thread_t</span> handle<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>d<span class="token punctuation">;</span>

    d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        d<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>loop_count <span class="token operator">=</span> g_loop_count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;at_task%d&quot;</span><span class="token punctuation">,</span> g_at_task_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_at_task_id<span class="token operator">++</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>at_task<span class="token punctuation">,</span> d<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">adb_forward_create_with_rawdata</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">adb_forward_send</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">adb_forward_end</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ar_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tAudioRecord <span class="token operator">*</span>ar<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>data <span class="token operator">=</span> arg<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> rate <span class="token operator">=</span> data<span class="token operator">-&gt;</span>rate<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> channels <span class="token operator">=</span> data<span class="token operator">-&gt;</span>channels<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> bits <span class="token operator">=</span> data<span class="token operator">-&gt;</span>bits<span class="token punctuation">;</span>
    <span class="token keyword">int</span> total<span class="token punctuation">,</span> read_size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> frame_bytes <span class="token operator">=</span> bits <span class="token operator">/</span> <span class="token number">8</span>  <span class="token operator">*</span> channels<span class="token punctuation">;</span>
    <span class="token keyword">int</span> frames_bytes_loop <span class="token operator">=</span> frame_bytes <span class="token operator">*</span> rate <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">/* 10ms */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>sec<span class="token punctuation">)</span>
        total <span class="token operator">=</span> data<span class="token operator">-&gt;</span>sec <span class="token operator">*</span> rate <span class="token operator">*</span> frame_bytes<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        total <span class="token operator">=</span> frames_bytes_loop<span class="token punctuation">;</span> <span class="token comment">/* 10ms buffer */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPONENTS_USB_GADGET_ADB_FORWARD</span></span>
    <span class="token keyword">int</span> _port <span class="token operator">=</span> g_ar_forward_port<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>g_ar_forward_port <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        g_ar_forward_port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">adb_forward_create_with_rawdata</span><span class="token punctuation">(</span>_port<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        _port <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    ar <span class="token operator">=</span> <span class="token function">AudioRecordCreate</span><span class="token punctuation">(</span>g_ar_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ar create failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;no memory\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">AudioRecordSetup</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">AudioRecordStart</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] line:%d buf:%p, %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>loop_count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>sec<span class="token punctuation">)</span>
            total <span class="token operator">=</span> data<span class="token operator">-&gt;</span>sec <span class="token operator">*</span> rate <span class="token operator">*</span> frame_bytes<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            total <span class="token operator">=</span> frames_bytes_loop<span class="token punctuation">;</span>
        read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;</span> frames_bytes_loop<span class="token punctuation">)</span>
                size <span class="token operator">=</span> frames_bytes_loop<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                size <span class="token operator">=</span> total<span class="token punctuation">;</span>
            read_size <span class="token operator">=</span> <span class="token function">AudioRecordRead</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> buf <span class="token operator">+</span> read<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>read_size <span class="token operator">!=</span> frames_bytes_loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;read_size(%d) != frames_bytes_loop(%d)\\n&quot;</span><span class="token punctuation">,</span> read_size<span class="token punctuation">,</span> frames_bytes_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPONENTS_USB_GADGET_ADB_FORWARD</span></span>
            <span class="token function">adb_forward_send</span><span class="token punctuation">(</span>_port<span class="token punctuation">,</span> buf <span class="token operator">+</span> read<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            total <span class="token operator">-=</span> read_size<span class="token punctuation">;</span>
            read <span class="token operator">+=</span> read_size<span class="token punctuation">;</span>
            <span class="token comment">/*printf(&quot;[%s] line:%d residue:%d read=%u\\n&quot;, __func__, __LINE__, total, read);*/</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>read_size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">AudioRecordStop</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">AudioRecordDestroy</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ar <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPONENTS_USB_GADGET_ADB_FORWARD</span></span>
    <span class="token function">adb_forward_end</span><span class="token punctuation">(</span>_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* don&#39;t destroy port for repeating record */</span>
    <span class="token comment">/*adb_forward_destroy(_port);*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>record_then_play <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span>loop_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>rate <span class="token operator">=</span> rate<span class="token punctuation">,</span>
            <span class="token punctuation">.</span>channels <span class="token operator">=</span> channels<span class="token punctuation">,</span>
            <span class="token punctuation">.</span>ptr <span class="token operator">=</span> buf<span class="token punctuation">,</span>
            <span class="token punctuation">.</span>data_bytes <span class="token operator">=</span> read<span class="token punctuation">,</span>
            <span class="token punctuation">.</span>bits <span class="token operator">=</span> bits<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">at_task_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

err<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ar<span class="token punctuation">)</span>
        <span class="token function">AudioRecordDestroy</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
        <span class="token function">free</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ar_task_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">hal_thread_t</span> handle<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">as_test_data</span> <span class="token operator">*</span>d<span class="token punctuation">;</span>

    d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        d<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>rate <span class="token operator">=</span> g_rate<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>channels <span class="token operator">=</span> g_channels<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>bits <span class="token operator">=</span> g_bits<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>record_then_play <span class="token operator">=</span> g_record_then_play<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>loop_count <span class="token operator">=</span> g_loop_count<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>sec <span class="token operator">=</span> g_run_time<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">as_test_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ar_task%d&quot;</span><span class="token punctuation">,</span> g_ar_task_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_ar_task_id<span class="token operator">++</span><span class="token punctuation">;</span>
    handle <span class="token operator">=</span> <span class="token function">hal_thread_create</span><span class="token punctuation">(</span>ar_task<span class="token punctuation">,</span> d<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> HAL_THREAD_PRIORITY_APP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">as_test_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usgae: as_test [option]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-h,          as_test help\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-s,          stream, 0-playback; 1-capture; 2-playback sine\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-d,          duration, sec\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-r,          rate\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-c,          channels\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-b,          bits\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-t,          capture and then playback\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-n,          AudioTrack name\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-m,          AudioRecord name\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-l,          loop count\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-f,          adb forward port\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;play sine:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;as_test -s 2 -d 10 -r 48000\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;capture:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;as_test -s 1 -d 0 -l 1000 -r 16000 -c 3\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;capture and forward:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;as_test -s 1 -d 0 -l 1000 -r 16000 -c 3 -f 20227\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cmd_as_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    g_play_or_cap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    g_loop_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    g_run_time <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    g_rate <span class="token operator">=</span> <span class="token number">16000</span><span class="token punctuation">;</span>
    g_channels <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    g_bits <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    g_record_then_play <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    optind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">&quot;htl:s:ad:r:c:b:g:n:m:f:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;h&#39;</span><span class="token operator">:</span>
            <span class="token function">as_test_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;l&#39;</span><span class="token operator">:</span>
            g_loop_count <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token operator">:</span>
            <span class="token comment">/*
             * 0: playback
             * 1: capture
             * 2: playback sine
             * */</span>
            g_play_or_cap <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
            g_run_time <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;r&#39;</span><span class="token operator">:</span>
            g_rate <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;c&#39;</span><span class="token operator">:</span>
            g_channels <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;b&#39;</span><span class="token operator">:</span>
            g_bits <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span>
            g_record_then_play <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;g&#39;</span><span class="token operator">:</span>
            g_tmp_arg <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;n&#39;</span><span class="token operator">:</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>g_at_name<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_at_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;m&#39;</span><span class="token operator">:</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>g_ar_name<span class="token punctuation">,</span> optarg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_ar_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;f&#39;</span><span class="token operator">:</span>
            g_ar_forward_port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>optind <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">strncpy</span><span class="token punctuation">(</span>g_wav_path<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>optind<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_wav_path<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>g_wav_path<span class="token punctuation">,</span> <span class="token string">&quot;16K_16bit_1ch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>g_play_or_cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token function">at_task_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        <span class="token function">ar_task_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token function">at_sine_task_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;unknown &#39;s&#39; command\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_as_test<span class="token punctuation">,</span> as_test<span class="token punctuation">,</span> audio system test<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">as_volume_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usgae: as_volume [option]\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-h,          as_volume help\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-t,          volume type\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             1:system\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             2:music\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-m,          option mode\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             0:get\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             1:set\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;             2:get range\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_as_volume</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> type <span class="token operator">=</span> AUDIO_STREAM_SYSTEM<span class="token punctuation">;</span>
    <span class="token keyword">int</span> volume_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> volume_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    optind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">&quot;ht:m:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span>
            type <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;m&#39;</span><span class="token operator">:</span>
            volume_mode <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;h&#39;</span><span class="token operator">:</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">as_volume_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>optind <span class="token operator">&lt;</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>optind<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        volume_value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">|</span> value <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ret <span class="token operator">=</span> <span class="token function">softvol_control_with_streamtype</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>volume_value<span class="token punctuation">,</span> volume_mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;softvol(t:%d, m:%d), control failed:%d\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> volume_mode<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>volume_mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">/* read */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;softvol(%d) read, value=%d,%d\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span>
                <span class="token punctuation">(</span>volume_value <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>volume_value <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">/* write */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;softvol(%d) write, value=%d,%d\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span>
                <span class="token punctuation">(</span>volume_value <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>volume_value <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">/* read range */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;softvol(%d) read, min=%u, max=%u\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span>
                <span class="token punctuation">(</span>volume_value <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>volume_value <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">FINSH_FUNCTION_EXPORT_CMD</span><span class="token punctuation">(</span>cmd_as_volume<span class="token punctuation">,</span> as_volume<span class="token punctuation">,</span> audio system volume control<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="audiosystem-测试工具" tabindex="-1"><a class="header-anchor" href="#audiosystem-测试工具" aria-hidden="true">#</a> AudioSystem 测试工具</h3><h4 id="ahw-list-命令" tabindex="-1"><a class="header-anchor" href="#ahw-list-命令" aria-hidden="true">#</a> ahw_list 命令</h4><p>用于查看当前 audio_hw 中支持了哪些 audio_hw_elem</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>audio hw list<span class="token operator">:</span>
instance <span class="token operator">|</span>name <span class="token operator">|</span>read <span class="token operator">|</span>write
<span class="token number">0</span> <span class="token operator">|</span><span class="token keyword">default</span> <span class="token operator">|</span><span class="token number">0x04064128</span><span class="token operator">|</span><span class="token number">0x04063ff4</span>
<span class="token number">2</span> <span class="token operator">|</span>playback <span class="token operator">|</span><span class="token number">0000000000</span><span class="token operator">|</span><span class="token number">0x04063ff4</span>

第一列instance<span class="token punctuation">,</span> 每个elem都有一个instasnce值，决定他们是哪种类型的HW_TYPE
第二列name<span class="token punctuation">,</span> 每个elem都有唯一的标志名称。
第三列read，表示读函数指针，<span class="token number">0</span>表示不支持读。
第四列write<span class="token punctuation">,</span>表示写函数指针，<span class="token number">0</span>表示不支持写。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as-test-命令" tabindex="-1"><a class="header-anchor" href="#as-test-命令" aria-hidden="true">#</a> as_test 命令</h4><p>as_test 可用于测试播放录音功能。</p><table><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">‑s</td><td style="text-align:left;">哪种测试；0: playback; 1: capture; 2: 播放 sine</td></tr><tr><td style="text-align:left;">‑d</td><td style="text-align:left;">运行时间 (秒); 注意, 录音会根据该值申请对应大小的内存 buffer，不能设置太大</td></tr><tr><td style="text-align:left;">‑l</td><td style="text-align:left;">循环执行次数；可以结合‑d 参数实现较低内存长时间的测试</td></tr><tr><td style="text-align:left;">‑r</td><td style="text-align:left;">采样率</td></tr><tr><td style="text-align:left;">‑c</td><td style="text-align:left;">通道数</td></tr><tr><td style="text-align:left;">‑b</td><td style="text-align:left;">采样精度</td></tr><tr><td style="text-align:left;">‑t</td><td style="text-align:left;">录音然后播放</td></tr><tr><td style="text-align:left;">‑n</td><td style="text-align:left;">指定创建 AudioTrack 时的 name 参数</td></tr><tr><td style="text-align:left;">‑m</td><td style="text-align:left;">指定创建 AudioRecord 时的 name 参数</td></tr><tr><td style="text-align:left;">‑f</td><td style="text-align:left;">adb forward 的端口号</td></tr></tbody></table><p>测试举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>播放<span class="token number">5</span>s <span class="token number">48</span>K<span class="token punctuation">,</span><span class="token number">2</span>ch的正弦波数据<span class="token operator">:</span>
as_test ‑s <span class="token number">2</span> ‑d <span class="token number">5</span> ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span>

播放<span class="token number">5</span>s <span class="token number">48</span>K<span class="token punctuation">,</span><span class="token number">2</span>ch<span class="token punctuation">,</span><span class="token number">32</span>bit的正弦波数据<span class="token operator">:</span>
as_test ‑s <span class="token number">2</span> ‑d <span class="token number">5</span> ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span> ‑b <span class="token number">32</span>

播放<span class="token number">10</span>s <span class="token number">16</span>K <span class="token number">1</span>ch的正弦波数据：
as_test ‑s <span class="token number">2</span> ‑d <span class="token number">10</span> ‑r <span class="token number">16000</span> ‑c <span class="token number">1</span>

播放U盘中指定的文件：
as_test ‑s <span class="token number">0</span> ‑n playback <span class="token operator">/</span>usb_msc<span class="token operator">/</span>test<span class="token punctuation">.</span>wav

录音<span class="token number">1</span>s钟
as_test ‑s <span class="token number">1</span> ‑m amp ‑d <span class="token number">1</span> ‑c <span class="token number">3</span> ‑f <span class="token number">20227</span>

<span class="token number">3</span>通道录音<span class="token number">100</span>s<span class="token punctuation">(</span>‑d <span class="token number">0</span>表示由‑l决定时间<span class="token operator">=</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">10</span>ms<span class="token operator">=</span><span class="token number">100</span>s<span class="token punctuation">)</span>
as_test ‑s <span class="token number">1</span> ‑m amp ‑d <span class="token number">0</span> ‑l <span class="token number">10000</span> ‑c <span class="token number">3</span> ‑f <span class="token number">20227</span>

<span class="token number">2</span>通道录音<span class="token number">3</span>s然后播放出来
as_test ‑s <span class="token number">1</span> ‑d <span class="token number">3</span> ‑c <span class="token number">2</span> ‑m amp ‑t

如果是在dsp使用录音的话，‑m参数要使用<span class="token keyword">default</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as-volume-命令" tabindex="-1"><a class="header-anchor" href="#as-volume-命令" aria-hidden="true">#</a> as_volume 命令</h4><p>可以通过 as_volume 命令获取或者设置不同类型的音量值。</p><p>注意需要选中 COMPONENTS_AW_AUDIO_SYSTEM_PLUGIN 之后才有该功能。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>获取SYSTEM类型的当前音量值
命令：
as_volume ‑t <span class="token number">1</span> ‑m <span class="token number">0</span>
结果：
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span>

设置SYSTEM类型的音量值
命令：
as_volume ‑t <span class="token number">1</span> ‑m <span class="token number">1</span> <span class="token number">8</span>
结果：
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span>

获取MUSIC类型的音量范围
命令：
as_volume ‑t <span class="token number">2</span> ‑m <span class="token number">2</span>
结果：
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as-debug-命令" tabindex="-1"><a class="header-anchor" href="#as-debug-命令" aria-hidden="true">#</a> as_debug 命令</h4><p>as_debug 用于开启、关闭 AudioSystem 的调试模式。开启后会有更多 (对应代码中 <code>_debug</code>打印) 的调试信息。</p><p>开启方式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_debug <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="aw-音效" tabindex="-1"><a class="header-anchor" href="#aw-音效" aria-hidden="true">#</a> AW 音效</h2><p>FreeRTOS 中使用 AudioSystem 的 audio hw 层来实现 AW EQ 功能。该功能是 AW（AllWinner）提供的软件音效 EQ 音效，需要选择 EQ 库才能使用。</p><h3 id="编译-audiosystem-的-aw-eq" tabindex="-1"><a class="header-anchor" href="#编译-audiosystem-的-aw-eq" aria-hidden="true">#</a> 编译 AudioSystem 的 AW EQ</h3><p>下面是编译的配置。要先选择 EQ Module，才会出现 Audio HW Support AW EQ。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>System components ‑‑‑<span class="token operator">&gt;</span>
    aw components ‑‑‑<span class="token operator">&gt;</span>
        Algorithm Process Module ‑‑‑<span class="token operator">&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> EQ Module
        AudioSystem Support ‑‑‑<span class="token operator">&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> AW Audio System Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support PCM
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support Multi PCM
            ‑<span class="token operator">*</span>‑ Audio HW Support AMP
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support BT
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support EQ
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support AW EQ
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support DRC
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Track Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Record Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio System Utils
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Plugin Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用软件-aw-eq" tabindex="-1"><a class="header-anchor" href="#使用软件-aw-eq" aria-hidden="true">#</a> 使用软件 AW EQ</h3><ol><li>确保 data 目录下有 EQ.conf 配置文件，该配置文件保存的是调试 EQ 的参数。</li></ol><p>EQ.conf 的路径如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>board<span class="token operator">/</span>芯片<span class="token operator">/</span>项目<span class="token operator">/</span>data<span class="token operator">/</span>UDISK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如 R128S2的pro板。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>board<span class="token operator">/</span>r128s2<span class="token operator">/</span>pro<span class="token operator">/</span>data<span class="token operator">/</span>UDISK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>在应用核（RV）使用如下命令，即可调用软件 EQ 进行播放。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_test ‑s <span class="token number">0</span> ‑n playbackEQ <span class="token operator">/</span>usb_msc<span class="token operator">/</span>test<span class="token punctuation">.</span>wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>如果更新了 EQ 参数，需要更新配置文件 EQ.conf 到 data/UDISK 目录下，使用上述命令即可生效。</li></ol><h3 id="使用-audiosystem-的硬件-hw-eq-功能" tabindex="-1"><a class="header-anchor" href="#使用-audiosystem-的硬件-hw-eq-功能" aria-hidden="true">#</a> 使用 AudioSystem 的硬件 HW EQ 功能</h3><p>R128 平台支持硬件 DAC 的 20‑band main EQ 和 5‑band post EQ，所以软件 AW EQ 默认不使用。</p><p>FreeRTOS 中使用 AudioSystem 的 audio hw 层来实现 HW EQ 功能。</p><h4 id="编译-audiosystem-的-hw-eq" tabindex="-1"><a class="header-anchor" href="#编译-audiosystem-的-hw-eq" aria-hidden="true">#</a> 编译 AudioSystem 的 HW EQ</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>System components ‑‑‑<span class="token operator">&gt;</span>
    aw components ‑‑‑<span class="token operator">&gt;</span>
        AudioSystem Support ‑‑‑<span class="token operator">&gt;</span>
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> AW Audio System Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support PCM
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support Multi PCM
            ‑<span class="token operator">*</span>‑ Audio HW Support AMP
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support BT
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio HW Support EQ
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support AW EQ
            <span class="token punctuation">[</span> <span class="token punctuation">]</span> Audio HW Support DRC
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Track Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Record Support
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio System Utils
            <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Audio Plugin Support
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用离线-hw-eq" tabindex="-1"><a class="header-anchor" href="#使用离线-hw-eq" aria-hidden="true">#</a> 使用离线 HW EQ</h4><ol><li>确保 data 目录下有 R128EQ‑5band.conf 或 R128EQ‑20band.conf 配置文件，该配置文件保存的是硬件 EQ 的参数。如果上述配置文件都没有，HW EQ 就不会生效。</li></ol><p>R128EQ‑5band.conf或R128EQ‑20band.conf的路径如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>board<span class="token operator">/</span>r128s2<span class="token operator">/</span>pro<span class="token operator">/</span>data<span class="token operator">/</span>UDISK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据硬件配置来选择路径。这里对应的是R128S2的pro板。</p><p>如果没有文件会打印</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Parse from config file <span class="token operator">/</span>data<span class="token operator">/</span>R128EQ‑<span class="token number">20</span>band<span class="token punctuation">.</span>conf
Failed to open <span class="token operator">/</span>data<span class="token operator">/</span>R128EQ‑<span class="token number">5</span>band<span class="token punctuation">.</span><span class="token function">conf</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

第一行打印表示已经读取了<span class="token number">20</span>band EQ的配置文件，并设置到硬件。
第二行打印表示对应路径没有配置文件，读取失败，不会配置。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在应用核（RV）使用如下命令，即可调用 HW EQ 进行播放。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_test ‑s <span class="token number">0</span> ‑n playback <span class="token operator">/</span>usb_msc<span class="token operator">/</span>test<span class="token punctuation">.</span>wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果更新了 HW EQ 参数，需要更新配置文件 R128EQ‑5band.conf 或 R128EQ‑20band.conf 到data/UDISK 目录下。</p><blockquote><p>因为是硬件 EQ 是配置寄存器，所以只有开机后第一次播放音乐会生效，没有必要每次播放都更新硬件寄存器。如果更新了 HW EQ 参数，就要重启后，再次播放音乐生效</p></blockquote><h2 id="常用调试方法" tabindex="-1"><a class="header-anchor" href="#常用调试方法" aria-hidden="true">#</a> 常用调试方法</h2><h3 id="dump-寄存器" tabindex="-1"><a class="header-anchor" href="#dump-寄存器" aria-hidden="true">#</a> dump 寄存器</h3><p>通过 reg_read/reg_write 命令可以读写 SoC 上的寄存器，可以通过查看 SoC 的 user manual, 得到具体模块的寄存器地址。</p><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>audiocodec模块寄存器基地址为<span class="token number">0x5096000</span>

将<span class="token number">0x5096000</span>开始后面<span class="token number">4</span>个寄存器打印出来<span class="token operator">:</span>
reg_read <span class="token number">0x5096000</span> <span class="token number">0x10</span>

将<span class="token number">0x5096010</span>的值设置为<span class="token number">0x60004000</span>
reg_write <span class="token number">0x5096010</span> <span class="token number">0x80004000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实时获取录音数据" tabindex="-1"><a class="header-anchor" href="#实时获取录音数据" aria-hidden="true">#</a> 实时获取录音数据</h3><p>很多时候需要获取设备实际录音数据，用于确认数据的准确性、声学性能等，而在 RTOS 中存储介质比较有限，并且写入速度慢，并不能用于保存录音数据。这里利用 adb forword 功能，配合 alsa file 插件，可以实现基于 USB 传输的 PC 端实时获取录音数据的功能。</p><h4 id="pc-端通过脚本-实时获取录音数据" tabindex="-1"><a class="header-anchor" href="#pc-端通过脚本-实时获取录音数据" aria-hidden="true">#</a> PC 端通过脚本，实时获取录音数据</h4><blockquote><p>PC 上使用脚本录音，需要对应 python2.0 的版本。如果使用更高版本的 python，需要修改代码。最终保存的文件是 pcm 数据。</p></blockquote><p>准备一个 adb_record.py 写入以下脚本</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python2</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> time
<span class="token keyword">import</span> datetime

pc_port<span class="token operator">=</span><span class="token number">11112</span>
upload_file<span class="token operator">=</span><span class="token string">&quot;data.pcm&quot;</span>
upload_start<span class="token operator">=</span><span class="token string">&quot;‑‑&gt;AW_RTOS_SOCKET_UPLOAD_START&quot;</span>
upload_end<span class="token operator">=</span><span class="token string">&quot;‑‑&gt;AW_RTOS_SOCKET_UPLOAD_END&quot;</span>
data_length<span class="token operator">=</span><span class="token number">4096</span>

<span class="token keyword">def</span> <span class="token function">client_test</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    host <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span>
    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>data_length<span class="token punctuation">)</span>
        <span class="token keyword">if</span> upload_start <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">&#39;recv upload start flag...data_len=%d, flag_len=%d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>upload_start<span class="token punctuation">)</span><span class="token punctuation">)</span>
            now_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y‑%m‑%d‑%H‑%M‑%S&quot;</span><span class="token punctuation">)</span>
            upload_file<span class="token operator">=</span><span class="token string">&quot;record‑&quot;</span> <span class="token operator">+</span> now_time <span class="token operator">+</span> <span class="token string">&quot;.pcm&quot;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>upload_start<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>upload_file<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf‑8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;ab+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>upload_start<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> upload_end <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            index <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span>upload_end<span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">&#39;recv upload end flag...data_len=%d, str_index=%d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>
            <span class="token keyword">if</span> index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>upload_file<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf‑8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;ab+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span> <span class="token string">&#39;data is 0&#39;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment"># print &#39;recv data, len is &#39;, len(data)</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>upload_file<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf‑8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;ab+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
                    <span class="token keyword">print</span> <span class="token string">&#39;finish...&#39;</span>
                    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        port <span class="token operator">=</span> pc_port
        client_test<span class="token punctuation">(</span>port<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借用adb工具配置好forward相关功能，并执行python脚本adb_record.py开始都等待获取录音数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>adb shell af ‑p <span class="token number">20191</span> ‑r
adb forward tcp<span class="token operator">:</span><span class="token number">11112</span> tcp<span class="token operator">:</span><span class="token number">20191</span>
<span class="token punctuation">.</span><span class="token operator">/</span>adb_record<span class="token punctuation">.</span>py <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="小机端使用方法" tabindex="-1"><a class="header-anchor" href="#小机端使用方法" aria-hidden="true">#</a> 小机端使用方法</h4><h5 id="使用-alsa-插件录音" tabindex="-1"><a class="header-anchor" href="#使用-alsa-插件录音" aria-hidden="true">#</a> 使用 ALSA 插件录音</h5><p>可以通过串口，或者adb让设备进行录音，下面以adb方式举例：</p><p>录音60s:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>adb shell arecord ‑DCaptureFile ‑d <span class="token number">60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一直录音：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>adb shell arecord ‑DCaptureFile ‑l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想终止录音，可以再起一个终端输入命令：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>adb shell arecord ‑k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里arecord命令指定的pcm设备是CaptureFile, 通过alsa_config.c配置文件发现这是一个file插件，也就是说录音数据会经过file插件处理(通过adb发送数据到PC端)</p><h2 id="相关操作" tabindex="-1"><a class="header-anchor" href="#相关操作" aria-hidden="true">#</a> 相关操作</h2><h3 id="声卡驱动的加载" tabindex="-1"><a class="header-anchor" href="#声卡驱动的加载" aria-hidden="true">#</a> 声卡驱动的加载</h3><p>声卡配置位于代码中, 路径如下：</p><p>在每个方案目录下面：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>projects<span class="token operator">/</span>方案<span class="token operator">/</span>src<span class="token operator">/</span>card_default<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是dsp方案，该文件会在rtos‑hal仓库下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos‑hal<span class="token operator">/</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>sound<span class="token operator">/</span>card_default<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用snd_card_register函数进行声卡的注册</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">snd_card_register</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">snd_codec</span> <span class="token operator">*</span>codec<span class="token punctuation">,</span> <span class="token keyword">int</span> platform_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>name: 表示声卡的名字，aw‑alsa‑lib中都需要通过该名字找到对应的声卡</li><li>codec: codec结构体，根据实际使用的codec进行配置</li><li>platform_type: 与linux中ASOC框架类似，也需要指定使用哪种类型的platform,如CPUDAI, DAUDIO等</li></ul><p>举例：</p><p>注册R128 audiocodecdac声卡</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>card_name <span class="token operator">=</span> <span class="token string">&quot;audiocodecdac&quot;</span><span class="token punctuation">;</span>
<span class="token function">snd_card_register</span><span class="token punctuation">(</span>card_name<span class="token punctuation">,</span> audio_codec<span class="token punctuation">,</span> SND_PLATFORM_TYPE_CPUDAI_DAC<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声卡加载配置-1" tabindex="-1"><a class="header-anchor" href="#声卡加载配置-1" aria-hidden="true">#</a> 声卡加载配置</h3><p><code>snd_pcm_open</code> 打开的声卡名字都是由 <code>alsa_config.c</code> 中配置的，该文件一般在：</p><p>在每个方案目录下面：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>projects<span class="token operator">/</span>方案<span class="token operator">/</span>src<span class="token operator">/</span>alsa_config<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是dsp方案，该文件会在rtos‑hal仓库下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>rtos‑hal<span class="token operator">/</span>hal<span class="token operator">/</span>source<span class="token operator">/</span>sound<span class="token operator">/</span>component<span class="token operator">/</span>aw‑tiny‑alsa‑lib<span class="token operator">/</span>alsa_config<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置举例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token function">DEFINE_SND_PCM_HW_CONFIG</span><span class="token punctuation">(</span>audiocodec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name">snd_pcm_config_t</span> snd_pcm_global_configs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">SND_PCM_CONFIG</span><span class="token punctuation">(</span><span class="token string">&quot;hw:audiocodec&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hw&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>snd_audiocodec_hw_config<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示<code>snd_pcm_open</code>可用&quot;hw:audiocodec&quot;名字打开声卡，而底层声卡名字是audiocodec。</p><h3 id="音量设置" tabindex="-1"><a class="header-anchor" href="#音量设置" aria-hidden="true">#</a> 音量设置</h3><p>录音或者播放，会出现声音过小或者过大的问题。目前可以调整音量的有两处：</p><h4 id="硬件音量调整" tabindex="-1"><a class="header-anchor" href="#硬件音量调整" aria-hidden="true">#</a> 硬件音量调整</h4><p>可以通过 amixer 去调整控件。 对于 dac 来说，硬件音量分为 DAC Digtal volume 和 LINEOUT volume</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>amixer ‑c audiocodecdac
numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;DACL dig volume&#39;</span>
value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;DACR dig volume&#39;</span>
value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;LINEOUT volume&#39;</span>
value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">7</span>

amixer ‑c audiocodecdac set <span class="token number">0</span> <span class="token number">150</span>
amixer ‑c audiocodecdac set <span class="token number">1</span> <span class="token number">150</span>

dig volume是硬件的数字音量调节。
amixer ‑c audiocodecdac set <span class="token number">2</span> <span class="token number">5</span>
这个是输出的增益。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两组硬件音量，需要根据硬件来设置，过大会导致声音出现失真。 对于 adc 来说，硬件音量有 ADC Digtal volume 和 adc pga gain</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>amixer ‑c audiocodecadc
numid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;ADC1 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
numid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;ADC2 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
numid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;ADC3 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">129</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>
numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC1 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
numid<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC2 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>
numid<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;MIC3 volume&#39;</span>
value<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">31</span>

amixer ‑c audiocodecadc set <span class="token number">0</span> <span class="token number">150</span>
ADC1 volume指的是ADC Digtal volume

amixer ‑c audiocodecadc set <span class="token number">3</span> <span class="token number">19</span>
MIC1 volume指的是硬件pga gain。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述硬件音量，需要根据硬件来设置，过大会导致声音出现失真。</p><h4 id="软件音量调整" tabindex="-1"><a class="header-anchor" href="#软件音量调整" aria-hidden="true">#</a> 软件音量调整</h4><p>对于使用 aw‑alsa‑lib 的系统，可以使用 softvol 插件。 该插件可以生成一个用于调整音量的控件 “Soft Volume Master”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>amixer ‑c audiocodec
numid<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;Soft Volume Master&#39;</span>
value<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">255</span>

amixer ‑c audiocodec set <span class="token number">5</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于使用 aw‑tiny‑alsa‑lib 的系统，配置 AudioSystem 后，才能可以使用 softvol plugin，默认会 配置软件音量调节的功能。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_volume ‑h
Usgae<span class="token operator">:</span> as_volume <span class="token punctuation">[</span>option<span class="token punctuation">]</span>
    ‑h<span class="token punctuation">,</span> as_volume help
    ‑t<span class="token punctuation">,</span> volume type
        <span class="token number">1</span><span class="token operator">:</span>system
        <span class="token number">2</span><span class="token operator">:</span>music
    ‑m<span class="token punctuation">,</span> option mode
        <span class="token number">0</span><span class="token operator">:</span>get
        <span class="token number">1</span><span class="token operator">:</span>set
        <span class="token number">2</span><span class="token operator">:</span>get range

as_volume ‑t <span class="token number">1</span> ‑m <span class="token number">2</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">10</span>

as_volume ‑t <span class="token number">2</span> ‑m <span class="token number">2</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">10</span>

设置system类型的音频曲线
as_volume ‑t <span class="token number">1</span> ‑m <span class="token number">1</span> <span class="token number">8</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> write<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span>

读取system类型的音频曲线
as_volume ‑t <span class="token number">1</span> ‑m <span class="token number">0</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span>

设置music类型的音频曲线
as_volume ‑t <span class="token number">2</span> ‑m <span class="token number">1</span> <span class="token number">8</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> write<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span>

读取music类型的音频曲线
as_volume ‑t <span class="token number">2</span> ‑m <span class="token number">0</span>
<span class="token function">softvol</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> read<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h3>`,808),u={href:"https://bbs.aw-ol.com/",target:"_blank",rel:"noopener noreferrer"},d=a(`<h4 id="录音或播放变速" tabindex="-1"><a class="header-anchor" href="#录音或播放变速" aria-hidden="true">#</a> 录音或播放变速</h4><ol><li>确认录音和播放采样率和父时钟 PLL_AUDIO 是否属于同一频段。</li></ol><h4 id="audiocodec-输入输出无声音" tabindex="-1"><a class="header-anchor" href="#audiocodec-输入输出无声音" aria-hidden="true">#</a> AudioCodec 输入输出无声音</h4><ol><li>确认通路设置。</li></ol><p>通过 amixer 查看 route 状态，确认是否设置了需要的上下电通路。</p><ol><li>对于喇叭，确认功放芯片使能设置。</li></ol><p>查看驱动源码中 gpio_spk 的 GPIO 配置并和硬件原理图比对，确认是否适配了对应的 GPIO。</p><h4 id="dmic-录音异常-静音-通道移位" tabindex="-1"><a class="header-anchor" href="#dmic-录音异常-静音-通道移位" aria-hidden="true">#</a> DMIC 录音异常（静音/通道移位）</h4><ol><li>确认GPIO 是否正常。</li><li>通过DataSheet 核对sys_config.fex 部分的DMIC Pin 设置；</li><li>若sys_config.fex 不支持引脚设置，则到dmic-sun20iw2.h 直接查看g_dmic_gpio 结构 体的设置</li><li>确认CLK 的频率。</li></ol><p>以上正常情况下，示波器查看DMIC CLK 的频率是否满足<code>clk_rate = sample * over_sample_rate</code>关系。</p><ol><li>排查硬件连接和DMIC 物料问题。</li></ol><h4 id="外放无声" tabindex="-1"><a class="header-anchor" href="#外放无声" aria-hidden="true">#</a> 外放无声</h4><p>使用 aplay 进行播放，发现外放无声。通常需要排查三个方面。 1. 通路是否正确配置</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>amixer ‑c audiocodecdac
numid<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;LINEOUTL switch&#39;</span>
value<span class="token operator">=</span>on<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">=</span>off on

设置lineout通路
amixer ‑c audiocodecdac set <span class="token number">3</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>查看 gpio 是否正确配置</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>board<span class="token operator">/</span>r128s2<span class="token operator">/</span>pro<span class="token operator">/</span>configs<span class="token operator">/</span>sys_config<span class="token punctuation">.</span>fex
<span class="token punctuation">[</span>audiocodec<span class="token punctuation">]</span>
dacl_vol <span class="token operator">=</span> <span class="token number">129</span>
dacr_vol <span class="token operator">=</span> <span class="token number">129</span>
lineout_vol <span class="token operator">=</span> <span class="token number">5</span>
lineoutl_en <span class="token operator">=</span> <span class="token number">1</span>
lineoutr_en <span class="token operator">=</span> <span class="token number">0</span>
mic1_gain <span class="token operator">=</span> <span class="token number">19</span>
mic2_gain <span class="token operator">=</span> <span class="token number">19</span>
mic3_gain <span class="token operator">=</span> <span class="token number">0</span>
mic1_en <span class="token operator">=</span> <span class="token number">1</span>
mic2_en <span class="token operator">=</span> <span class="token number">1</span>
mic3_en <span class="token operator">=</span> <span class="token number">1</span>
mad_bind_en <span class="token operator">=</span> <span class="token number">0</span>
pa_pin_msleep <span class="token operator">=</span> <span class="token number">10</span>
pa_pin <span class="token operator">=</span> port<span class="token operator">:</span>PB3<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token keyword">default</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span>
capture_cma <span class="token operator">=</span> <span class="token number">30720</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>查看音量是否设置为 0</li></ol><h4 id="audiosystem-接口创建实例失败" tabindex="-1"><a class="header-anchor" href="#audiosystem-接口创建实例失败" aria-hidden="true">#</a> AudioSystem 接口创建实例失败</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_test ‑s <span class="token number">2</span> ‑d <span class="token number">5</span> ‑n playback ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span>

<span class="token punctuation">[</span>RV‑AudioTrack‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>AudioTrackCreateWithStream<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">562</span><span class="token punctuation">)</span> mt add at failed
at create failed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开 as_debug</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_debug <span class="token number">1</span>
set audio system debug<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">[</span>RV‑AudioSystem‑INF<span class="token punctuation">]</span><span class="token punctuation">[</span>print_test<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span> Audio System test
<span class="token punctuation">[</span>RV‑AudioSystem‑DBG<span class="token punctuation">]</span><span class="token punctuation">[</span>print_test<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span> Audio System test
<span class="token punctuation">[</span>RV‑AudioSystem‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>print_test<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span> Audio System test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次播放</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_test ‑s <span class="token number">2</span> ‑d <span class="token number">5</span> ‑n playback ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span>
<span class="token punctuation">[</span>RV‑AudioTrack‑DBG<span class="token punctuation">]</span><span class="token punctuation">[</span>AudioTrackCreateWithStream<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">540</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>RV‑MixerThread‑DBG<span class="token punctuation">]</span><span class="token punctuation">[</span>MixerThreadAddAT<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>RV‑AudioHW‑DBG<span class="token punctuation">]</span><span class="token punctuation">[</span>find_alias_name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">146</span><span class="token punctuation">)</span> ahw alias name<span class="token operator">:</span>playback vs playback stream<span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">[</span>RV‑AudioHW‑DBG<span class="token punctuation">]</span><span class="token punctuation">[</span>find_alias_name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">146</span><span class="token punctuation">)</span> ahw alias name<span class="token operator">:</span>amp‑cap vs playback stream<span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">[</span>RV‑AudioTrack‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>AudioTrackCreateWithStream<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">562</span><span class="token punctuation">)</span> mt add at failed
at create failed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声卡驱动在 RV 核，不可能会使用跨核接口 “amp‑cap”。使用 ahw_list 查看</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>c906<span class="token operator">&gt;</span> ahw_list

audio hw list<span class="token operator">:</span>
instance <span class="token operator">|</span>name <span class="token operator">|</span>read <span class="token operator">|</span>write
‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑
audio hw alias<span class="token operator">:</span>
p<span class="token operator">:</span> <span class="token keyword">default</span> ‑‑<span class="token operator">&gt;</span> playback
c<span class="token operator">:</span> <span class="token keyword">default</span> ‑‑<span class="token operator">&gt;</span> amp‑cap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明 audio_hw 中没有本地的 audio_hw_elem。在开机的时候，并没有初始化 AudioSystem 导致缺少本地 audio_hw_elem。</p><p>在启动中加上下面的代码，最好是加在声卡注册后。 <code>lichee/rtos/projects/r128s2/pro_c906/src/main.c</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPONENTS_AW_AUDIO_SYSTEM</span></span>
<span class="token function">AudioSystemInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="audiosystem-接口播放失败" tabindex="-1"><a class="header-anchor" href="#audiosystem-接口播放失败" aria-hidden="true">#</a> AudioSystem 接口播放失败</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>c906<span class="token operator">&gt;</span> as_test ‑s <span class="token number">2</span> ‑d <span class="token number">5</span> ‑n playback ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span>

<span class="token punctuation">[</span>RV‑AP‑chmap‑INF<span class="token punctuation">]</span><span class="token punctuation">[</span>chmap_ap_update_mode<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">)</span> ALL ‑<span class="token operator">&gt;</span> <span class="token function">ch0</span><span class="token punctuation">(</span>average<span class="token punctuation">)</span>
<span class="token punctuation">[</span>AWALSA_ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>_snd_pcm_hw_open<span class="token operator">:</span><span class="token number">452</span><span class="token punctuation">]</span>no such card<span class="token operator">:</span>audiocodec
<span class="token punctuation">[</span>AWALSA_ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>snd_pcm_open<span class="token operator">:</span><span class="token number">258</span><span class="token punctuation">]</span>pcm <span class="token string">&quot;hw:audiocodec&quot;</span><span class="token operator">:</span> snd_pcm_open_config <span class="token function">failed</span> <span class="token punctuation">(</span><span class="token keyword">return</span><span class="token operator">:</span> ‑<span class="token number">19</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>RV‑AudioHWPCM‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>pcm_ahw_open<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span> pcm open failed<span class="token operator">:</span>‑<span class="token number">19</span>
<span class="token punctuation">[</span>RV‑AudioTrack‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>__AudioTrackWrite<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">397</span><span class="token punctuation">)</span> writw <span class="token function">error</span><span class="token punctuation">(</span>MT transfer data error<span class="token operator">?</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>RV‑AudioTrack‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>_AudioTrackWrite<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">505</span><span class="token punctuation">)</span> write_size<span class="token operator">=</span><span class="token number">480</span><span class="token punctuation">,</span> in_size<span class="token operator">=</span><span class="token number">480</span><span class="token punctuation">,</span> written<span class="token operator">=</span>‑<span class="token number">1</span>
at write <span class="token keyword">return</span> ‑<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 log 可以很明显的看到，声卡的名字不匹配，导致打开声卡失败。查看声卡的名字，以 R128 为例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>c906<span class="token operator">&gt;</span>soundcard ‑l
Sound Card list<span class="token operator">:</span>
card_num card_name
    <span class="token number">0</span> audiocodecdac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改为0 声卡，正常播放</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>c906<span class="token operator">&gt;</span> as_test ‑s <span class="token number">0</span> ‑d <span class="token number">5</span> ‑n playback ‑r <span class="token number">48000</span> ‑c <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="audiosystem-接口录音失败" tabindex="-1"><a class="header-anchor" href="#audiosystem-接口录音失败" aria-hidden="true">#</a> AudioSystem 接口录音失败</h4><p>输入的指令是正确的，但是设置参数却失败。log如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>as_test ‑s <span class="token number">1</span> ‑d <span class="token number">3</span> ‑c <span class="token number">2</span> ‑m amp ‑t

<span class="token punctuation">[</span>RV‑AudioRecord‑INF<span class="token punctuation">]</span><span class="token punctuation">[</span>AudioRecordParamSetup<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span> create tbuf<span class="token operator">:</span><span class="token number">0000000008313</span>AA0<span class="token punctuation">,</span> <span class="token number">1920</span>
<span class="token punctuation">[</span>RV‑AP‑chmap‑INF<span class="token punctuation">]</span><span class="token punctuation">[</span>chmap_ap_update_mode<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span> ch0 ‑<span class="token operator">&gt;</span> ch0
<span class="token punctuation">[</span>SND_ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>sunxi_codec_hw_params<span class="token operator">:</span><span class="token number">1036</span><span class="token punctuation">]</span>capture only support <span class="token number">1</span><span class="token operator">~</span><span class="token number">3</span> channel
<span class="token punctuation">[</span>RV‑AP‑chmap‑INF<span class="token punctuation">]</span><span class="token punctuation">[</span>chmap_ap_update_mode<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span> ch1 ‑<span class="token operator">&gt;</span> ch1
<span class="token punctuation">[</span>SND_ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>soc_pcm_hw_params<span class="token operator">:</span><span class="token number">434</span><span class="token punctuation">]</span>codec_dai set hw params failed
<span class="token punctuation">[</span>ar_task<span class="token punctuation">]</span> line<span class="token operator">:</span><span class="token number">549</span> buf<span class="token operator">:</span><span class="token number">00000000083</span>EE960<span class="token punctuation">,</span> <span class="token number">192000</span>
Unable to install hw prams<span class="token operator">!</span>
c906<span class="token operator">&gt;</span><span class="token punctuation">[</span>DSP‑AudioRecord‑ERR<span class="token punctuation">]</span><span class="token punctuation">[</span>__AudioRecordRead<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">228</span><span class="token punctuation">)</span> read <span class="token function">error</span><span class="token punctuation">(</span>ST transfer data error<span class="token operator">?</span><span class="token punctuation">)</span>
AudioRecordReadRM failed<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token keyword">return</span> ‑<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题也比较常见，因为驱动增加了检查，没有设置通路，直接录音就会导致这个错误。跟外放无声类似，出现录音失败或无声的问题，也是按照下面的顺序排查。 1. 录音通路是否正确配置。 2. 录音音量是否设置为 0。</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="gpio-功能复用配置" tabindex="-1"><a class="header-anchor" href="#gpio-功能复用配置" aria-hidden="true">#</a> GPIO 功能复用配置</h3><ul><li>AudioCodec 模块：</li><li>所用引脚功能均固化，无需进行 pin 功能复用配置。</li><li>I2S/PCM，SPDIF，DMIC 模块：</li><li>可选择不进行 pin 功能复用配置，该情况仍可生成声卡，但引脚无实际输入输出功能。</li></ul><blockquote><p>驱动会直接从配置文件获取节点的所有引脚，与引脚的名称无关</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">port</span><span class="token expression"><span class="token operator">:</span>端口<span class="token operator">+</span>组内序号<span class="token operator">&lt;</span>功能分配<span class="token operator">&gt;</span><span class="token operator">&lt;</span>内部电阻状态<span class="token operator">&gt;</span><span class="token operator">&lt;</span>驱动能力<span class="token operator">&gt;</span><span class="token operator">&lt;</span>输出电平状态<span class="token operator">&gt;</span> </span></span>
# <span class="token operator">&lt;</span><span class="token operator">&gt;</span> 内为默认值则取 <span class="token keyword">default</span>

pin_xxx <span class="token operator">=</span> port<span class="token operator">:</span>PA23<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token keyword">default</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function k(m,v){const e=t("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("若下列问题无法解决您所遇到的问题，请到 "),s("a",u,[n("全志在线开发者论坛"),l(e)]),n(" 发帖询问")]),d])}const h=p(i,[["render",k],["__file","chapter3.html.vue"]]);export{h as default};
